// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: sigmob_ssp_response.proto
package com.sigmob.sdk.base.models.rtb;

import android.os.Parcelable;

import com.czhj.wire.AndroidMessage;
import com.czhj.wire.FieldEncoding;
import com.czhj.wire.Message;
import com.czhj.wire.ProtoAdapter;
import com.czhj.wire.ProtoReader;
import com.czhj.wire.ProtoWriter;
import com.czhj.wire.WireField;
import com.czhj.wire.internal.Internal;
import com.czhj.wire.okio.ByteString;

import java.io.IOException;
import java.util.List;

public final class ResponseNativeAd extends AndroidMessage<ResponseNativeAd, ResponseNativeAd.Builder> {
    public static final ProtoAdapter<ResponseNativeAd> ADAPTER = new ProtoAdapter_ResponseNativeAd();

    public static final Parcelable.Creator<ResponseNativeAd> CREATOR = AndroidMessage.newCreator(ADAPTER);

    private static final long serialVersionUID = 0L;

    public static final Integer DEFAULT_TYPE = 0;

    /**
     * native 对象不为空则必填，元素对象
     */
    @WireField(
            tag = 1,
            adapter = "ResponseAsset#ADAPTER",
            label = WireField.Label.REPEATED
    )
    public final List<ResponseAsset> assets;

    /**
     * 1: 单视频、2: 单图、3: 多图(指3张图片)
     */
    @WireField(
            tag = 2,
            adapter = "com.squareup.wire.ProtoAdapter#UINT32"
    )
    public final Integer type;

    public ResponseNativeAd(List<ResponseAsset> assets, Integer type) {
        this(assets, type, ByteString.EMPTY);
    }

    public ResponseNativeAd(List<ResponseAsset> assets, Integer type, ByteString unknownFields) {
        super(ADAPTER, unknownFields);
        this.assets = Internal.immutableCopyOf("assets", assets);
        this.type = type;
    }

    @Override
    public Builder newBuilder() {
        Builder builder = new Builder();
        builder.assets = Internal.copyOf("assets", assets);
        builder.type = type;
        builder.addUnknownFields(unknownFields());
        return builder;
    }

    @Override
    public boolean equals(Object other) {
        if (other == this) return true;
        if (!(other instanceof ResponseNativeAd)) return false;
        ResponseNativeAd o = (ResponseNativeAd) other;
        return unknownFields().equals(o.unknownFields())
                && assets.equals(o.assets)
                && Internal.equals(type, o.type);
    }

    @Override
    public int hashCode() {
        int result = super.hashCode;
        if (result == 0) {
            result = unknownFields().hashCode();
            result = result * 37 + assets.hashCode();
            result = result * 37 + (type != null ? type.hashCode() : 0);
            super.hashCode = result;
        }
        return result;
    }

    @Override
    public String toString() {
        StringBuilder builder = new StringBuilder();
        if (!assets.isEmpty()) builder.append(", assets=").append(assets);
        if (type != null) builder.append(", type=").append(type);
        return builder.replace(0, 2, "ResponseNativeAd{").append('}').toString();
    }

    public static final class Builder extends Message.Builder<ResponseNativeAd, Builder> {
        public List<ResponseAsset> assets;

        public Integer type = DEFAULT_TYPE;

        public Builder() {
            assets = Internal.newMutableList();
        }

        /**
         * native 对象不为空则必填，元素对象
         */
        public Builder assets(List<ResponseAsset> assets) {
            Internal.checkElementsNotNull(assets);
            this.assets = assets;
            return this;
        }

        /**
         * 1: 单视频、2: 单图、3: 多图(指3张图片)
         */
        public Builder type(Integer type) {
            this.type = type;
            return this;
        }

        @Override
        public ResponseNativeAd build() {
            return new ResponseNativeAd(assets, type, super.buildUnknownFields());
        }
    }

    private static final class ProtoAdapter_ResponseNativeAd extends ProtoAdapter<ResponseNativeAd> {
        public ProtoAdapter_ResponseNativeAd() {
            super(FieldEncoding.LENGTH_DELIMITED, ResponseNativeAd.class);
        }

        @Override
        public int encodedSize(ResponseNativeAd value) {
            return ResponseAsset.ADAPTER.asRepeated().encodedSizeWithTag(1, value.assets)
                    + ProtoAdapter.UINT32.encodedSizeWithTag(2, value.type)
                    + value.unknownFields().size();
        }

        @Override
        public void encode(ProtoWriter writer, ResponseNativeAd value) throws IOException {
            ResponseAsset.ADAPTER.asRepeated().encodeWithTag(writer, 1, value.assets);
            ProtoAdapter.UINT32.encodeWithTag(writer, 2, value.type);
            writer.writeBytes(value.unknownFields());
        }

        @Override
        public ResponseNativeAd decode(ProtoReader reader) throws IOException {
            Builder builder = new Builder();
            long token = reader.beginMessage();
            for (int tag; (tag = reader.nextTag()) != -1; ) {
                switch (tag) {
                    case 1:
                        builder.assets.add(ResponseAsset.ADAPTER.decode(reader));
                        break;
                    case 2:
                        builder.type(ProtoAdapter.UINT32.decode(reader));
                        break;
                    default: {
                        FieldEncoding fieldEncoding = reader.peekFieldEncoding();
                        Object value = fieldEncoding.rawProtoAdapter().decode(reader);
                        builder.addUnknownField(tag, fieldEncoding, value);
                    }
                }
            }
            reader.endMessage(token);
            return builder.build();
        }

        @Override
        public ResponseNativeAd redact(ResponseNativeAd value) {
            Builder builder = value.newBuilder();
            Internal.redactElements(builder.assets, ResponseAsset.ADAPTER);
            builder.clearUnknownFields();
            return builder.build();
        }
    }
}
