// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: sigmob_ssp_response.proto
package com.sigmob.sdk.base.models.rtb;

import android.os.Parcelable;

import com.czhj.wire.AndroidMessage;
import com.czhj.wire.FieldEncoding;
import com.czhj.wire.Message;
import com.czhj.wire.ProtoAdapter;
import com.czhj.wire.ProtoReader;
import com.czhj.wire.ProtoWriter;
import com.czhj.wire.WireField;
import com.czhj.wire.internal.Internal;
import com.czhj.wire.okio.ByteString;

import java.io.IOException;
import java.util.List;
import java.util.Map;


/**
 * 广告信息
 */
public final class Ad extends AndroidMessage<Ad, Ad.Builder> {
  public static final ProtoAdapter<Ad> ADAPTER = new ProtoAdapter_Ad();

  public static final Parcelable.Creator<Ad> CREATOR = AndroidMessage.newCreator(ADAPTER);

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_ADSLOT_ID = "";

  public static final String DEFAULT_VID = "";

  public static final String DEFAULT_CUST_ID = "";

  public static final String DEFAULT_CAMP_ID = "";

  public static final String DEFAULT_CRID = "";

  public static final Integer DEFAULT_BID_PRICE = 0;

  public static final String DEFAULT_PRODUCT_ID = "";

  public static final String DEFAULT_SETTLEMENT_PRICE_ENC = "";

  public static final Integer DEFAULT_IS_OVERRIDE = 0;

  public static final String DEFAULT_AD_SOURCE_LOGO = "";

  public static final String DEFAULT_AD_SOURCE_CHANNEL = "";

  public static final Integer DEFAULT_AD_TYPE = 0;

  public static final Integer DEFAULT_EXPIRED_TIME = 0;

  public static final Boolean DEFAULT_FORBIDEN_PARSE_LANDINGPAGE = false;

  public static final Integer DEFAULT_DISPLAY_ORIENTATION = 0;

  public static final Integer DEFAULT_BID_TYPE = 0;

  public static final String DEFAULT_ATTRIBUTION_ID = "";

  /**
   * 对应请求时填写的广告位ID
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String adslot_id;

  /**
   * 广告曝光id.
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String vid;

  /**
   * 客户ID
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String cust_id;

  /**
   * 推广计划ID
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String camp_id;

  /**
   * 创意ID
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String crid;

  /**
   * 物料元数据组(素材)，目前只有一个
   */
  @WireField(
      tag = 6,
      adapter = "com.sigmob.sdk.base.models.rtb.MaterialMeta#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<MaterialMeta> materials;

  /**
   * 广告监控信息
   */
  @WireField(
      tag = 7,
      adapter = "com.sigmob.sdk.base.models.rtb.Tracking#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<Tracking> ad_tracking;

  /**
   * 最高竞价，单位cpm分
   */
  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer bid_price;

  /**
   * 下载类广告时，为product在app store的id
   */
  @WireField(
      tag = 9,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String product_id;

  /**
   * 媒体和投放平台的结算价格密文
   */
  @WireField(
      tag = 10,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String settlement_price_enc;

  /**
   * 0:没有；1：有
   */
  @WireField(
      tag = 11,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer is_override;

  /**
   * 广告来源方的logo小图标地址
   */
  @WireField(
      tag = 12,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String ad_source_logo;

  /**
   * 广告来源编码
   */
  @WireField(
      tag = 13,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String ad_source_channel;

  /**
   * 广告类型：1=奖励视频广告, 2=开屏
   */
  @WireField(
      tag = 14,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer ad_type;

  /**
   * 保留扩展字段
   */
  @WireField(
      tag = 15,
      keyAdapter = "com.squareup.wire.ProtoAdapter#STRING",
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final Map<String, String> options;

  /**
   * 广告过期时间 单位为秒
   */
  @WireField(
      tag = 16,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer expired_time;

  /**
   * 禁止解析落地页
   */
  @WireField(
      tag = 17,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean forbiden_parse_landingpage;

  /**
   * 广告播放方向：0 自动 默认， 1.竖屏，2.横屏，3. 横竖屏
   */
  @WireField(
      tag = 18,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer display_orientation;

  /**
   * 广告设置；sdk 3.4.0版本开始为独立广告设置；
   */
  @WireField(
      tag = 19,
      adapter = "com.sigmob.sdk.base.models.rtb.AdSetting#ADAPTER"
  )
  public final AdSetting ad_setting;

  /**
   * 投放平台的竞价类型: 1 cpm, 2 cpc, 3 cpa
   */
  @WireField(
      tag = 20,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer bid_type;

  /**
   * 广告的归因id
   */
  @WireField(
      tag = 21,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String attribution_id;

  /**
   * 广告新监测链接宏
   */
  @WireField(
      tag = 24,
      keyAdapter = "com.squareup.wire.ProtoAdapter#STRING",
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final Map<String, String> ad_track_macro;

  @WireField(
      tag = 27,
      adapter = "com.sigmob.sdk.base.models.rtb.WXProgramRes#ADAPTER"
  )
  public final WXProgramRes wx_program_res;

  /**
   * c-s 返回的出价以及url
   */
  @WireField(
      tag = 29,
      adapter = "com.sigmob.sdk.base.models.rtb.BiddingResponse#ADAPTER"
  )
  public final BiddingResponse bidding_response;

  public Ad(String adslot_id, String vid, String cust_id, String camp_id, String crid,
      List<MaterialMeta> materials, List<Tracking> ad_tracking, Integer bid_price,
      String product_id, String settlement_price_enc, Integer is_override, String ad_source_logo,
      String ad_source_channel, Integer ad_type, Map<String, String> options, Integer expired_time,
      Boolean forbiden_parse_landingpage, Integer display_orientation, AdSetting ad_setting,
      Integer bid_type, String attribution_id, Map<String, String> ad_track_macro,
      WXProgramRes wx_program_res, BiddingResponse bidding_response) {
    this(adslot_id, vid, cust_id, camp_id, crid, materials, ad_tracking, bid_price, product_id, settlement_price_enc, is_override, ad_source_logo, ad_source_channel, ad_type, options, expired_time, forbiden_parse_landingpage, display_orientation, ad_setting, bid_type, attribution_id, ad_track_macro, wx_program_res, bidding_response, ByteString.EMPTY);
  }

  public Ad(String adslot_id, String vid, String cust_id, String camp_id, String crid,
      List<MaterialMeta> materials, List<Tracking> ad_tracking, Integer bid_price,
      String product_id, String settlement_price_enc, Integer is_override, String ad_source_logo,
      String ad_source_channel, Integer ad_type, Map<String, String> options, Integer expired_time,
      Boolean forbiden_parse_landingpage, Integer display_orientation, AdSetting ad_setting,
      Integer bid_type, String attribution_id, Map<String, String> ad_track_macro,
      WXProgramRes wx_program_res, BiddingResponse bidding_response, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.adslot_id = adslot_id;
    this.vid = vid;
    this.cust_id = cust_id;
    this.camp_id = camp_id;
    this.crid = crid;
    this.materials = Internal.immutableCopyOf("materials", materials);
    this.ad_tracking = Internal.immutableCopyOf("ad_tracking", ad_tracking);
    this.bid_price = bid_price;
    this.product_id = product_id;
    this.settlement_price_enc = settlement_price_enc;
    this.is_override = is_override;
    this.ad_source_logo = ad_source_logo;
    this.ad_source_channel = ad_source_channel;
    this.ad_type = ad_type;
    this.options = Internal.immutableCopyOf("options", options);
    this.expired_time = expired_time;
    this.forbiden_parse_landingpage = forbiden_parse_landingpage;
    this.display_orientation = display_orientation;
    this.ad_setting = ad_setting;
    this.bid_type = bid_type;
    this.attribution_id = attribution_id;
    this.ad_track_macro = Internal.immutableCopyOf("ad_track_macro", ad_track_macro);
    this.wx_program_res = wx_program_res;
    this.bidding_response = bidding_response;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.adslot_id = adslot_id;
    builder.vid = vid;
    builder.cust_id = cust_id;
    builder.camp_id = camp_id;
    builder.crid = crid;
    builder.materials = Internal.copyOf("materials", materials);
    builder.ad_tracking = Internal.copyOf("ad_tracking", ad_tracking);
    builder.bid_price = bid_price;
    builder.product_id = product_id;
    builder.settlement_price_enc = settlement_price_enc;
    builder.is_override = is_override;
    builder.ad_source_logo = ad_source_logo;
    builder.ad_source_channel = ad_source_channel;
    builder.ad_type = ad_type;
    builder.options = Internal.copyOf("options", options);
    builder.expired_time = expired_time;
    builder.forbiden_parse_landingpage = forbiden_parse_landingpage;
    builder.display_orientation = display_orientation;
    builder.ad_setting = ad_setting;
    builder.bid_type = bid_type;
    builder.attribution_id = attribution_id;
    builder.ad_track_macro = Internal.copyOf("ad_track_macro", ad_track_macro);
    builder.wx_program_res = wx_program_res;
    builder.bidding_response = bidding_response;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof Ad)) return false;
    Ad o = (Ad) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(adslot_id, o.adslot_id)
        && Internal.equals(vid, o.vid)
        && Internal.equals(cust_id, o.cust_id)
        && Internal.equals(camp_id, o.camp_id)
        && Internal.equals(crid, o.crid)
        && materials.equals(o.materials)
        && ad_tracking.equals(o.ad_tracking)
        && Internal.equals(bid_price, o.bid_price)
        && Internal.equals(product_id, o.product_id)
        && Internal.equals(settlement_price_enc, o.settlement_price_enc)
        && Internal.equals(is_override, o.is_override)
        && Internal.equals(ad_source_logo, o.ad_source_logo)
        && Internal.equals(ad_source_channel, o.ad_source_channel)
        && Internal.equals(ad_type, o.ad_type)
        && options.equals(o.options)
        && Internal.equals(expired_time, o.expired_time)
        && Internal.equals(forbiden_parse_landingpage, o.forbiden_parse_landingpage)
        && Internal.equals(display_orientation, o.display_orientation)
        && Internal.equals(ad_setting, o.ad_setting)
        && Internal.equals(bid_type, o.bid_type)
        && Internal.equals(attribution_id, o.attribution_id)
        && ad_track_macro.equals(o.ad_track_macro)
        && Internal.equals(wx_program_res, o.wx_program_res)
        && Internal.equals(bidding_response, o.bidding_response);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (adslot_id != null ? adslot_id.hashCode() : 0);
      result = result * 37 + (vid != null ? vid.hashCode() : 0);
      result = result * 37 + (cust_id != null ? cust_id.hashCode() : 0);
      result = result * 37 + (camp_id != null ? camp_id.hashCode() : 0);
      result = result * 37 + (crid != null ? crid.hashCode() : 0);
      result = result * 37 + materials.hashCode();
      result = result * 37 + ad_tracking.hashCode();
      result = result * 37 + (bid_price != null ? bid_price.hashCode() : 0);
      result = result * 37 + (product_id != null ? product_id.hashCode() : 0);
      result = result * 37 + (settlement_price_enc != null ? settlement_price_enc.hashCode() : 0);
      result = result * 37 + (is_override != null ? is_override.hashCode() : 0);
      result = result * 37 + (ad_source_logo != null ? ad_source_logo.hashCode() : 0);
      result = result * 37 + (ad_source_channel != null ? ad_source_channel.hashCode() : 0);
      result = result * 37 + (ad_type != null ? ad_type.hashCode() : 0);
      result = result * 37 + options.hashCode();
      result = result * 37 + (expired_time != null ? expired_time.hashCode() : 0);
      result = result * 37 + (forbiden_parse_landingpage != null ? forbiden_parse_landingpage.hashCode() : 0);
      result = result * 37 + (display_orientation != null ? display_orientation.hashCode() : 0);
      result = result * 37 + (ad_setting != null ? ad_setting.hashCode() : 0);
      result = result * 37 + (bid_type != null ? bid_type.hashCode() : 0);
      result = result * 37 + (attribution_id != null ? attribution_id.hashCode() : 0);
      result = result * 37 + ad_track_macro.hashCode();
      result = result * 37 + (wx_program_res != null ? wx_program_res.hashCode() : 0);
      result = result * 37 + (bidding_response != null ? bidding_response.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (adslot_id != null) builder.append(", adslot_id=").append(adslot_id);
    if (vid != null) builder.append(", vid=").append(vid);
    if (cust_id != null) builder.append(", cust_id=").append(cust_id);
    if (camp_id != null) builder.append(", camp_id=").append(camp_id);
    if (crid != null) builder.append(", crid=").append(crid);
    if (!materials.isEmpty()) builder.append(", materials=").append(materials);
    if (!ad_tracking.isEmpty()) builder.append(", ad_tracking=").append(ad_tracking);
    if (bid_price != null) builder.append(", bid_price=").append(bid_price);
    if (product_id != null) builder.append(", product_id=").append(product_id);
    if (settlement_price_enc != null) builder.append(", settlement_price_enc=").append(settlement_price_enc);
    if (is_override != null) builder.append(", is_override=").append(is_override);
    if (ad_source_logo != null) builder.append(", ad_source_logo=").append(ad_source_logo);
    if (ad_source_channel != null) builder.append(", ad_source_channel=").append(ad_source_channel);
    if (ad_type != null) builder.append(", ad_type=").append(ad_type);
    if (!options.isEmpty()) builder.append(", options=").append(options);
    if (expired_time != null) builder.append(", expired_time=").append(expired_time);
    if (forbiden_parse_landingpage != null) builder.append(", forbiden_parse_landingpage=").append(forbiden_parse_landingpage);
    if (display_orientation != null) builder.append(", display_orientation=").append(display_orientation);
    if (ad_setting != null) builder.append(", ad_setting=").append(ad_setting);
    if (bid_type != null) builder.append(", bid_type=").append(bid_type);
    if (attribution_id != null) builder.append(", attribution_id=").append(attribution_id);
    if (!ad_track_macro.isEmpty()) builder.append(", ad_track_macro=").append(ad_track_macro);
    if (wx_program_res != null) builder.append(", wx_program_res=").append(wx_program_res);
    if (bidding_response != null) builder.append(", bidding_response=").append(bidding_response);
    return builder.replace(0, 2, "Ad{").append('}').toString();
  }

    public static final class Builder extends Message.Builder<Ad, Builder> {
      public String adslot_id = DEFAULT_ADSLOT_ID;

      public String vid = DEFAULT_VID;
      public String cust_id = DEFAULT_CUST_ID;

      public String camp_id = DEFAULT_CAMP_ID;

      public String crid = DEFAULT_CRID;

      public List<MaterialMeta> materials;

      public List<Tracking> ad_tracking;

      public Integer bid_price = DEFAULT_BID_PRICE;

      public String product_id = DEFAULT_PRODUCT_ID;

      public String settlement_price_enc = DEFAULT_SETTLEMENT_PRICE_ENC;

      public Integer is_override = DEFAULT_IS_OVERRIDE;

      public String ad_source_logo = DEFAULT_AD_SOURCE_LOGO;

      public String ad_source_channel = DEFAULT_AD_SOURCE_CHANNEL;

      public Integer ad_type = DEFAULT_AD_TYPE;

      public Map<String, String> options;

      public Integer expired_time = DEFAULT_EXPIRED_TIME;

      public Boolean forbiden_parse_landingpage = DEFAULT_FORBIDEN_PARSE_LANDINGPAGE;

      public Integer display_orientation = DEFAULT_DISPLAY_ORIENTATION;

      public AdSetting ad_setting;

      public Integer bid_type = DEFAULT_BID_TYPE;

      public String attribution_id = DEFAULT_ATTRIBUTION_ID;

      public Map<String, String> ad_track_macro;

      public WXProgramRes wx_program_res;

      public BiddingResponse bidding_response;

    public Builder() {
      materials = Internal.newMutableList();
      ad_tracking = Internal.newMutableList();
      options = Internal.newMutableMap();
      ad_track_macro = Internal.newMutableMap();
    }

    /**
     * 对应请求时填写的广告位ID
     */
    public Builder adslot_id(String adslot_id) {
      this.adslot_id = adslot_id;
      return this;
    }

    /**
     * 广告曝光id.
     */
    public Builder vid(String vid) {
      this.vid = vid;
      return this;
    }

    /**
     * 客户ID
     */
    public Builder cust_id(String cust_id) {
      this.cust_id = cust_id;
      return this;
    }

    /**
     * 推广计划ID
     */
    public Builder camp_id(String camp_id) {
      this.camp_id = camp_id;
      return this;
    }

    /**
     * 创意ID
     */
    public Builder crid(String crid) {
      this.crid = crid;
      return this;
    }

    /**
     * 物料元数据组(素材)，目前只有一个
     */
    public Builder materials(List<MaterialMeta> materials) {
      Internal.checkElementsNotNull(materials);
      this.materials = materials;
      return this;
    }

    /**
     * 广告监控信息
     */
    public Builder ad_tracking(List<Tracking> ad_tracking) {
      Internal.checkElementsNotNull(ad_tracking);
      this.ad_tracking = ad_tracking;
      return this;
    }

    /**
     * 最高竞价，单位cpm分
     */
    public Builder bid_price(Integer bid_price) {
      this.bid_price = bid_price;
      return this;
    }

    /**
     * 下载类广告时，为product在app store的id
     */
    public Builder product_id(String product_id) {
      this.product_id = product_id;
      return this;
    }

    /**
     * 媒体和投放平台的结算价格密文
     */
    public Builder settlement_price_enc(String settlement_price_enc) {
      this.settlement_price_enc = settlement_price_enc;
      return this;
    }

    /**
     * 0:没有；1：有
     */
    public Builder is_override(Integer is_override) {
      this.is_override = is_override;
      return this;
    }

    /**
     * 广告来源方的logo小图标地址
     */
    public Builder ad_source_logo(String ad_source_logo) {
      this.ad_source_logo = ad_source_logo;
      return this;
    }

    /**
     * 广告来源编码
     */
    public Builder ad_source_channel(String ad_source_channel) {
      this.ad_source_channel = ad_source_channel;
      return this;
    }

    /**
     * 广告类型：1=奖励视频广告, 2=开屏
     */
    public Builder ad_type(Integer ad_type) {
      this.ad_type = ad_type;
      return this;
    }

    /**
     * 保留扩展字段
     */
    public Builder options(Map<String, String> options) {
      Internal.checkElementsNotNull(options);
      this.options = options;
      return this;
    }

    /**
     * 广告过期时间 单位为秒
     */
    public Builder expired_time(Integer expired_time) {
      this.expired_time = expired_time;
      return this;
    }

    /**
     * 禁止解析落地页
     */
    public Builder forbiden_parse_landingpage(Boolean forbiden_parse_landingpage) {
      this.forbiden_parse_landingpage = forbiden_parse_landingpage;
      return this;
    }

    /**
     * 广告播放方向：0 自动 默认， 1.竖屏，2.横屏，3. 横竖屏
     */
    public Builder display_orientation(Integer display_orientation) {
      this.display_orientation = display_orientation;
      return this;
    }

    /**
     * 广告设置；sdk 3.4.0版本开始为独立广告设置；
     */
    public Builder ad_setting(AdSetting ad_setting) {
      this.ad_setting = ad_setting;
      return this;
    }

    /**
     * 投放平台的竞价类型: 1 cpm, 2 cpc, 3 cpa
     */
    public Builder bid_type(Integer bid_type) {
      this.bid_type = bid_type;
      return this;
    }

    /**
     * 广告的归因id
     */
    public Builder attribution_id(String attribution_id) {
      this.attribution_id = attribution_id;
      return this;
    }

    /**
     * 广告新监测链接宏
     */
    public Builder ad_track_macro(Map<String, String> ad_track_macro) {
      Internal.checkElementsNotNull(ad_track_macro);
      this.ad_track_macro = ad_track_macro;
      return this;
    }

    public Builder wx_program_res(WXProgramRes wx_program_res) {
      this.wx_program_res = wx_program_res;
      return this;
    }

    /**
     * c-s 返回的出价以及url
     */
    public Builder bidding_response(BiddingResponse bidding_response) {
      this.bidding_response = bidding_response;
      return this;
    }

    @Override
    public Ad build() {
      return new Ad(adslot_id, vid, cust_id, camp_id, crid, materials, ad_tracking, bid_price, product_id, settlement_price_enc, is_override, ad_source_logo, ad_source_channel, ad_type, options, expired_time, forbiden_parse_landingpage, display_orientation, ad_setting, bid_type, attribution_id, ad_track_macro, wx_program_res, bidding_response, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_Ad extends ProtoAdapter<Ad> {
    private final ProtoAdapter<Map<String, String>> options = ProtoAdapter.newMapAdapter(ProtoAdapter.STRING, ProtoAdapter.STRING);

    private final ProtoAdapter<Map<String, String>> ad_track_macro = ProtoAdapter.newMapAdapter(ProtoAdapter.STRING, ProtoAdapter.STRING);

    public ProtoAdapter_Ad() {
      super(FieldEncoding.LENGTH_DELIMITED, Ad.class);
    }

    @Override
    public int encodedSize(Ad value) {
      return ProtoAdapter.STRING.encodedSizeWithTag(1, value.adslot_id)
          + ProtoAdapter.STRING.encodedSizeWithTag(2, value.vid)
          + ProtoAdapter.STRING.encodedSizeWithTag(3, value.cust_id)
          + ProtoAdapter.STRING.encodedSizeWithTag(4, value.camp_id)
          + ProtoAdapter.STRING.encodedSizeWithTag(5, value.crid)
          + MaterialMeta.ADAPTER.asRepeated().encodedSizeWithTag(6, value.materials)
          + Tracking.ADAPTER.asRepeated().encodedSizeWithTag(7, value.ad_tracking)
          + ProtoAdapter.UINT32.encodedSizeWithTag(8, value.bid_price)
          + ProtoAdapter.STRING.encodedSizeWithTag(9, value.product_id)
          + ProtoAdapter.STRING.encodedSizeWithTag(10, value.settlement_price_enc)
          + ProtoAdapter.UINT32.encodedSizeWithTag(11, value.is_override)
          + ProtoAdapter.STRING.encodedSizeWithTag(12, value.ad_source_logo)
          + ProtoAdapter.STRING.encodedSizeWithTag(13, value.ad_source_channel)
          + ProtoAdapter.UINT32.encodedSizeWithTag(14, value.ad_type)
          + options.encodedSizeWithTag(15, value.options)
          + ProtoAdapter.UINT32.encodedSizeWithTag(16, value.expired_time)
          + ProtoAdapter.BOOL.encodedSizeWithTag(17, value.forbiden_parse_landingpage)
          + ProtoAdapter.UINT32.encodedSizeWithTag(18, value.display_orientation)
          + AdSetting.ADAPTER.encodedSizeWithTag(19, value.ad_setting)
          + ProtoAdapter.UINT32.encodedSizeWithTag(20, value.bid_type)
          + ProtoAdapter.STRING.encodedSizeWithTag(21, value.attribution_id)
          + ad_track_macro.encodedSizeWithTag(24, value.ad_track_macro)
          + WXProgramRes.ADAPTER.encodedSizeWithTag(27, value.wx_program_res)
          + BiddingResponse.ADAPTER.encodedSizeWithTag(29, value.bidding_response)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, Ad value) throws IOException {
      ProtoAdapter.STRING.encodeWithTag(writer, 1, value.adslot_id);
      ProtoAdapter.STRING.encodeWithTag(writer, 2, value.vid);
      ProtoAdapter.STRING.encodeWithTag(writer, 3, value.cust_id);
      ProtoAdapter.STRING.encodeWithTag(writer, 4, value.camp_id);
      ProtoAdapter.STRING.encodeWithTag(writer, 5, value.crid);
      MaterialMeta.ADAPTER.asRepeated().encodeWithTag(writer, 6, value.materials);
      Tracking.ADAPTER.asRepeated().encodeWithTag(writer, 7, value.ad_tracking);
      ProtoAdapter.UINT32.encodeWithTag(writer, 8, value.bid_price);
      ProtoAdapter.STRING.encodeWithTag(writer, 9, value.product_id);
      ProtoAdapter.STRING.encodeWithTag(writer, 10, value.settlement_price_enc);
      ProtoAdapter.UINT32.encodeWithTag(writer, 11, value.is_override);
      ProtoAdapter.STRING.encodeWithTag(writer, 12, value.ad_source_logo);
      ProtoAdapter.STRING.encodeWithTag(writer, 13, value.ad_source_channel);
      ProtoAdapter.UINT32.encodeWithTag(writer, 14, value.ad_type);
      options.encodeWithTag(writer, 15, value.options);
      ProtoAdapter.UINT32.encodeWithTag(writer, 16, value.expired_time);
      ProtoAdapter.BOOL.encodeWithTag(writer, 17, value.forbiden_parse_landingpage);
      ProtoAdapter.UINT32.encodeWithTag(writer, 18, value.display_orientation);
      AdSetting.ADAPTER.encodeWithTag(writer, 19, value.ad_setting);
      ProtoAdapter.UINT32.encodeWithTag(writer, 20, value.bid_type);
      ProtoAdapter.STRING.encodeWithTag(writer, 21, value.attribution_id);
      ad_track_macro.encodeWithTag(writer, 24, value.ad_track_macro);
      WXProgramRes.ADAPTER.encodeWithTag(writer, 27, value.wx_program_res);
      BiddingResponse.ADAPTER.encodeWithTag(writer, 29, value.bidding_response);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public Ad decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.adslot_id(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.vid(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.cust_id(ProtoAdapter.STRING.decode(reader)); break;
          case 4: builder.camp_id(ProtoAdapter.STRING.decode(reader)); break;
          case 5: builder.crid(ProtoAdapter.STRING.decode(reader)); break;
          case 6: builder.materials.add(MaterialMeta.ADAPTER.decode(reader)); break;
          case 7: builder.ad_tracking.add(Tracking.ADAPTER.decode(reader)); break;
          case 8: builder.bid_price(ProtoAdapter.UINT32.decode(reader)); break;
          case 9: builder.product_id(ProtoAdapter.STRING.decode(reader)); break;
          case 10: builder.settlement_price_enc(ProtoAdapter.STRING.decode(reader)); break;
          case 11: builder.is_override(ProtoAdapter.UINT32.decode(reader)); break;
          case 12: builder.ad_source_logo(ProtoAdapter.STRING.decode(reader)); break;
          case 13: builder.ad_source_channel(ProtoAdapter.STRING.decode(reader)); break;
          case 14: builder.ad_type(ProtoAdapter.UINT32.decode(reader)); break;
          case 15: builder.options.putAll(options.decode(reader)); break;
          case 16: builder.expired_time(ProtoAdapter.UINT32.decode(reader)); break;
          case 17: builder.forbiden_parse_landingpage(ProtoAdapter.BOOL.decode(reader)); break;
          case 18: builder.display_orientation(ProtoAdapter.UINT32.decode(reader)); break;
          case 19: builder.ad_setting(AdSetting.ADAPTER.decode(reader)); break;
          case 20: builder.bid_type(ProtoAdapter.UINT32.decode(reader)); break;
          case 21: builder.attribution_id(ProtoAdapter.STRING.decode(reader)); break;
          case 24: builder.ad_track_macro.putAll(ad_track_macro.decode(reader)); break;
          case 27: builder.wx_program_res(WXProgramRes.ADAPTER.decode(reader)); break;
          case 29: builder.bidding_response(BiddingResponse.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public Ad redact(Ad value) {
      Builder builder = value.newBuilder();
      Internal.redactElements(builder.materials, MaterialMeta.ADAPTER);
      Internal.redactElements(builder.ad_tracking, Tracking.ADAPTER);
      if (builder.ad_setting != null) builder.ad_setting = AdSetting.ADAPTER.redact(builder.ad_setting);
      if (builder.wx_program_res != null) builder.wx_program_res = WXProgramRes.ADAPTER.redact(builder.wx_program_res);
      if (builder.bidding_response != null) builder.bidding_response = BiddingResponse.ADAPTER.redact(builder.bidding_response);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
