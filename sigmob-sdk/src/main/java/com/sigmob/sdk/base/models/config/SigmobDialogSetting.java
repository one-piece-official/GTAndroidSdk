// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: sigmob_ssp_config.proto
package com.sigmob.sdk.base.models.config;

import android.os.Parcelable;

import com.czhj.wire.AndroidMessage;
import com.czhj.wire.FieldEncoding;
import com.czhj.wire.Message;
import com.czhj.wire.ProtoAdapter;
import com.czhj.wire.ProtoReader;
import com.czhj.wire.ProtoWriter;
import com.czhj.wire.WireField;
import com.czhj.wire.internal.Internal;
import com.czhj.wire.okio.ByteString;

import java.io.IOException;

public final class SigmobDialogSetting extends AndroidMessage<SigmobDialogSetting, SigmobDialogSetting.Builder> {
    public static final ProtoAdapter<SigmobDialogSetting> ADAPTER = new ProtoAdapter_SigmobDialogSetting();

    public static final Parcelable.Creator<SigmobDialogSetting> CREATOR = AndroidMessage.newCreator(ADAPTER);

    private static final long serialVersionUID = 0L;

    public static final String DEFAULT_TITLE = "";

    public static final String DEFAULT_BODY_TEXT = "";

    public static final String DEFAULT_CANCEL_BUTTON_TEXT = "";

    public static final String DEFAULT_CLOSE_BUTTON_TEXT = "";

    /**
     * 标题
     */
    @WireField(
            tag = 1,
            adapter = "com.squareup.wire.ProtoAdapter#STRING"
    )
    public final String title;

    /**
     * 正文，针对激励视频，需要在文案中带宏,表示视频剩余播放的秒数
     */
    @WireField(
            tag = 2,
            adapter = "com.squareup.wire.ProtoAdapter#STRING"
    )
    public final String body_text;

    /**
     * 取消按钮的文案
     */
    @WireField(
            tag = 3,
            adapter = "com.squareup.wire.ProtoAdapter#STRING"
    )
    public final String cancel_button_text;

    /**
     * 关闭按钮的文案
     */
    @WireField(
            tag = 4,
            adapter = "com.squareup.wire.ProtoAdapter#STRING"
    )
    public final String close_button_text;

    public SigmobDialogSetting(String title, String body_text, String cancel_button_text,
                               String close_button_text) {
        this(title, body_text, cancel_button_text, close_button_text, ByteString.EMPTY);
    }

    public SigmobDialogSetting(String title, String body_text, String cancel_button_text,
                               String close_button_text, ByteString unknownFields) {
        super(ADAPTER, unknownFields);
        this.title = title;
        this.body_text = body_text;
        this.cancel_button_text = cancel_button_text;
        this.close_button_text = close_button_text;
    }

    @Override
    public Builder newBuilder() {
        Builder builder = new Builder();
        builder.title = title;
        builder.body_text = body_text;
        builder.cancel_button_text = cancel_button_text;
        builder.close_button_text = close_button_text;
        builder.addUnknownFields(unknownFields());
        return builder;
    }

    @Override
    public boolean equals(Object other) {
        if (other == this) return true;
        if (!(other instanceof SigmobDialogSetting)) return false;
        SigmobDialogSetting o = (SigmobDialogSetting) other;
        return unknownFields().equals(o.unknownFields())
                && Internal.equals(title, o.title)
                && Internal.equals(body_text, o.body_text)
                && Internal.equals(cancel_button_text, o.cancel_button_text)
                && Internal.equals(close_button_text, o.close_button_text);
    }

    @Override
    public int hashCode() {
        int result = super.hashCode;
        if (result == 0) {
            result = unknownFields().hashCode();
            result = result * 37 + (title != null ? title.hashCode() : 0);
            result = result * 37 + (body_text != null ? body_text.hashCode() : 0);
            result = result * 37 + (cancel_button_text != null ? cancel_button_text.hashCode() : 0);
            result = result * 37 + (close_button_text != null ? close_button_text.hashCode() : 0);
            super.hashCode = result;
        }
        return result;
    }

    @Override
    public String toString() {
        StringBuilder builder = new StringBuilder();
        if (title != null) builder.append(", title=").append(title);
        if (body_text != null) builder.append(", body_text=").append(body_text);
        if (cancel_button_text != null)
            builder.append(", cancel_button_text=").append(cancel_button_text);
        if (close_button_text != null)
            builder.append(", close_button_text=").append(close_button_text);
        return builder.replace(0, 2, "SigmobDialogSetting{").append('}').toString();
    }

    public static final class Builder extends Message.Builder<SigmobDialogSetting, Builder> {
        public String title;

        public String body_text;

        public String cancel_button_text;

        public String close_button_text;

        public Builder() {
        }

        /**
         * 标题
         */
        public Builder title(String title) {
            this.title = title;
            return this;
        }

        /**
         * 正文，针对激励视频，需要在文案中带宏,表示视频剩余播放的秒数
         */
        public Builder body_text(String body_text) {
            this.body_text = body_text;
            return this;
        }

        /**
         * 取消按钮的文案
         */
        public Builder cancel_button_text(String cancel_button_text) {
            this.cancel_button_text = cancel_button_text;
            return this;
        }

        /**
         * 关闭按钮的文案
         */
        public Builder close_button_text(String close_button_text) {
            this.close_button_text = close_button_text;
            return this;
        }

        @Override
        public SigmobDialogSetting build() {
            return new SigmobDialogSetting(title, body_text, cancel_button_text, close_button_text, super.buildUnknownFields());
        }
    }

    private static final class ProtoAdapter_SigmobDialogSetting extends ProtoAdapter<SigmobDialogSetting> {
        public ProtoAdapter_SigmobDialogSetting() {
            super(FieldEncoding.LENGTH_DELIMITED, SigmobDialogSetting.class);
        }

        @Override
        public int encodedSize(SigmobDialogSetting value) {
            return ProtoAdapter.STRING.encodedSizeWithTag(1, value.title)
                    + ProtoAdapter.STRING.encodedSizeWithTag(2, value.body_text)
                    + ProtoAdapter.STRING.encodedSizeWithTag(3, value.cancel_button_text)
                    + ProtoAdapter.STRING.encodedSizeWithTag(4, value.close_button_text)
                    + value.unknownFields().size();
        }

        @Override
        public void encode(ProtoWriter writer, SigmobDialogSetting value) throws IOException {
            ProtoAdapter.STRING.encodeWithTag(writer, 1, value.title);
            ProtoAdapter.STRING.encodeWithTag(writer, 2, value.body_text);
            ProtoAdapter.STRING.encodeWithTag(writer, 3, value.cancel_button_text);
            ProtoAdapter.STRING.encodeWithTag(writer, 4, value.close_button_text);
            writer.writeBytes(value.unknownFields());
        }

        @Override
        public SigmobDialogSetting decode(ProtoReader reader) throws IOException {
            Builder builder = new Builder();
            long token = reader.beginMessage();
            for (int tag; (tag = reader.nextTag()) != -1; ) {
                switch (tag) {
                    case 1:
                        builder.title(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 2:
                        builder.body_text(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 3:
                        builder.cancel_button_text(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 4:
                        builder.close_button_text(ProtoAdapter.STRING.decode(reader));
                        break;
                    default: {
                        FieldEncoding fieldEncoding = reader.peekFieldEncoding();
                        Object value = fieldEncoding.rawProtoAdapter().decode(reader);
                        builder.addUnknownField(tag, fieldEncoding, value);
                    }
                }
            }
            reader.endMessage(token);
            return builder.build();
        }

        @Override
        public SigmobDialogSetting redact(SigmobDialogSetting value) {
            Builder builder = value.newBuilder();
            builder.clearUnknownFields();
            return builder.build();
        }
    }
}
