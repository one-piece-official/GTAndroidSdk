// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: sigmob_ssp_response.proto
package com.sigmob.sdk.base.models.rtb;

import android.os.Parcelable;

import com.czhj.wire.AndroidMessage;
import com.czhj.wire.FieldEncoding;
import com.czhj.wire.Message;
import com.czhj.wire.ProtoAdapter;
import com.czhj.wire.ProtoReader;
import com.czhj.wire.ProtoWriter;
import com.czhj.wire.WireField;
import com.czhj.wire.internal.Internal;
import com.czhj.wire.okio.ByteString;

import java.io.IOException;
import java.util.List;

public final class AdSetting extends AndroidMessage<AdSetting, AdSetting.Builder> {
    public static final ProtoAdapter<AdSetting> ADAPTER = new ProtoAdapter_AdSetting();

    public static final Parcelable.Creator<AdSetting> CREATOR = AndroidMessage.newCreator(ADAPTER);

    private static final long serialVersionUID = 0L;

    public static final Integer DEFAULT_RETRY_COUNT = 0;

    public static final Boolean DEFAULT_IN_APP = false;

    public static final Boolean DEFAULT_DISABLE_DOWNLOAD_LISTENER = false;

    public static final Integer DEFAULT_SENSITIVITY = 0;

    /**
     * 激励视频相关广告设置
     */
    @WireField(
            tag = 1,
            adapter = "com.sigmob.sdk.base.models.rtb.RvAdSetting#ADAPTER"
    )
    public final RvAdSetting rv_setting;

    /**
     * 开屏广告相关配置
     */
    @WireField(
            tag = 2,
            adapter = "com.sigmob.sdk.base.models.rtb.SplashAdSetting#ADAPTER"
    )
    public final SplashAdSetting splash_setting;

    /**
     * 重试次数（0:不重试）
     */
    @WireField(
            tag = 3,
            adapter = "com.squareup.wire.ProtoAdapter#INT32"
    )
    public final Integer retry_count;

    /**
     * 原生广告相关设置
     */
    @WireField(
            tag = 4,
            adapter = "com.sigmob.sdk.base.models.rtb.SingleNativeAdSetting#ADAPTER"
    )
    public final SingleNativeAdSetting single_native_setting;

    /**
     * 是否在应用内打开landing_page
     */
    @WireField(
            tag = 5,
            adapter = "com.squareup.wire.ProtoAdapter#BOOL"
    )
    public final Boolean in_app;

    /**
     * 是否禁止webView下载监听，当开关开启时，webView的下载和安装监听全部取消。
     */
    @WireField(
            tag = 7,
            adapter = "com.squareup.wire.ProtoAdapter#BOOL"
    )
    public final Boolean disable_download_listener;

    /**
     * 允许模版跳转的白名单（各app的协议头），*表示通配符
     */
    @WireField(
            tag = 8,
            adapter = "com.squareup.wire.ProtoAdapter#STRING",
            label = WireField.Label.REPEATED
    )
    public final List<String> scheme_white_list;

    /**
     * 互动灵敏度，1-低，2-中，3-高
     */
    @WireField(
            tag = 9,
            adapter = "com.squareup.wire.ProtoAdapter#UINT32"
    )
    public final Integer sensitivity;

    public AdSetting(RvAdSetting rv_setting, SplashAdSetting splash_setting, Integer retry_count,
                     SingleNativeAdSetting single_native_setting, Boolean in_app,
                     Boolean disable_download_listener, List<String> scheme_white_list, Integer sensitivity) {
        this(rv_setting, splash_setting, retry_count, single_native_setting, in_app, disable_download_listener, scheme_white_list, sensitivity, ByteString.EMPTY);
    }

    public AdSetting(RvAdSetting rv_setting, SplashAdSetting splash_setting, Integer retry_count,
                     SingleNativeAdSetting single_native_setting, Boolean in_app,
                     Boolean disable_download_listener, List<String> scheme_white_list, Integer sensitivity,
                     ByteString unknownFields) {
        super(ADAPTER, unknownFields);
        this.rv_setting = rv_setting;
        this.splash_setting = splash_setting;
        this.retry_count = retry_count;
        this.single_native_setting = single_native_setting;
        this.in_app = in_app;
        this.disable_download_listener = disable_download_listener;
        this.scheme_white_list = Internal.immutableCopyOf("scheme_white_list", scheme_white_list);
        this.sensitivity = sensitivity;
    }

    @Override
    public Builder newBuilder() {
        Builder builder = new Builder();
        builder.rv_setting = rv_setting;
        builder.splash_setting = splash_setting;
        builder.retry_count = retry_count;
        builder.single_native_setting = single_native_setting;
        builder.in_app = in_app;
        builder.disable_download_listener = disable_download_listener;
        builder.scheme_white_list = Internal.copyOf("scheme_white_list", scheme_white_list);
        builder.sensitivity = sensitivity;
        builder.addUnknownFields(unknownFields());
        return builder;
    }

    @Override
    public boolean equals(Object other) {
        if (other == this) return true;
        if (!(other instanceof AdSetting)) return false;
        AdSetting o = (AdSetting) other;
        return unknownFields().equals(o.unknownFields())
                && Internal.equals(rv_setting, o.rv_setting)
                && Internal.equals(splash_setting, o.splash_setting)
                && Internal.equals(retry_count, o.retry_count)
                && Internal.equals(single_native_setting, o.single_native_setting)
                && Internal.equals(in_app, o.in_app)
                && Internal.equals(disable_download_listener, o.disable_download_listener)
                && scheme_white_list.equals(o.scheme_white_list)
                && Internal.equals(sensitivity, o.sensitivity);
    }

    @Override
    public int hashCode() {
        int result = super.hashCode;
        if (result == 0) {
            result = unknownFields().hashCode();
            result = result * 37 + (rv_setting != null ? rv_setting.hashCode() : 0);
            result = result * 37 + (splash_setting != null ? splash_setting.hashCode() : 0);
            result = result * 37 + (retry_count != null ? retry_count.hashCode() : 0);
            result = result * 37 + (single_native_setting != null ? single_native_setting.hashCode() : 0);
            result = result * 37 + (in_app != null ? in_app.hashCode() : 0);
            result = result * 37 + (disable_download_listener != null ? disable_download_listener.hashCode() : 0);
            result = result * 37 + scheme_white_list.hashCode();
            result = result * 37 + (sensitivity != null ? sensitivity.hashCode() : 0);
            super.hashCode = result;
        }
        return result;
    }

    @Override
    public String toString() {
        StringBuilder builder = new StringBuilder();
        if (rv_setting != null) builder.append(", rv_setting=").append(rv_setting);
        if (splash_setting != null) builder.append(", splash_setting=").append(splash_setting);
        if (retry_count != null) builder.append(", retry_count=").append(retry_count);
        if (single_native_setting != null)
            builder.append(", single_native_setting=").append(single_native_setting);
        if (in_app != null) builder.append(", in_app=").append(in_app);
        if (disable_download_listener != null)
            builder.append(", disable_download_listener=").append(disable_download_listener);
        if (!scheme_white_list.isEmpty())
            builder.append(", scheme_white_list=").append(scheme_white_list);
        if (sensitivity != null) builder.append(", sensitivity=").append(sensitivity);
        return builder.replace(0, 2, "AdSetting{").append('}').toString();
    }

    public static final class Builder extends Message.Builder<AdSetting, Builder> {
        public RvAdSetting rv_setting;

        public SplashAdSetting splash_setting;

        public Integer retry_count = DEFAULT_RETRY_COUNT;

        public SingleNativeAdSetting single_native_setting;

        public Boolean in_app = DEFAULT_IN_APP;

        public Boolean disable_download_listener = DEFAULT_DISABLE_DOWNLOAD_LISTENER;

        public List<String> scheme_white_list;

        public Integer sensitivity = DEFAULT_SENSITIVITY;

        public Builder() {
            scheme_white_list = Internal.newMutableList();
        }

        /**
         * 激励视频相关广告设置
         */
        public Builder rv_setting(RvAdSetting rv_setting) {
            this.rv_setting = rv_setting;
            return this;
        }

        /**
         * 开屏广告相关配置
         */
        public Builder splash_setting(SplashAdSetting splash_setting) {
            this.splash_setting = splash_setting;
            return this;
        }

        /**
         * 重试次数（0:不重试）
         */
        public Builder retry_count(Integer retry_count) {
            this.retry_count = retry_count;
            return this;
        }

        /**
         * 原生广告相关设置
         */
        public Builder single_native_setting(SingleNativeAdSetting single_native_setting) {
            this.single_native_setting = single_native_setting;
            return this;
        }

        /**
         * 是否在应用内打开landing_page
         */
        public Builder in_app(Boolean in_app) {
            this.in_app = in_app;
            return this;
        }

        /**
         * 是否禁止webView下载监听，当开关开启时，webView的下载和安装监听全部取消。
         */
        public Builder disable_download_listener(Boolean disable_download_listener) {
            this.disable_download_listener = disable_download_listener;
            return this;
        }

        /**
         * 允许模版跳转的白名单（各app的协议头），*表示通配符
         */
        public Builder scheme_white_list(List<String> scheme_white_list) {
            Internal.checkElementsNotNull(scheme_white_list);
            this.scheme_white_list = scheme_white_list;
            return this;
        }

        /**
         * 互动灵敏度，1-低，2-中，3-高
         */
        public Builder sensitivity(Integer sensitivity) {
            this.sensitivity = sensitivity;
            return this;
        }

        @Override
        public AdSetting build() {
            return new AdSetting(rv_setting, splash_setting, retry_count, single_native_setting, in_app, disable_download_listener, scheme_white_list, sensitivity, super.buildUnknownFields());
        }
    }

    private static final class ProtoAdapter_AdSetting extends ProtoAdapter<AdSetting> {
        public ProtoAdapter_AdSetting() {
            super(FieldEncoding.LENGTH_DELIMITED, AdSetting.class);
        }

        @Override
        public int encodedSize(AdSetting value) {
            return RvAdSetting.ADAPTER.encodedSizeWithTag(1, value.rv_setting)
                    + SplashAdSetting.ADAPTER.encodedSizeWithTag(2, value.splash_setting)
                    + ProtoAdapter.INT32.encodedSizeWithTag(3, value.retry_count)
                    + SingleNativeAdSetting.ADAPTER.encodedSizeWithTag(4, value.single_native_setting)
                    + ProtoAdapter.BOOL.encodedSizeWithTag(5, value.in_app)
                    + ProtoAdapter.BOOL.encodedSizeWithTag(7, value.disable_download_listener)
                    + ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(8, value.scheme_white_list)
                    + ProtoAdapter.UINT32.encodedSizeWithTag(9, value.sensitivity)
                    + value.unknownFields().size();
        }

        @Override
        public void encode(ProtoWriter writer, AdSetting value) throws IOException {
            RvAdSetting.ADAPTER.encodeWithTag(writer, 1, value.rv_setting);
            SplashAdSetting.ADAPTER.encodeWithTag(writer, 2, value.splash_setting);
            ProtoAdapter.INT32.encodeWithTag(writer, 3, value.retry_count);
            SingleNativeAdSetting.ADAPTER.encodeWithTag(writer, 4, value.single_native_setting);
            ProtoAdapter.BOOL.encodeWithTag(writer, 5, value.in_app);
            ProtoAdapter.BOOL.encodeWithTag(writer, 7, value.disable_download_listener);
            ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 8, value.scheme_white_list);
            ProtoAdapter.UINT32.encodeWithTag(writer, 9, value.sensitivity);
            writer.writeBytes(value.unknownFields());
        }

        @Override
        public AdSetting decode(ProtoReader reader) throws IOException {
            Builder builder = new Builder();
            long token = reader.beginMessage();
            for (int tag; (tag = reader.nextTag()) != -1; ) {
                switch (tag) {
                    case 1:
                        builder.rv_setting(RvAdSetting.ADAPTER.decode(reader));
                        break;
                    case 2:
                        builder.splash_setting(SplashAdSetting.ADAPTER.decode(reader));
                        break;
                    case 3:
                        builder.retry_count(ProtoAdapter.INT32.decode(reader));
                        break;
                    case 4:
                        builder.single_native_setting(SingleNativeAdSetting.ADAPTER.decode(reader));
                        break;
                    case 5:
                        builder.in_app(ProtoAdapter.BOOL.decode(reader));
                        break;
                    case 7:
                        builder.disable_download_listener(ProtoAdapter.BOOL.decode(reader));
                        break;
                    case 8:
                        builder.scheme_white_list.add(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 9:
                        builder.sensitivity(ProtoAdapter.UINT32.decode(reader));
                        break;
                    default: {
                        FieldEncoding fieldEncoding = reader.peekFieldEncoding();
                        Object value = fieldEncoding.rawProtoAdapter().decode(reader);
                        builder.addUnknownField(tag, fieldEncoding, value);
                    }
                }
            }
            reader.endMessage(token);
            return builder.build();
        }

        @Override
        public AdSetting redact(AdSetting value) {
            Builder builder = value.newBuilder();
            if (builder.rv_setting != null)
                builder.rv_setting = RvAdSetting.ADAPTER.redact(builder.rv_setting);
            if (builder.splash_setting != null)
                builder.splash_setting = SplashAdSetting.ADAPTER.redact(builder.splash_setting);
            if (builder.single_native_setting != null)
                builder.single_native_setting = SingleNativeAdSetting.ADAPTER.redact(builder.single_native_setting);
            builder.clearUnknownFields();
            return builder.build();
        }
    }
}
