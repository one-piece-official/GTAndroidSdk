// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: sigmob_ssp_response.proto
package com.sigmob.sdk.base.models.rtb;

import android.os.Parcelable;

import com.czhj.wire.AndroidMessage;
import com.czhj.wire.FieldEncoding;
import com.czhj.wire.Message;
import com.czhj.wire.ProtoAdapter;
import com.czhj.wire.ProtoReader;
import com.czhj.wire.ProtoWriter;
import com.czhj.wire.WireField;
import com.czhj.wire.internal.Internal;
import com.czhj.wire.okio.ByteString;

import java.io.IOException;

public final class Color extends AndroidMessage<Color, Color.Builder> {
    public static final ProtoAdapter<Color> ADAPTER = new ProtoAdapter_Color();

    public static final Parcelable.Creator<Color> CREATOR = AndroidMessage.newCreator(ADAPTER);

    private static final long serialVersionUID = 0L;

    public static final Integer DEFAULT_RED = 0;

    public static final Integer DEFAULT_GREEN = 0;

    public static final Integer DEFAULT_BLUE = 0;

    public static final Float DEFAULT_ALPHA = 0.0f;

    /**
     * 红色值，整数 0-255
     */
    @WireField(
            tag = 1,
            adapter = "com.squareup.wire.ProtoAdapter#UINT32"
    )
    public final Integer red;

    /**
     * 绿色值，整数 0-255
     */
    @WireField(
            tag = 2,
            adapter = "com.squareup.wire.ProtoAdapter#UINT32"
    )
    public final Integer green;

    /**
     * 蓝色值，整数 0-255
     */
    @WireField(
            tag = 3,
            adapter = "com.squareup.wire.ProtoAdapter#UINT32"
    )
    public final Integer blue;

    /**
     * 透明度，小数 0.0-1.0
     */
    @WireField(
            tag = 4,
            adapter = "com.squareup.wire.ProtoAdapter#FLOAT"
    )
    public final Float alpha;

    public Color(Integer red, Integer green, Integer blue, Float alpha) {
        this(red, green, blue, alpha, ByteString.EMPTY);
    }

    public Color(Integer red, Integer green, Integer blue, Float alpha, ByteString unknownFields) {
        super(ADAPTER, unknownFields);
        this.red = red;
        this.green = green;
        this.blue = blue;
        this.alpha = alpha;
    }

    @Override
    public Builder newBuilder() {
        Builder builder = new Builder();
        builder.red = red;
        builder.green = green;
        builder.blue = blue;
        builder.alpha = alpha;
        builder.addUnknownFields(unknownFields());
        return builder;
    }

    @Override
    public boolean equals(Object other) {
        if (other == this) return true;
        if (!(other instanceof Color)) return false;
        Color o = (Color) other;
        return unknownFields().equals(o.unknownFields())
                && Internal.equals(red, o.red)
                && Internal.equals(green, o.green)
                && Internal.equals(blue, o.blue)
                && Internal.equals(alpha, o.alpha);
    }

    @Override
    public int hashCode() {
        int result = super.hashCode;
        if (result == 0) {
            result = unknownFields().hashCode();
            result = result * 37 + (red != null ? red.hashCode() : 0);
            result = result * 37 + (green != null ? green.hashCode() : 0);
            result = result * 37 + (blue != null ? blue.hashCode() : 0);
            result = result * 37 + (alpha != null ? alpha.hashCode() : 0);
            super.hashCode = result;
        }
        return result;
    }

    @Override
    public String toString() {
        StringBuilder builder = new StringBuilder();
        if (red != null) builder.append(", red=").append(red);
        if (green != null) builder.append(", green=").append(green);
        if (blue != null) builder.append(", blue=").append(blue);
        if (alpha != null) builder.append(", alpha=").append(alpha);
        return builder.replace(0, 2, "Color{").append('}').toString();
    }

    public static final class Builder extends Message.Builder<Color, Builder> {
        public Integer red = DEFAULT_RED;

        public Integer green = DEFAULT_GREEN;

        public Integer blue = DEFAULT_BLUE;

        public Float alpha = DEFAULT_ALPHA;

        public Builder() {
        }

        /**
         * 红色值，整数 0-255
         */
        public Builder red(Integer red) {
            this.red = red;
            return this;
        }

        /**
         * 绿色值，整数 0-255
         */
        public Builder green(Integer green) {
            this.green = green;
            return this;
        }

        /**
         * 蓝色值，整数 0-255
         */
        public Builder blue(Integer blue) {
            this.blue = blue;
            return this;
        }

        /**
         * 透明度，小数 0.0-1.0
         */
        public Builder alpha(Float alpha) {
            this.alpha = alpha;
            return this;
        }

        @Override
        public Color build() {
            return new Color(red, green, blue, alpha, super.buildUnknownFields());
        }
    }

    private static final class ProtoAdapter_Color extends ProtoAdapter<Color> {
        public ProtoAdapter_Color() {
            super(FieldEncoding.LENGTH_DELIMITED, Color.class);
        }

        @Override
        public int encodedSize(Color value) {
            return ProtoAdapter.UINT32.encodedSizeWithTag(1, value.red)
                    + ProtoAdapter.UINT32.encodedSizeWithTag(2, value.green)
                    + ProtoAdapter.UINT32.encodedSizeWithTag(3, value.blue)
                    + ProtoAdapter.FLOAT.encodedSizeWithTag(4, value.alpha)
                    + value.unknownFields().size();
        }

        @Override
        public void encode(ProtoWriter writer, Color value) throws IOException {
            ProtoAdapter.UINT32.encodeWithTag(writer, 1, value.red);
            ProtoAdapter.UINT32.encodeWithTag(writer, 2, value.green);
            ProtoAdapter.UINT32.encodeWithTag(writer, 3, value.blue);
            ProtoAdapter.FLOAT.encodeWithTag(writer, 4, value.alpha);
            writer.writeBytes(value.unknownFields());
        }

        @Override
        public Color decode(ProtoReader reader) throws IOException {
            Builder builder = new Builder();
            long token = reader.beginMessage();
            for (int tag; (tag = reader.nextTag()) != -1; ) {
                switch (tag) {
                    case 1:
                        builder.red(ProtoAdapter.UINT32.decode(reader));
                        break;
                    case 2:
                        builder.green(ProtoAdapter.UINT32.decode(reader));
                        break;
                    case 3:
                        builder.blue(ProtoAdapter.UINT32.decode(reader));
                        break;
                    case 4:
                        builder.alpha(ProtoAdapter.FLOAT.decode(reader));
                        break;
                    default: {
                        FieldEncoding fieldEncoding = reader.peekFieldEncoding();
                        Object value = fieldEncoding.rawProtoAdapter().decode(reader);
                        builder.addUnknownField(tag, fieldEncoding, value);
                    }
                }
            }
            reader.endMessage(token);
            return builder.build();
        }

        @Override
        public Color redact(Color value) {
            Builder builder = value.newBuilder();
            builder.clearUnknownFields();
            return builder.build();
        }
    }
}
