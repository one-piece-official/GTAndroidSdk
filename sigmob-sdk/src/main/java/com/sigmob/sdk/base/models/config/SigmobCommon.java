// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: sigmob_ssp_config.proto
package com.sigmob.sdk.base.models.config;

import android.os.Parcelable;

import com.czhj.wire.AndroidMessage;
import com.czhj.wire.FieldEncoding;
import com.czhj.wire.Message;
import com.czhj.wire.ProtoAdapter;
import com.czhj.wire.ProtoReader;
import com.czhj.wire.ProtoWriter;
import com.czhj.wire.WireField;
import com.czhj.wire.internal.Internal;
import com.czhj.wire.okio.ByteString;

import java.io.IOException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;

public final class SigmobCommon extends AndroidMessage<SigmobCommon, SigmobCommon.Builder> {
  public static final ProtoAdapter<SigmobCommon> ADAPTER = new ProtoAdapter_SigmobCommon();

  public static final Parcelable.Creator<SigmobCommon> CREATOR = AndroidMessage.newCreator(ADAPTER);

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_CONFIGREFRESH = 0;

  public static final Boolean DEFAULT_IS_GDPR_REGION = false;

  public static final Integer DEFAULT_TRACKING_EXPIRATION_TIME = 0;

  public static final Integer DEFAULT_TRACKING_RETRY_INTERVAL = 0;

  public static final Integer DEFAULT_MAX_SEND_LOG_RECORDS = 0;

  public static final Integer DEFAULT_SEND_LOG_INTERVAL = 0;

  public static final Boolean DEFAULT_ENABLE_DEBUG_LEVEL = false;

  public static final Integer DEFAULT_LOAD_INTERVAL = 0;

  public static final Boolean DEFAULT_DISABLE_UP_LOCATION = false;

  public static final Boolean DEFAULT_LOG_ENC = false;

  public static final Boolean DEFAULT_FEEDBACK_DEBUG = false;

  public static final Boolean DEFAULT_ENABLE_EXTRA_DCLOG = false;

  public static final Integer DEFAULT_NETWORK_TIMEOUT = 0;

  /**
   * api配置
   */
  @WireField(
      tag = 1,
      adapter = "com.sigmob.sdk.base.models.config.SigmobCommonEndpointsConfig#ADAPTER"
  )
  public final SigmobCommonEndpointsConfig endpoints;

  /**
   * 激励视频配置
   */
  @WireField(
      tag = 2,
      adapter = "com.sigmob.sdk.base.models.config.SigmobRvConfig#ADAPTER"
  )
  public final SigmobRvConfig rv_config;

  /**
   * 开屏配置
   */
  @WireField(
      tag = 3,
      adapter = "com.sigmob.sdk.base.models.config.SigmobSplashConfig#ADAPTER"
  )
  public final SigmobSplashConfig splash_config;

  /**
   * 信息流配置
   */
  @WireField(
      tag = 4,
      adapter = "com.sigmob.sdk.base.models.config.SigmobNativeConfig#ADAPTER"
  )
  public final SigmobNativeConfig native_config;

  /**
   * config刷新间隔
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer configRefresh;

  /**
   * 反作弊信息采集配置
   */
  @WireField(
      tag = 7,
      adapter = "com.sigmob.sdk.base.models.config.SigmobAntiFraudLogConfig#ADAPTER"
  )
  public final SigmobAntiFraudLogConfig anti_fraud_log;

  /**
   * 是否gdpr地区，默认是false
   */
  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean is_gdpr_region;

  /**
   * track事件过期时间，过期后不执行补发操作，单位秒
   */
  @WireField(
      tag = 9,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer tracking_expiration_time;

  /**
   * track上报失败的重发时间间隔
   */
  @WireField(
      tag = 10,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer tracking_retry_interval;

  /**
   * 每次上传打点日志的最大条数
   */
  @WireField(
      tag = 11,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer max_send_log_records;

  /**
   * 打点日志上报时间间隔（单位：秒）
   */
  @WireField(
      tag = 12,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer send_log_interval;

  /**
   * 点号位黑明单，默认会将100，101号点自动加入黑名单，如果下发了黑明单，以下发为准。
   */
  @WireField(
      tag = 13,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32",
      label = WireField.Label.REPEATED
  )
  public final List<Integer> dclog_blacklist;

  /**
   * 是否开启debug日志、初始化监测广告插件、监测结果打点和日志输出
   */
  @WireField(
      tag = 14,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean enable_debug_level;

  /**
   * 重复发起请求的间隔时间，在非ready的情况下，用来防止重复发起请求
   */
  @WireField(
      tag = 15,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer load_interval;

  /**
   * 是否禁止上传用户的位置信息。false: 不禁止上传；true: 禁止上传
   */
  @WireField(
      tag = 16,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean disable_up_location;

  /**
   * false: 不加密；true: 加密
   */
  @WireField(
      tag = 17,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean log_enc;

  /**
   * false: 不开启；true: 开启
   */
  @WireField(
      tag = 18,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean feedback_debug;

  /**
   * 开启额外的dclog，比如show_callback等回调打点上报。
   */
  @WireField(
      tag = 19,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean enable_extra_dclog;

  /**
   * 网络超时时间，单位秒
   */
  @WireField(
      tag = 20,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer network_timeout;

  public SigmobCommon(SigmobCommonEndpointsConfig endpoints, SigmobRvConfig rv_config,
      SigmobSplashConfig splash_config, SigmobNativeConfig native_config, Integer configRefresh,
      SigmobAntiFraudLogConfig anti_fraud_log, Boolean is_gdpr_region,
      Integer tracking_expiration_time, Integer tracking_retry_interval,
      Integer max_send_log_records, Integer send_log_interval, List<Integer> dclog_blacklist,
      Boolean enable_debug_level, Integer load_interval, Boolean disable_up_location,
      Boolean log_enc, Boolean feedback_debug, Boolean enable_extra_dclog,
      Integer network_timeout) {
    this(endpoints, rv_config, splash_config, native_config, configRefresh, anti_fraud_log, is_gdpr_region, tracking_expiration_time, tracking_retry_interval, max_send_log_records, send_log_interval, dclog_blacklist, enable_debug_level, load_interval, disable_up_location, log_enc, feedback_debug, enable_extra_dclog, network_timeout, ByteString.EMPTY);
  }

  public SigmobCommon(SigmobCommonEndpointsConfig endpoints, SigmobRvConfig rv_config,
      SigmobSplashConfig splash_config, SigmobNativeConfig native_config, Integer configRefresh,
      SigmobAntiFraudLogConfig anti_fraud_log, Boolean is_gdpr_region,
      Integer tracking_expiration_time, Integer tracking_retry_interval,
      Integer max_send_log_records, Integer send_log_interval, List<Integer> dclog_blacklist,
      Boolean enable_debug_level, Integer load_interval, Boolean disable_up_location,
      Boolean log_enc, Boolean feedback_debug, Boolean enable_extra_dclog, Integer network_timeout,
      ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.endpoints = endpoints;
    this.rv_config = rv_config;
    this.splash_config = splash_config;
    this.native_config = native_config;
    this.configRefresh = configRefresh;
    this.anti_fraud_log = anti_fraud_log;
    this.is_gdpr_region = is_gdpr_region;
    this.tracking_expiration_time = tracking_expiration_time;
    this.tracking_retry_interval = tracking_retry_interval;
    this.max_send_log_records = max_send_log_records;
    this.send_log_interval = send_log_interval;
    this.dclog_blacklist = Internal.immutableCopyOf("dclog_blacklist", dclog_blacklist);
    this.enable_debug_level = enable_debug_level;
    this.load_interval = load_interval;
    this.disable_up_location = disable_up_location;
    this.log_enc = log_enc;
    this.feedback_debug = feedback_debug;
    this.enable_extra_dclog = enable_extra_dclog;
    this.network_timeout = network_timeout;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.endpoints = endpoints;
    builder.rv_config = rv_config;
    builder.splash_config = splash_config;
    builder.native_config = native_config;
    builder.configRefresh = configRefresh;
    builder.anti_fraud_log = anti_fraud_log;
    builder.is_gdpr_region = is_gdpr_region;
    builder.tracking_expiration_time = tracking_expiration_time;
    builder.tracking_retry_interval = tracking_retry_interval;
    builder.max_send_log_records = max_send_log_records;
    builder.send_log_interval = send_log_interval;
    builder.dclog_blacklist = Internal.copyOf("dclog_blacklist", dclog_blacklist);
    builder.enable_debug_level = enable_debug_level;
    builder.load_interval = load_interval;
    builder.disable_up_location = disable_up_location;
    builder.log_enc = log_enc;
    builder.feedback_debug = feedback_debug;
    builder.enable_extra_dclog = enable_extra_dclog;
    builder.network_timeout = network_timeout;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof SigmobCommon)) return false;
    SigmobCommon o = (SigmobCommon) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(endpoints, o.endpoints)
        && Internal.equals(rv_config, o.rv_config)
        && Internal.equals(splash_config, o.splash_config)
        && Internal.equals(native_config, o.native_config)
        && Internal.equals(configRefresh, o.configRefresh)
        && Internal.equals(anti_fraud_log, o.anti_fraud_log)
        && Internal.equals(is_gdpr_region, o.is_gdpr_region)
        && Internal.equals(tracking_expiration_time, o.tracking_expiration_time)
        && Internal.equals(tracking_retry_interval, o.tracking_retry_interval)
        && Internal.equals(max_send_log_records, o.max_send_log_records)
        && Internal.equals(send_log_interval, o.send_log_interval)
        && dclog_blacklist.equals(o.dclog_blacklist)
        && Internal.equals(enable_debug_level, o.enable_debug_level)
        && Internal.equals(load_interval, o.load_interval)
        && Internal.equals(disable_up_location, o.disable_up_location)
        && Internal.equals(log_enc, o.log_enc)
        && Internal.equals(feedback_debug, o.feedback_debug)
        && Internal.equals(enable_extra_dclog, o.enable_extra_dclog)
        && Internal.equals(network_timeout, o.network_timeout);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (endpoints != null ? endpoints.hashCode() : 0);
      result = result * 37 + (rv_config != null ? rv_config.hashCode() : 0);
      result = result * 37 + (splash_config != null ? splash_config.hashCode() : 0);
      result = result * 37 + (native_config != null ? native_config.hashCode() : 0);
      result = result * 37 + (configRefresh != null ? configRefresh.hashCode() : 0);
      result = result * 37 + (anti_fraud_log != null ? anti_fraud_log.hashCode() : 0);
      result = result * 37 + (is_gdpr_region != null ? is_gdpr_region.hashCode() : 0);
      result = result * 37 + (tracking_expiration_time != null ? tracking_expiration_time.hashCode() : 0);
      result = result * 37 + (tracking_retry_interval != null ? tracking_retry_interval.hashCode() : 0);
      result = result * 37 + (max_send_log_records != null ? max_send_log_records.hashCode() : 0);
      result = result * 37 + (send_log_interval != null ? send_log_interval.hashCode() : 0);
      result = result * 37 + dclog_blacklist.hashCode();
      result = result * 37 + (enable_debug_level != null ? enable_debug_level.hashCode() : 0);
      result = result * 37 + (load_interval != null ? load_interval.hashCode() : 0);
      result = result * 37 + (disable_up_location != null ? disable_up_location.hashCode() : 0);
      result = result * 37 + (log_enc != null ? log_enc.hashCode() : 0);
      result = result * 37 + (feedback_debug != null ? feedback_debug.hashCode() : 0);
      result = result * 37 + (enable_extra_dclog != null ? enable_extra_dclog.hashCode() : 0);
      result = result * 37 + (network_timeout != null ? network_timeout.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (endpoints != null) builder.append(", endpoints=").append(endpoints);
    if (rv_config != null) builder.append(", rv_config=").append(rv_config);
    if (splash_config != null) builder.append(", splash_config=").append(splash_config);
    if (native_config != null) builder.append(", native_config=").append(native_config);
    if (configRefresh != null) builder.append(", configRefresh=").append(configRefresh);
    if (anti_fraud_log != null) builder.append(", anti_fraud_log=").append(anti_fraud_log);
    if (is_gdpr_region != null) builder.append(", is_gdpr_region=").append(is_gdpr_region);
    if (tracking_expiration_time != null) builder.append(", tracking_expiration_time=").append(tracking_expiration_time);
    if (tracking_retry_interval != null) builder.append(", tracking_retry_interval=").append(tracking_retry_interval);
    if (max_send_log_records != null) builder.append(", max_send_log_records=").append(max_send_log_records);
    if (send_log_interval != null) builder.append(", send_log_interval=").append(send_log_interval);
    if (!dclog_blacklist.isEmpty()) builder.append(", dclog_blacklist=").append(dclog_blacklist);
    if (enable_debug_level != null) builder.append(", enable_debug_level=").append(enable_debug_level);
    if (load_interval != null) builder.append(", load_interval=").append(load_interval);
    if (disable_up_location != null) builder.append(", disable_up_location=").append(disable_up_location);
    if (log_enc != null) builder.append(", log_enc=").append(log_enc);
    if (feedback_debug != null) builder.append(", feedback_debug=").append(feedback_debug);
    if (enable_extra_dclog != null) builder.append(", enable_extra_dclog=").append(enable_extra_dclog);
    if (network_timeout != null) builder.append(", network_timeout=").append(network_timeout);
    return builder.replace(0, 2, "SigmobCommon{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<SigmobCommon, Builder> {
    public SigmobCommonEndpointsConfig endpoints;

    public SigmobRvConfig rv_config;

    public SigmobSplashConfig splash_config;

    public SigmobNativeConfig native_config;

    public Integer configRefresh;

    public SigmobAntiFraudLogConfig anti_fraud_log;

    public Boolean is_gdpr_region;

    public Integer tracking_expiration_time;

    public Integer tracking_retry_interval;

    public Integer max_send_log_records;

    public Integer send_log_interval;

    public List<Integer> dclog_blacklist;

    public Boolean enable_debug_level;

    public Integer load_interval;

    public Boolean disable_up_location;

    public Boolean log_enc;

    public Boolean feedback_debug;

    public Boolean enable_extra_dclog;

    public Integer network_timeout;

    public Builder() {
      dclog_blacklist = Internal.newMutableList();
    }

    /**
     * api配置
     */
    public Builder endpoints(SigmobCommonEndpointsConfig endpoints) {
      this.endpoints = endpoints;
      return this;
    }

    /**
     * 激励视频配置
     */
    public Builder rv_config(SigmobRvConfig rv_config) {
      this.rv_config = rv_config;
      return this;
    }

    /**
     * 开屏配置
     */
    public Builder splash_config(SigmobSplashConfig splash_config) {
      this.splash_config = splash_config;
      return this;
    }

    /**
     * 信息流配置
     */
    public Builder native_config(SigmobNativeConfig native_config) {
      this.native_config = native_config;
      return this;
    }

    /**
     * config刷新间隔
     */
    public Builder configRefresh(Integer configRefresh) {
      this.configRefresh = configRefresh;
      return this;
    }

    /**
     * 反作弊信息采集配置
     */
    public Builder anti_fraud_log(SigmobAntiFraudLogConfig anti_fraud_log) {
      this.anti_fraud_log = anti_fraud_log;
      return this;
    }

    /**
     * 是否gdpr地区，默认是false
     */
    public Builder is_gdpr_region(Boolean is_gdpr_region) {
      this.is_gdpr_region = is_gdpr_region;
      return this;
    }

    /**
     * track事件过期时间，过期后不执行补发操作，单位秒
     */
    public Builder tracking_expiration_time(Integer tracking_expiration_time) {
      this.tracking_expiration_time = tracking_expiration_time;
      return this;
    }

    /**
     * track上报失败的重发时间间隔
     */
    public Builder tracking_retry_interval(Integer tracking_retry_interval) {
      this.tracking_retry_interval = tracking_retry_interval;
      return this;
    }

    /**
     * 每次上传打点日志的最大条数
     */
    public Builder max_send_log_records(Integer max_send_log_records) {
      this.max_send_log_records = max_send_log_records;
      return this;
    }

    /**
     * 打点日志上报时间间隔（单位：秒）
     */
    public Builder send_log_interval(Integer send_log_interval) {
      this.send_log_interval = send_log_interval;
      return this;
    }

    /**
     * 点号位黑明单，默认会将100，101号点自动加入黑名单，如果下发了黑明单，以下发为准。
     */
    public Builder dclog_blacklist(List<Integer> dclog_blacklist) {
      Internal.checkElementsNotNull(dclog_blacklist);
      this.dclog_blacklist = dclog_blacklist;
      return this;
    }

    /**
     * 是否开启debug日志、初始化监测广告插件、监测结果打点和日志输出
     */
    public Builder enable_debug_level(Boolean enable_debug_level) {
      this.enable_debug_level = enable_debug_level;
      return this;
    }

    /**
     * 重复发起请求的间隔时间，在非ready的情况下，用来防止重复发起请求
     */
    public Builder load_interval(Integer load_interval) {
      this.load_interval = load_interval;
      return this;
    }

    /**
     * 是否禁止上传用户的位置信息。false: 不禁止上传；true: 禁止上传
     */
    public Builder disable_up_location(Boolean disable_up_location) {
      this.disable_up_location = disable_up_location;
      return this;
    }

    /**
     * false: 不加密；true: 加密
     */
    public Builder log_enc(Boolean log_enc) {
      this.log_enc = log_enc;
      return this;
    }

    /**
     * false: 不开启；true: 开启
     */
    public Builder feedback_debug(Boolean feedback_debug) {
      this.feedback_debug = feedback_debug;
      return this;
    }

    /**
     * 开启额外的dclog，比如show_callback等回调打点上报。
     */
    public Builder enable_extra_dclog(Boolean enable_extra_dclog) {
      this.enable_extra_dclog = enable_extra_dclog;
      return this;
    }

    /**
     * 网络超时时间，单位秒
     */
    public Builder network_timeout(Integer network_timeout) {
      this.network_timeout = network_timeout;
      return this;
    }

    @Override
    public SigmobCommon build() {
      return new SigmobCommon(endpoints, rv_config, splash_config, native_config, configRefresh, anti_fraud_log, is_gdpr_region, tracking_expiration_time, tracking_retry_interval, max_send_log_records, send_log_interval, dclog_blacklist, enable_debug_level, load_interval, disable_up_location, log_enc, feedback_debug, enable_extra_dclog, network_timeout, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_SigmobCommon extends ProtoAdapter<SigmobCommon> {
    public ProtoAdapter_SigmobCommon() {
      super(FieldEncoding.LENGTH_DELIMITED, SigmobCommon.class);
    }

    @Override
    public int encodedSize(SigmobCommon value) {
      return SigmobCommonEndpointsConfig.ADAPTER.encodedSizeWithTag(1, value.endpoints)
          + SigmobRvConfig.ADAPTER.encodedSizeWithTag(2, value.rv_config)
          + SigmobSplashConfig.ADAPTER.encodedSizeWithTag(3, value.splash_config)
          + SigmobNativeConfig.ADAPTER.encodedSizeWithTag(4, value.native_config)
          + ProtoAdapter.UINT32.encodedSizeWithTag(6, value.configRefresh)
          + SigmobAntiFraudLogConfig.ADAPTER.encodedSizeWithTag(7, value.anti_fraud_log)
          + ProtoAdapter.BOOL.encodedSizeWithTag(8, value.is_gdpr_region)
          + ProtoAdapter.UINT32.encodedSizeWithTag(9, value.tracking_expiration_time)
          + ProtoAdapter.UINT32.encodedSizeWithTag(10, value.tracking_retry_interval)
          + ProtoAdapter.UINT32.encodedSizeWithTag(11, value.max_send_log_records)
          + ProtoAdapter.UINT32.encodedSizeWithTag(12, value.send_log_interval)
          + ProtoAdapter.UINT32.asRepeated().encodedSizeWithTag(13, value.dclog_blacklist)
          + ProtoAdapter.BOOL.encodedSizeWithTag(14, value.enable_debug_level)
          + ProtoAdapter.UINT32.encodedSizeWithTag(15, value.load_interval)
          + ProtoAdapter.BOOL.encodedSizeWithTag(16, value.disable_up_location)
          + ProtoAdapter.BOOL.encodedSizeWithTag(17, value.log_enc)
          + ProtoAdapter.BOOL.encodedSizeWithTag(18, value.feedback_debug)
          + ProtoAdapter.BOOL.encodedSizeWithTag(19, value.enable_extra_dclog)
          + ProtoAdapter.UINT32.encodedSizeWithTag(20, value.network_timeout)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, SigmobCommon value) throws IOException {
      SigmobCommonEndpointsConfig.ADAPTER.encodeWithTag(writer, 1, value.endpoints);
      SigmobRvConfig.ADAPTER.encodeWithTag(writer, 2, value.rv_config);
      SigmobSplashConfig.ADAPTER.encodeWithTag(writer, 3, value.splash_config);
      SigmobNativeConfig.ADAPTER.encodeWithTag(writer, 4, value.native_config);
      ProtoAdapter.UINT32.encodeWithTag(writer, 6, value.configRefresh);
      SigmobAntiFraudLogConfig.ADAPTER.encodeWithTag(writer, 7, value.anti_fraud_log);
      ProtoAdapter.BOOL.encodeWithTag(writer, 8, value.is_gdpr_region);
      ProtoAdapter.UINT32.encodeWithTag(writer, 9, value.tracking_expiration_time);
      ProtoAdapter.UINT32.encodeWithTag(writer, 10, value.tracking_retry_interval);
      ProtoAdapter.UINT32.encodeWithTag(writer, 11, value.max_send_log_records);
      ProtoAdapter.UINT32.encodeWithTag(writer, 12, value.send_log_interval);
      ProtoAdapter.UINT32.asRepeated().encodeWithTag(writer, 13, value.dclog_blacklist);
      ProtoAdapter.BOOL.encodeWithTag(writer, 14, value.enable_debug_level);
      ProtoAdapter.UINT32.encodeWithTag(writer, 15, value.load_interval);
      ProtoAdapter.BOOL.encodeWithTag(writer, 16, value.disable_up_location);
      ProtoAdapter.BOOL.encodeWithTag(writer, 17, value.log_enc);
      ProtoAdapter.BOOL.encodeWithTag(writer, 18, value.feedback_debug);
      ProtoAdapter.BOOL.encodeWithTag(writer, 19, value.enable_extra_dclog);
      ProtoAdapter.UINT32.encodeWithTag(writer, 20, value.network_timeout);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public SigmobCommon decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.endpoints(SigmobCommonEndpointsConfig.ADAPTER.decode(reader)); break;
          case 2: builder.rv_config(SigmobRvConfig.ADAPTER.decode(reader)); break;
          case 3: builder.splash_config(SigmobSplashConfig.ADAPTER.decode(reader)); break;
          case 4: builder.native_config(SigmobNativeConfig.ADAPTER.decode(reader)); break;
          case 6: builder.configRefresh(ProtoAdapter.UINT32.decode(reader)); break;
          case 7: builder.anti_fraud_log(SigmobAntiFraudLogConfig.ADAPTER.decode(reader)); break;
          case 8: builder.is_gdpr_region(ProtoAdapter.BOOL.decode(reader)); break;
          case 9: builder.tracking_expiration_time(ProtoAdapter.UINT32.decode(reader)); break;
          case 10: builder.tracking_retry_interval(ProtoAdapter.UINT32.decode(reader)); break;
          case 11: builder.max_send_log_records(ProtoAdapter.UINT32.decode(reader)); break;
          case 12: builder.send_log_interval(ProtoAdapter.UINT32.decode(reader)); break;
          case 13: builder.dclog_blacklist.add(ProtoAdapter.UINT32.decode(reader)); break;
          case 14: builder.enable_debug_level(ProtoAdapter.BOOL.decode(reader)); break;
          case 15: builder.load_interval(ProtoAdapter.UINT32.decode(reader)); break;
          case 16: builder.disable_up_location(ProtoAdapter.BOOL.decode(reader)); break;
          case 17: builder.log_enc(ProtoAdapter.BOOL.decode(reader)); break;
          case 18: builder.feedback_debug(ProtoAdapter.BOOL.decode(reader)); break;
          case 19: builder.enable_extra_dclog(ProtoAdapter.BOOL.decode(reader)); break;
          case 20: builder.network_timeout(ProtoAdapter.UINT32.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public SigmobCommon redact(SigmobCommon value) {
      Builder builder = value.newBuilder();
      if (builder.endpoints != null) builder.endpoints = SigmobCommonEndpointsConfig.ADAPTER.redact(builder.endpoints);
      if (builder.rv_config != null) builder.rv_config = SigmobRvConfig.ADAPTER.redact(builder.rv_config);
      if (builder.splash_config != null) builder.splash_config = SigmobSplashConfig.ADAPTER.redact(builder.splash_config);
      if (builder.native_config != null) builder.native_config = SigmobNativeConfig.ADAPTER.redact(builder.native_config);
      if (builder.anti_fraud_log != null) builder.anti_fraud_log = SigmobAntiFraudLogConfig.ADAPTER.redact(builder.anti_fraud_log);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
