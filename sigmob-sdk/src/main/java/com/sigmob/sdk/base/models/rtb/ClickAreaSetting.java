// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: sigmob_ssp_response.proto
package com.sigmob.sdk.base.models.rtb;

import android.os.Parcelable;

import com.czhj.wire.AndroidMessage;
import com.czhj.wire.FieldEncoding;
import com.czhj.wire.Message;
import com.czhj.wire.ProtoAdapter;
import com.czhj.wire.ProtoReader;
import com.czhj.wire.ProtoWriter;
import com.czhj.wire.WireField;
import com.czhj.wire.internal.Internal;
import com.czhj.wire.okio.ByteString;

import java.io.IOException;

public final class ClickAreaSetting extends AndroidMessage<ClickAreaSetting, ClickAreaSetting.Builder> {
    public static final ProtoAdapter<ClickAreaSetting> ADAPTER = new ProtoAdapter_ClickAreaSetting();

    public static final Parcelable.Creator<ClickAreaSetting> CREATOR = AndroidMessage.newCreator(ADAPTER);

    private static final long serialVersionUID = 0L;

    public static final Float DEFAULT_TOP = 0.0f;

    public static final Float DEFAULT_LEFT = 0.0f;

    public static final Float DEFAULT_BOTTOM = 0.0f;

    public static final Float DEFAULT_RIGHT = 0.0f;

    /**
     * 上边距百分比[0, 1)
     */
    @WireField(
            tag = 1,
            adapter = "com.squareup.wire.ProtoAdapter#FLOAT"
    )
    public final Float top;

    /**
     * 左边距百分比[0, 1)
     */
    @WireField(
            tag = 2,
            adapter = "com.squareup.wire.ProtoAdapter#FLOAT"
    )
    public final Float left;

    /**
     * 下边距百分比[0, 1)
     */
    @WireField(
            tag = 3,
            adapter = "com.squareup.wire.ProtoAdapter#FLOAT"
    )
    public final Float bottom;

    /**
     * 右边距百分比[0, 1)
     */
    @WireField(
            tag = 4,
            adapter = "com.squareup.wire.ProtoAdapter#FLOAT"
    )
    public final Float right;

    public ClickAreaSetting(Float top, Float left, Float bottom, Float right) {
        this(top, left, bottom, right, ByteString.EMPTY);
    }

    public ClickAreaSetting(Float top, Float left, Float bottom, Float right,
                            ByteString unknownFields) {
        super(ADAPTER, unknownFields);
        this.top = top;
        this.left = left;
        this.bottom = bottom;
        this.right = right;
    }

    @Override
    public Builder newBuilder() {
        Builder builder = new Builder();
        builder.top = top;
        builder.left = left;
        builder.bottom = bottom;
        builder.right = right;
        builder.addUnknownFields(unknownFields());
        return builder;
    }

    @Override
    public boolean equals(Object other) {
        if (other == this) return true;
        if (!(other instanceof ClickAreaSetting)) return false;
        ClickAreaSetting o = (ClickAreaSetting) other;
        return unknownFields().equals(o.unknownFields())
                && Internal.equals(top, o.top)
                && Internal.equals(left, o.left)
                && Internal.equals(bottom, o.bottom)
                && Internal.equals(right, o.right);
    }

    @Override
    public int hashCode() {
        int result = super.hashCode;
        if (result == 0) {
            result = unknownFields().hashCode();
            result = result * 37 + (top != null ? top.hashCode() : 0);
            result = result * 37 + (left != null ? left.hashCode() : 0);
            result = result * 37 + (bottom != null ? bottom.hashCode() : 0);
            result = result * 37 + (right != null ? right.hashCode() : 0);
            super.hashCode = result;
        }
        return result;
    }

    @Override
    public String toString() {
        StringBuilder builder = new StringBuilder();
        if (top != null) builder.append(", top=").append(top);
        if (left != null) builder.append(", left=").append(left);
        if (bottom != null) builder.append(", bottom=").append(bottom);
        if (right != null) builder.append(", right=").append(right);
        return builder.replace(0, 2, "ClickAreaSetting{").append('}').toString();
    }

    public static final class Builder extends Message.Builder<ClickAreaSetting, Builder> {
        public Float top = DEFAULT_TOP;

        public Float left = DEFAULT_LEFT;

        public Float bottom = DEFAULT_BOTTOM;

        public Float right = DEFAULT_RIGHT;

        public Builder() {
        }

        /**
         * 上边距百分比[0, 1)
         */
        public Builder top(Float top) {
            this.top = top;
            return this;
        }

        /**
         * 左边距百分比[0, 1)
         */
        public Builder left(Float left) {
            this.left = left;
            return this;
        }

        /**
         * 下边距百分比[0, 1)
         */
        public Builder bottom(Float bottom) {
            this.bottom = bottom;
            return this;
        }

        /**
         * 右边距百分比[0, 1)
         */
        public Builder right(Float right) {
            this.right = right;
            return this;
        }

        @Override
        public ClickAreaSetting build() {
            return new ClickAreaSetting(top, left, bottom, right, super.buildUnknownFields());
        }
    }

    private static final class ProtoAdapter_ClickAreaSetting extends ProtoAdapter<ClickAreaSetting> {
        public ProtoAdapter_ClickAreaSetting() {
            super(FieldEncoding.LENGTH_DELIMITED, ClickAreaSetting.class);
        }

        @Override
        public int encodedSize(ClickAreaSetting value) {
            return ProtoAdapter.FLOAT.encodedSizeWithTag(1, value.top)
                    + ProtoAdapter.FLOAT.encodedSizeWithTag(2, value.left)
                    + ProtoAdapter.FLOAT.encodedSizeWithTag(3, value.bottom)
                    + ProtoAdapter.FLOAT.encodedSizeWithTag(4, value.right)
                    + value.unknownFields().size();
        }

        @Override
        public void encode(ProtoWriter writer, ClickAreaSetting value) throws IOException {
            ProtoAdapter.FLOAT.encodeWithTag(writer, 1, value.top);
            ProtoAdapter.FLOAT.encodeWithTag(writer, 2, value.left);
            ProtoAdapter.FLOAT.encodeWithTag(writer, 3, value.bottom);
            ProtoAdapter.FLOAT.encodeWithTag(writer, 4, value.right);
            writer.writeBytes(value.unknownFields());
        }

        @Override
        public ClickAreaSetting decode(ProtoReader reader) throws IOException {
            Builder builder = new Builder();
            long token = reader.beginMessage();
            for (int tag; (tag = reader.nextTag()) != -1; ) {
                switch (tag) {
                    case 1:
                        builder.top(ProtoAdapter.FLOAT.decode(reader));
                        break;
                    case 2:
                        builder.left(ProtoAdapter.FLOAT.decode(reader));
                        break;
                    case 3:
                        builder.bottom(ProtoAdapter.FLOAT.decode(reader));
                        break;
                    case 4:
                        builder.right(ProtoAdapter.FLOAT.decode(reader));
                        break;
                    default: {
                        FieldEncoding fieldEncoding = reader.peekFieldEncoding();
                        Object value = fieldEncoding.rawProtoAdapter().decode(reader);
                        builder.addUnknownField(tag, fieldEncoding, value);
                    }
                }
            }
            reader.endMessage(token);
            return builder.build();
        }

        @Override
        public ClickAreaSetting redact(ClickAreaSetting value) {
            Builder builder = value.newBuilder();
            builder.clearUnknownFields();
            return builder.build();
        }
    }
}
