// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: sigmob_ssp_config.proto
package com.sigmob.sdk.base.models.config;

import android.os.Parcelable;

import com.czhj.wire.AndroidMessage;
import com.czhj.wire.FieldEncoding;
import com.czhj.wire.Message;
import com.czhj.wire.ProtoAdapter;
import com.czhj.wire.ProtoReader;
import com.czhj.wire.ProtoWriter;
import com.czhj.wire.WireField;
import com.czhj.wire.internal.Internal;
import com.czhj.wire.okio.ByteString;

import java.io.IOException;

public final class SigmobMotionConfig extends AndroidMessage<SigmobMotionConfig, SigmobMotionConfig.Builder> {
    public static final ProtoAdapter<SigmobMotionConfig> ADAPTER = new ProtoAdapter_SigmobMotionConfig();

    public static final Parcelable.Creator<SigmobMotionConfig> CREATOR = AndroidMessage.newCreator(ADAPTER);

    private static final long serialVersionUID = 0L;

    public static final Integer DEFAULT_INTERVAL = 0;

    public static final Integer DEFAULT_QUEUE_MAX = 0;

    public static final Integer DEFAULT_COUNT = 0;

    /**
     * 单位毫秒；传感器获取的间隔时间
     */
    @WireField(
            tag = 1,
            adapter = "com.squareup.wire.ProtoAdapter#UINT32"
    )
    public final Integer interval;

    /**
     * 对列的最大值
     */
    @WireField(
            tag = 2,
            adapter = "com.squareup.wire.ProtoAdapter#UINT32"
    )
    public final Integer queue_max;

    /**
     * 从队列中分别获取事件前后的条数
     */
    @WireField(
            tag = 3,
            adapter = "com.squareup.wire.ProtoAdapter#UINT32"
    )
    public final Integer count;

    public SigmobMotionConfig(Integer interval, Integer queue_max, Integer count) {
        this(interval, queue_max, count, ByteString.EMPTY);
    }

    public SigmobMotionConfig(Integer interval, Integer queue_max, Integer count,
                              ByteString unknownFields) {
        super(ADAPTER, unknownFields);
        this.interval = interval;
        this.queue_max = queue_max;
        this.count = count;
    }

    @Override
    public Builder newBuilder() {
        Builder builder = new Builder();
        builder.interval = interval;
        builder.queue_max = queue_max;
        builder.count = count;
        builder.addUnknownFields(unknownFields());
        return builder;
    }

    @Override
    public boolean equals(Object other) {
        if (other == this) return true;
        if (!(other instanceof SigmobMotionConfig)) return false;
        SigmobMotionConfig o = (SigmobMotionConfig) other;
        return unknownFields().equals(o.unknownFields())
                && Internal.equals(interval, o.interval)
                && Internal.equals(queue_max, o.queue_max)
                && Internal.equals(count, o.count);
    }

    @Override
    public int hashCode() {
        int result = super.hashCode;
        if (result == 0) {
            result = unknownFields().hashCode();
            result = result * 37 + (interval != null ? interval.hashCode() : 0);
            result = result * 37 + (queue_max != null ? queue_max.hashCode() : 0);
            result = result * 37 + (count != null ? count.hashCode() : 0);
            super.hashCode = result;
        }
        return result;
    }

    @Override
    public String toString() {
        StringBuilder builder = new StringBuilder();
        if (interval != null) builder.append(", interval=").append(interval);
        if (queue_max != null) builder.append(", queue_max=").append(queue_max);
        if (count != null) builder.append(", count=").append(count);
        return builder.replace(0, 2, "SigmobMotionConfig{").append('}').toString();
    }

    public static final class Builder extends Message.Builder<SigmobMotionConfig, Builder> {
        public Integer interval;

        public Integer queue_max;

        public Integer count;

        public Builder() {
        }

        /**
         * 单位毫秒；传感器获取的间隔时间
         */
        public Builder interval(Integer interval) {
            this.interval = interval;
            return this;
        }

        /**
         * 对列的最大值
         */
        public Builder queue_max(Integer queue_max) {
            this.queue_max = queue_max;
            return this;
        }

        /**
         * 从队列中分别获取事件前后的条数
         */
        public Builder count(Integer count) {
            this.count = count;
            return this;
        }

        @Override
        public SigmobMotionConfig build() {
            return new SigmobMotionConfig(interval, queue_max, count, super.buildUnknownFields());
        }
    }

    private static final class ProtoAdapter_SigmobMotionConfig extends ProtoAdapter<SigmobMotionConfig> {
        public ProtoAdapter_SigmobMotionConfig() {
            super(FieldEncoding.LENGTH_DELIMITED, SigmobMotionConfig.class);
        }

        @Override
        public int encodedSize(SigmobMotionConfig value) {
            return ProtoAdapter.UINT32.encodedSizeWithTag(1, value.interval)
                    + ProtoAdapter.UINT32.encodedSizeWithTag(2, value.queue_max)
                    + ProtoAdapter.UINT32.encodedSizeWithTag(3, value.count)
                    + value.unknownFields().size();
        }

        @Override
        public void encode(ProtoWriter writer, SigmobMotionConfig value) throws IOException {
            ProtoAdapter.UINT32.encodeWithTag(writer, 1, value.interval);
            ProtoAdapter.UINT32.encodeWithTag(writer, 2, value.queue_max);
            ProtoAdapter.UINT32.encodeWithTag(writer, 3, value.count);
            writer.writeBytes(value.unknownFields());
        }

        @Override
        public SigmobMotionConfig decode(ProtoReader reader) throws IOException {
            Builder builder = new Builder();
            long token = reader.beginMessage();
            for (int tag; (tag = reader.nextTag()) != -1; ) {
                switch (tag) {
                    case 1:
                        builder.interval(ProtoAdapter.UINT32.decode(reader));
                        break;
                    case 2:
                        builder.queue_max(ProtoAdapter.UINT32.decode(reader));
                        break;
                    case 3:
                        builder.count(ProtoAdapter.UINT32.decode(reader));
                        break;
                    default: {
                        FieldEncoding fieldEncoding = reader.peekFieldEncoding();
                        Object value = fieldEncoding.rawProtoAdapter().decode(reader);
                        builder.addUnknownField(tag, fieldEncoding, value);
                    }
                }
            }
            reader.endMessage(token);
            return builder.build();
        }

        @Override
        public SigmobMotionConfig redact(SigmobMotionConfig value) {
            Builder builder = value.newBuilder();
            builder.clearUnknownFields();
            return builder.build();
        }
    }
}
