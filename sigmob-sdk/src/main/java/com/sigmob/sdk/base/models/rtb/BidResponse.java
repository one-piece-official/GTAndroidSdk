// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: sigmob_ssp_response.proto
package com.sigmob.sdk.base.models.rtb;

import android.os.Parcelable;

import com.czhj.wire.AndroidMessage;
import com.czhj.wire.FieldEncoding;
import com.czhj.wire.Message;
import com.czhj.wire.ProtoAdapter;
import com.czhj.wire.ProtoReader;
import com.czhj.wire.ProtoWriter;
import com.czhj.wire.WireField;
import com.czhj.wire.internal.Internal;
import com.czhj.wire.okio.ByteString;

import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;

public final class BidResponse extends AndroidMessage<BidResponse, BidResponse.Builder> {
  public static final ProtoAdapter<BidResponse> ADAPTER = new ProtoAdapter_BidResponse();

  public static final Parcelable.Creator<BidResponse> CREATOR = AndroidMessage.newCreator(ADAPTER);

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_REQUEST_ID = "";

  public static final Long DEFAULT_ERROR_CODE = 0L;

  public static final Long DEFAULT_PROCESS_TIME_MS_DSP = 0L;

  public static final Long DEFAULT_PROCESS_TIME_MS_SSP = 0L;

  public static final Integer DEFAULT_PCTR_VALID_CHECK = 0;

  public static final String DEFAULT_PCTR_VERSION = "";

  public static final String DEFAULT_UID = "";

  public static final Integer DEFAULT_EXPIRATION_TIME = 0;

  public static final String DEFAULT_AD_UA = "";

  public static final String DEFAULT_ERROR_MESSAGE = "";

  public static final String DEFAULT_RV_CALLBACK_URL = "";

  public static final String DEFAULT_ADX_ID = "";

  /**
   * 对应请的request_id(内部生成的)
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String request_id;

  /**
   * 广告信息
   */
  @WireField(
      tag = 2,
      adapter = "com.sigmob.sdk.base.models.rtb.Ad#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<Ad> ads;

  /**
   * 请求出错时的错误码，用于问题排查
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long error_code;

  /**
   * 投放系统广告检索时长，ms
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long process_time_ms_dsp;

  /**
   * ssp聚合平台广告检索时长，ms
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long process_time_ms_ssp;

  /**
   * 预估人群是否有效. 0：未查到预估数据；1：使用；2：过期；3：未过期，但无交集【v2.5.2版本开始只有0:未使用预估，4:在线预估】
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer pctr_valid_check;

  /**
   * 预估版本【v2.5.2开始弃用】
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String pctr_version;

  /**
   * 用户在sigmob的唯一标识。
   */
  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String uid;

  /**
   * 广告有效截止日期。Unix时间戳，单位秒。
   */
  @WireField(
      tag = 9,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer expiration_time;

  /**
   * 广告使用ua，优先从pb中取，当pb中ua为空时从请求header中取user-agent
   */
  @WireField(
      tag = 10,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String ad_ua;

  /**
   * 广告位上广告相关设置，对返回所有广告生效（sdk 3.4.0开始生效）
   */
  @WireField(
      tag = 11,
      adapter = "com.sigmob.sdk.base.models.rtb.SlotAdSetting#ADAPTER"
  )
  public final SlotAdSetting slot_ad_setting;

  @WireField(
      tag = 12,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String error_message;

  /**
   * 当前的主入口，若主入口为空，直接使用ads[0].materials[0].main_template
   */
  @WireField(
      tag = 13,
      adapter = "com.sigmob.sdk.base.models.rtb.Template#ADAPTER"
  )
  public final Template scene;

  /**
   * c-s 返回的出价以及url
   */
  @WireField(
      tag = 14,
      adapter = "com.sigmob.sdk.base.models.rtb.BiddingResponse#ADAPTER"
  )
  public final BiddingResponse bidding_response;

  /**
   * 激励回调rv
   */
  @WireField(
      tag = 15,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String rv_callback_url;

  /**
   * adx渠道ID
   */
  @WireField(
      tag = 16,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String adx_id;

  public BidResponse(String request_id, List<Ad> ads, Long error_code, Long process_time_ms_dsp,
      Long process_time_ms_ssp, Integer pctr_valid_check, String pctr_version, String uid,
      Integer expiration_time, String ad_ua, SlotAdSetting slot_ad_setting, String error_message,
      Template scene, BiddingResponse bidding_response, String rv_callback_url, String adx_id) {
    this(request_id, ads, error_code, process_time_ms_dsp, process_time_ms_ssp, pctr_valid_check, pctr_version, uid, expiration_time, ad_ua, slot_ad_setting, error_message, scene, bidding_response, rv_callback_url, adx_id, ByteString.EMPTY);
  }

  public BidResponse(String request_id, List<Ad> ads, Long error_code, Long process_time_ms_dsp,
      Long process_time_ms_ssp, Integer pctr_valid_check, String pctr_version, String uid,
      Integer expiration_time, String ad_ua, SlotAdSetting slot_ad_setting, String error_message,
      Template scene, BiddingResponse bidding_response, String rv_callback_url, String adx_id,
      ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.request_id = request_id;
    this.ads = Internal.immutableCopyOf("ads", ads);
    this.error_code = error_code;
    this.process_time_ms_dsp = process_time_ms_dsp;
    this.process_time_ms_ssp = process_time_ms_ssp;
    this.pctr_valid_check = pctr_valid_check;
    this.pctr_version = pctr_version;
    this.uid = uid;
    this.expiration_time = expiration_time;
    this.ad_ua = ad_ua;
    this.slot_ad_setting = slot_ad_setting;
    this.error_message = error_message;
    this.scene = scene;
    this.bidding_response = bidding_response;
    this.rv_callback_url = rv_callback_url;
    this.adx_id = adx_id;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.request_id = request_id;
    builder.ads = Internal.copyOf("ads", ads);
    builder.error_code = error_code;
    builder.process_time_ms_dsp = process_time_ms_dsp;
    builder.process_time_ms_ssp = process_time_ms_ssp;
    builder.pctr_valid_check = pctr_valid_check;
    builder.pctr_version = pctr_version;
    builder.uid = uid;
    builder.expiration_time = expiration_time;
    builder.ad_ua = ad_ua;
    builder.slot_ad_setting = slot_ad_setting;
    builder.error_message = error_message;
    builder.scene = scene;
    builder.bidding_response = bidding_response;
    builder.rv_callback_url = rv_callback_url;
    builder.adx_id = adx_id;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof BidResponse)) return false;
    BidResponse o = (BidResponse) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(request_id, o.request_id)
        && ads.equals(o.ads)
        && Internal.equals(error_code, o.error_code)
        && Internal.equals(process_time_ms_dsp, o.process_time_ms_dsp)
        && Internal.equals(process_time_ms_ssp, o.process_time_ms_ssp)
        && Internal.equals(pctr_valid_check, o.pctr_valid_check)
        && Internal.equals(pctr_version, o.pctr_version)
        && Internal.equals(uid, o.uid)
        && Internal.equals(expiration_time, o.expiration_time)
        && Internal.equals(ad_ua, o.ad_ua)
        && Internal.equals(slot_ad_setting, o.slot_ad_setting)
        && Internal.equals(error_message, o.error_message)
        && Internal.equals(scene, o.scene)
        && Internal.equals(bidding_response, o.bidding_response)
        && Internal.equals(rv_callback_url, o.rv_callback_url)
        && Internal.equals(adx_id, o.adx_id);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (request_id != null ? request_id.hashCode() : 0);
      result = result * 37 + ads.hashCode();
      result = result * 37 + (error_code != null ? error_code.hashCode() : 0);
      result = result * 37 + (process_time_ms_dsp != null ? process_time_ms_dsp.hashCode() : 0);
      result = result * 37 + (process_time_ms_ssp != null ? process_time_ms_ssp.hashCode() : 0);
      result = result * 37 + (pctr_valid_check != null ? pctr_valid_check.hashCode() : 0);
      result = result * 37 + (pctr_version != null ? pctr_version.hashCode() : 0);
      result = result * 37 + (uid != null ? uid.hashCode() : 0);
      result = result * 37 + (expiration_time != null ? expiration_time.hashCode() : 0);
      result = result * 37 + (ad_ua != null ? ad_ua.hashCode() : 0);
      result = result * 37 + (slot_ad_setting != null ? slot_ad_setting.hashCode() : 0);
      result = result * 37 + (error_message != null ? error_message.hashCode() : 0);
      result = result * 37 + (scene != null ? scene.hashCode() : 0);
      result = result * 37 + (bidding_response != null ? bidding_response.hashCode() : 0);
      result = result * 37 + (rv_callback_url != null ? rv_callback_url.hashCode() : 0);
      result = result * 37 + (adx_id != null ? adx_id.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (request_id != null) builder.append(", request_id=").append(request_id);
    if (!ads.isEmpty()) builder.append(", ads=").append(ads);
    if (error_code != null) builder.append(", error_code=").append(error_code);
    if (process_time_ms_dsp != null) builder.append(", process_time_ms_dsp=").append(process_time_ms_dsp);
    if (process_time_ms_ssp != null) builder.append(", process_time_ms_ssp=").append(process_time_ms_ssp);
    if (pctr_valid_check != null) builder.append(", pctr_valid_check=").append(pctr_valid_check);
    if (pctr_version != null) builder.append(", pctr_version=").append(pctr_version);
    if (uid != null) builder.append(", uid=").append(uid);
    if (expiration_time != null) builder.append(", expiration_time=").append(expiration_time);
    if (ad_ua != null) builder.append(", ad_ua=").append(ad_ua);
    if (slot_ad_setting != null) builder.append(", slot_ad_setting=").append(slot_ad_setting);
    if (error_message != null) builder.append(", error_message=").append(error_message);
    if (scene != null) builder.append(", scene=").append(scene);
    if (bidding_response != null) builder.append(", bidding_response=").append(bidding_response);
    if (rv_callback_url != null) builder.append(", rv_callback_url=").append(rv_callback_url);
    if (adx_id != null) builder.append(", adx_id=").append(adx_id);
    return builder.replace(0, 2, "BidResponse{").append('}').toString();
  }

    public static final class Builder extends Message.Builder<BidResponse, Builder> {

    public String request_id = DEFAULT_REQUEST_ID;

    public List<Ad> ads;

    public Long error_code = DEFAULT_ERROR_CODE;

    public Long process_time_ms_dsp = DEFAULT_PROCESS_TIME_MS_DSP;

    public Long process_time_ms_ssp = DEFAULT_PROCESS_TIME_MS_SSP;

    public Integer pctr_valid_check = DEFAULT_PCTR_VALID_CHECK;

    public String pctr_version = DEFAULT_PCTR_VERSION;

    public String uid = DEFAULT_UID;

    public Integer expiration_time = DEFAULT_EXPIRATION_TIME;

    public String ad_ua = DEFAULT_AD_UA;

    public SlotAdSetting slot_ad_setting;

    public String error_message = DEFAULT_ERROR_MESSAGE;

    public Template scene;

    public BiddingResponse bidding_response;

    public String rv_callback_url;

    public String adx_id;

    public Builder() {
      ads = Internal.newMutableList();
    }

    /**
     * 对应请的request_id(内部生成的)
     */
    public Builder request_id(String request_id) {
      this.request_id = request_id;
      return this;
    }

    /**
     * 广告信息
     */
    public Builder ads(List<Ad> ads) {
      Internal.checkElementsNotNull(ads);
      this.ads = ads;
      return this;
    }

    /**
     * 请求出错时的错误码，用于问题排查
     */
    public Builder error_code(Long error_code) {
      this.error_code = error_code;
      return this;
    }

    /**
     * 投放系统广告检索时长，ms
     */
    public Builder process_time_ms_dsp(Long process_time_ms_dsp) {
      this.process_time_ms_dsp = process_time_ms_dsp;
      return this;
    }

    /**
     * ssp聚合平台广告检索时长，ms
     */
    public Builder process_time_ms_ssp(Long process_time_ms_ssp) {
      this.process_time_ms_ssp = process_time_ms_ssp;
      return this;
    }

    /**
     * 预估人群是否有效. 0：未查到预估数据；1：使用；2：过期；3：未过期，但无交集【v2.5.2版本开始只有0:未使用预估，4:在线预估】
     */
    public Builder pctr_valid_check(Integer pctr_valid_check) {
      this.pctr_valid_check = pctr_valid_check;
      return this;
    }

    /**
     * 预估版本【v2.5.2开始弃用】
     */
    public Builder pctr_version(String pctr_version) {
      this.pctr_version = pctr_version;
      return this;
    }

    /**
     * 用户在sigmob的唯一标识。
     */
    public Builder uid(String uid) {
      this.uid = uid;
      return this;
    }

    /**
     * 广告有效截止日期。Unix时间戳，单位秒。
     */
    public Builder expiration_time(Integer expiration_time) {
      this.expiration_time = expiration_time;
      return this;
    }

    /**
     * 广告使用ua，优先从pb中取，当pb中ua为空时从请求header中取user-agent
     */
    public Builder ad_ua(String ad_ua) {
      this.ad_ua = ad_ua;
      return this;
    }

    /**
     * 广告位上广告相关设置，对返回所有广告生效（sdk 3.4.0开始生效）
     */
    public Builder slot_ad_setting(SlotAdSetting slot_ad_setting) {
      this.slot_ad_setting = slot_ad_setting;
      return this;
    }

    public Builder error_message(String error_message) {
      this.error_message = error_message;
      return this;
    }

    /**
     * 当前的主入口，若主入口为空，直接使用ads[0].materials[0].main_template
     */
    public Builder scene(Template scene) {
      this.scene = scene;
      return this;
    }

    /**
     * c-s 返回的出价以及url
     */
    public Builder bidding_response(BiddingResponse bidding_response) {
      this.bidding_response = bidding_response;
      return this;
    }

    /**
     * 激励回调rv
     */
    public Builder rv_callback_url(String rv_callback_url) {
      this.rv_callback_url = rv_callback_url;
      return this;
    }

    /**
     * adx渠道ID
     */
    public Builder adx_id(String adx_id) {
      this.adx_id = adx_id;
      return this;
    }

    @Override
    public BidResponse build() {
      return new BidResponse(request_id, ads, error_code, process_time_ms_dsp, process_time_ms_ssp, pctr_valid_check, pctr_version, uid, expiration_time, ad_ua, slot_ad_setting, error_message, scene, bidding_response, rv_callback_url, adx_id, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_BidResponse extends ProtoAdapter<BidResponse> {
    public ProtoAdapter_BidResponse() {
      super(FieldEncoding.LENGTH_DELIMITED, BidResponse.class);
    }

    @Override
    public int encodedSize(BidResponse value) {
      return ProtoAdapter.STRING.encodedSizeWithTag(1, value.request_id)
          + Ad.ADAPTER.asRepeated().encodedSizeWithTag(2, value.ads)
          + ProtoAdapter.UINT64.encodedSizeWithTag(3, value.error_code)
          + ProtoAdapter.UINT64.encodedSizeWithTag(4, value.process_time_ms_dsp)
          + ProtoAdapter.UINT64.encodedSizeWithTag(5, value.process_time_ms_ssp)
          + ProtoAdapter.UINT32.encodedSizeWithTag(6, value.pctr_valid_check)
          + ProtoAdapter.STRING.encodedSizeWithTag(7, value.pctr_version)
          + ProtoAdapter.STRING.encodedSizeWithTag(8, value.uid)
          + ProtoAdapter.UINT32.encodedSizeWithTag(9, value.expiration_time)
          + ProtoAdapter.STRING.encodedSizeWithTag(10, value.ad_ua)
          + SlotAdSetting.ADAPTER.encodedSizeWithTag(11, value.slot_ad_setting)
          + ProtoAdapter.STRING.encodedSizeWithTag(12, value.error_message)
          + Template.ADAPTER.encodedSizeWithTag(13, value.scene)
          + BiddingResponse.ADAPTER.encodedSizeWithTag(14, value.bidding_response)
          + ProtoAdapter.STRING.encodedSizeWithTag(15, value.rv_callback_url)
          + ProtoAdapter.STRING.encodedSizeWithTag(16, value.adx_id)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, BidResponse value) throws IOException {
      ProtoAdapter.STRING.encodeWithTag(writer, 1, value.request_id);
      Ad.ADAPTER.asRepeated().encodeWithTag(writer, 2, value.ads);
      ProtoAdapter.UINT64.encodeWithTag(writer, 3, value.error_code);
      ProtoAdapter.UINT64.encodeWithTag(writer, 4, value.process_time_ms_dsp);
      ProtoAdapter.UINT64.encodeWithTag(writer, 5, value.process_time_ms_ssp);
      ProtoAdapter.UINT32.encodeWithTag(writer, 6, value.pctr_valid_check);
      ProtoAdapter.STRING.encodeWithTag(writer, 7, value.pctr_version);
      ProtoAdapter.STRING.encodeWithTag(writer, 8, value.uid);
      ProtoAdapter.UINT32.encodeWithTag(writer, 9, value.expiration_time);
      ProtoAdapter.STRING.encodeWithTag(writer, 10, value.ad_ua);
      SlotAdSetting.ADAPTER.encodeWithTag(writer, 11, value.slot_ad_setting);
      ProtoAdapter.STRING.encodeWithTag(writer, 12, value.error_message);
      Template.ADAPTER.encodeWithTag(writer, 13, value.scene);
      BiddingResponse.ADAPTER.encodeWithTag(writer, 14, value.bidding_response);
      ProtoAdapter.STRING.encodeWithTag(writer, 15, value.rv_callback_url);
      ProtoAdapter.STRING.encodeWithTag(writer, 16, value.adx_id);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public BidResponse decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.request_id(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.ads.add(Ad.ADAPTER.decode(reader)); break;
          case 3: builder.error_code(ProtoAdapter.UINT64.decode(reader)); break;
          case 4: builder.process_time_ms_dsp(ProtoAdapter.UINT64.decode(reader)); break;
          case 5: builder.process_time_ms_ssp(ProtoAdapter.UINT64.decode(reader)); break;
          case 6: builder.pctr_valid_check(ProtoAdapter.UINT32.decode(reader)); break;
          case 7: builder.pctr_version(ProtoAdapter.STRING.decode(reader)); break;
          case 8: builder.uid(ProtoAdapter.STRING.decode(reader)); break;
          case 9: builder.expiration_time(ProtoAdapter.UINT32.decode(reader)); break;
          case 10: builder.ad_ua(ProtoAdapter.STRING.decode(reader)); break;
          case 11: builder.slot_ad_setting(SlotAdSetting.ADAPTER.decode(reader)); break;
          case 12: builder.error_message(ProtoAdapter.STRING.decode(reader)); break;
          case 13: builder.scene(Template.ADAPTER.decode(reader)); break;
          case 14: builder.bidding_response(BiddingResponse.ADAPTER.decode(reader)); break;
          case 15: builder.rv_callback_url(ProtoAdapter.STRING.decode(reader)); break;
          case 16: builder.adx_id(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public BidResponse redact(BidResponse value) {
      Builder builder = value.newBuilder();
      Internal.redactElements(builder.ads, Ad.ADAPTER);
      if (builder.slot_ad_setting != null) builder.slot_ad_setting = SlotAdSetting.ADAPTER.redact(builder.slot_ad_setting);
      if (builder.scene != null) builder.scene = Template.ADAPTER.redact(builder.scene);
      if (builder.bidding_response != null) builder.bidding_response = BiddingResponse.ADAPTER.redact(builder.bidding_response);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
