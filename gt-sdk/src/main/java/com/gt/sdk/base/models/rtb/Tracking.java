// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: gt_ad_response.proto
package com.gt.sdk.base.models.rtb;

import android.os.Parcelable;

import com.czhj.wire.AndroidMessage;
import com.czhj.wire.FieldEncoding;
import com.czhj.wire.Message;
import com.czhj.wire.ProtoAdapter;
import com.czhj.wire.ProtoReader;
import com.czhj.wire.ProtoWriter;
import com.czhj.wire.WireField;
import com.czhj.wire.internal.Internal;
import com.czhj.wire.okio.ByteString;

import java.io.IOException;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;

public final class Tracking extends AndroidMessage<Tracking, Tracking.Builder> {
    public static final ProtoAdapter<Tracking> ADAPTER = new ProtoAdapter_Tracking();

    public static final Parcelable.Creator<Tracking> CREATOR = AndroidMessage.newCreator(ADAPTER);

    private static final long serialVersionUID = 0L;

    public static final String DEFAULT_NURL = "";

    /**
     * 点击跟踪器
     */
    @WireField(tag = 1, adapter = "com.squareup.wire.ProtoAdapter#STRING", label = WireField.Label.REPEATED)
    public final List<String> click_trackers;

    /**
     * 展示跟踪器
     */
    @WireField(tag = 2, adapter = "com.squareup.wire.ProtoAdapter#STRING", label = WireField.Label.REPEATED)
    public final List<String> imp_trackers;

    /**
     * 用 deeplink 唤醒成功后上报
     */
    @WireField(tag = 3, adapter = "com.squareup.wire.ProtoAdapter#STRING", label = WireField.Label.REPEATED)
    public final List<String> dplk_trackers;

    /**
     * 竞胜时候上报
     */
    @WireField(tag = 4, adapter = "com.squareup.wire.ProtoAdapter#STRING", label = WireField.Label.REPEATED)
    public final List<String> nurls;

    /**
     * 竞败时候上报
     */
    @WireField(tag = 5, adapter = "com.squareup.wire.ProtoAdapter#STRING", label = WireField.Label.REPEATED)
    public final List<String> lurls;

    /**
     * 用 deeplink 唤醒失败后上报
     */
    @WireField(tag = 6, adapter = "com.squareup.wire.ProtoAdapter#STRING", label = WireField.Label.REPEATED)
    public final List<String> dplk_fail_trackers;

    /**
     * 开始用 deeplink 尝试唤醒时上报
     */
    @WireField(tag = 7, adapter = "com.squareup.wire.ProtoAdapter#STRING", label = WireField.Label.REPEATED)
    public final List<String> dplk_try_trackers;

    /**
     * 视频开始播放监测 URL，在视频开始播放时上报
     */
    @WireField(tag = 8, adapter = "com.squareup.wire.ProtoAdapter#STRING", label = WireField.Label.REPEATED)
    public final List<String> player_start_trackers;

    /**
     * 兼容旧的
     */
    @WireField(tag = 9, adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final String nurl;

    /**
     * 视频播放完成监测 URL，在视频播放完成时上报
     */
    @WireField(tag = 10, adapter = "com.squareup.wire.ProtoAdapter#STRING", label = WireField.Label.REPEATED)
    public final List<String> player_end_trackers;

    /**
     * 视频有效播放监测 URL，在视频播放时长过半时上报
     */
    @WireField(tag = 11, adapter = "com.squareup.wire.ProtoAdapter#STRING", label = WireField.Label.REPEATED)
    public final List<String> player_valid_trackers;

    /**
     * 视频播放 1/4 追踪 url 数组
     */
    @WireField(tag = 12, adapter = "com.squareup.wire.ProtoAdapter#STRING", label = WireField.Label.REPEATED)
    public final List<String> player_first_quartile_trackers;

    /**
     * 视频播放 1/2 追踪 url 数组
     */
    @WireField(tag = 13, adapter = "com.squareup.wire.ProtoAdapter#STRING", label = WireField.Label.REPEATED)
    public final List<String> player_midpoint_trackers;

    /**
     * 视频播放 3/4 追踪 url 数组
     */
    @WireField(tag = 14, adapter = "com.squareup.wire.ProtoAdapter#STRING", label = WireField.Label.REPEATED)
    public final List<String> player_third_quartile_trackers;

    /**
     * 通过广告开始下载时上报
     */
    @WireField(tag = 15, adapter = "com.squareup.wire.ProtoAdapter#STRING", label = WireField.Label.REPEATED)
    public final List<String> download_trackers;

    /**
     * 通过广告完成下载时上报
     */
    @WireField(tag = 16, adapter = "com.squareup.wire.ProtoAdapter#STRING", label = WireField.Label.REPEATED)
    public final List<String> downloaded_trackers;

    /**
     * 通过广告下载并完成安装时上报
     */
    @WireField(tag = 17, adapter = "com.squareup.wire.ProtoAdapter#STRING", label = WireField.Label.REPEATED)
    public final List<String> installed_trackers;

    /**
     * 开始安装上报数组
     */
    @WireField(tag = 18, adapter = "com.squareup.wire.ProtoAdapter#STRING", label = WireField.Label.REPEATED)
    public final List<String> install_trackers;

    /**
     * 安装后激活打开App后上报数组
     */
    @WireField(tag = 19, adapter = "com.squareup.wire.ProtoAdapter#STRING", label = WireField.Label.REPEATED)
    public final List<String> active_trackers;

    public Tracking(List<String> click_trackers, List<String> imp_trackers, List<String> dplk_trackers, List<String> nurls, List<String> lurls, List<String> dplk_fail_trackers, List<String> dplk_try_trackers, List<String> player_start_trackers, String nurl, List<String> player_end_trackers, List<String> player_valid_trackers, List<String> player_first_quartile_trackers, List<String> player_midpoint_trackers, List<String> player_third_quartile_trackers, List<String> download_trackers, List<String> downloaded_trackers, List<String> installed_trackers, List<String> install_trackers, List<String> active_trackers) {
        this(click_trackers, imp_trackers, dplk_trackers, nurls, lurls, dplk_fail_trackers, dplk_try_trackers, player_start_trackers, nurl, player_end_trackers, player_valid_trackers, player_first_quartile_trackers, player_midpoint_trackers, player_third_quartile_trackers, download_trackers, downloaded_trackers, installed_trackers, install_trackers, active_trackers, ByteString.EMPTY);
    }

    public Tracking(List<String> click_trackers, List<String> imp_trackers, List<String> dplk_trackers, List<String> nurls, List<String> lurls, List<String> dplk_fail_trackers, List<String> dplk_try_trackers, List<String> player_start_trackers, String nurl, List<String> player_end_trackers, List<String> player_valid_trackers, List<String> player_first_quartile_trackers, List<String> player_midpoint_trackers, List<String> player_third_quartile_trackers, List<String> download_trackers, List<String> downloaded_trackers, List<String> installed_trackers, List<String> install_trackers, List<String> active_trackers, ByteString unknownFields) {
        super(ADAPTER, unknownFields);
        this.click_trackers = Internal.immutableCopyOf("click_trackers", click_trackers);
        this.imp_trackers = Internal.immutableCopyOf("imp_trackers", imp_trackers);
        this.dplk_trackers = Internal.immutableCopyOf("dplk_trackers", dplk_trackers);
        this.nurls = Internal.immutableCopyOf("nurls", nurls);
        this.lurls = Internal.immutableCopyOf("lurls", lurls);
        this.dplk_fail_trackers = Internal.immutableCopyOf("dplk_fail_trackers", dplk_fail_trackers);
        this.dplk_try_trackers = Internal.immutableCopyOf("dplk_try_trackers", dplk_try_trackers);
        this.player_start_trackers = Internal.immutableCopyOf("player_start_trackers", player_start_trackers);
        this.nurl = nurl;
        this.player_end_trackers = Internal.immutableCopyOf("player_end_trackers", player_end_trackers);
        this.player_valid_trackers = Internal.immutableCopyOf("player_valid_trackers", player_valid_trackers);
        this.player_first_quartile_trackers = Internal.immutableCopyOf("player_first_quartile_trackers", player_first_quartile_trackers);
        this.player_midpoint_trackers = Internal.immutableCopyOf("player_midpoint_trackers", player_midpoint_trackers);
        this.player_third_quartile_trackers = Internal.immutableCopyOf("player_third_quartile_trackers", player_third_quartile_trackers);
        this.download_trackers = Internal.immutableCopyOf("download_trackers", download_trackers);
        this.downloaded_trackers = Internal.immutableCopyOf("downloaded_trackers", downloaded_trackers);
        this.installed_trackers = Internal.immutableCopyOf("installed_trackers", installed_trackers);
        this.install_trackers = Internal.immutableCopyOf("install_trackers", install_trackers);
        this.active_trackers = Internal.immutableCopyOf("active_trackers", active_trackers);
    }

    @Override
    public Builder newBuilder() {
        Builder builder = new Builder();
        builder.click_trackers = Internal.copyOf("click_trackers", click_trackers);
        builder.imp_trackers = Internal.copyOf("imp_trackers", imp_trackers);
        builder.dplk_trackers = Internal.copyOf("dplk_trackers", dplk_trackers);
        builder.nurls = Internal.copyOf("nurls", nurls);
        builder.lurls = Internal.copyOf("lurls", lurls);
        builder.dplk_fail_trackers = Internal.copyOf("dplk_fail_trackers", dplk_fail_trackers);
        builder.dplk_try_trackers = Internal.copyOf("dplk_try_trackers", dplk_try_trackers);
        builder.player_start_trackers = Internal.copyOf("player_start_trackers", player_start_trackers);
        builder.nurl = nurl;
        builder.player_end_trackers = Internal.copyOf("player_end_trackers", player_end_trackers);
        builder.player_valid_trackers = Internal.copyOf("player_valid_trackers", player_valid_trackers);
        builder.player_first_quartile_trackers = Internal.copyOf("player_first_quartile_trackers", player_first_quartile_trackers);
        builder.player_midpoint_trackers = Internal.copyOf("player_midpoint_trackers", player_midpoint_trackers);
        builder.player_third_quartile_trackers = Internal.copyOf("player_third_quartile_trackers", player_third_quartile_trackers);
        builder.download_trackers = Internal.copyOf("download_trackers", download_trackers);
        builder.downloaded_trackers = Internal.copyOf("downloaded_trackers", downloaded_trackers);
        builder.installed_trackers = Internal.copyOf("installed_trackers", installed_trackers);
        builder.install_trackers = Internal.copyOf("install_trackers", install_trackers);
        builder.active_trackers = Internal.copyOf("active_trackers", active_trackers);
        builder.addUnknownFields(unknownFields());
        return builder;
    }

    @Override
    public boolean equals(Object other) {
        if (other == this) return true;
        if (!(other instanceof Tracking)) return false;
        Tracking o = (Tracking) other;
        return unknownFields().equals(o.unknownFields()) && click_trackers.equals(o.click_trackers) && imp_trackers.equals(o.imp_trackers) && dplk_trackers.equals(o.dplk_trackers) && nurls.equals(o.nurls) && lurls.equals(o.lurls) && dplk_fail_trackers.equals(o.dplk_fail_trackers) && dplk_try_trackers.equals(o.dplk_try_trackers) && player_start_trackers.equals(o.player_start_trackers) && Internal.equals(nurl, o.nurl) && player_end_trackers.equals(o.player_end_trackers) && player_valid_trackers.equals(o.player_valid_trackers) && player_first_quartile_trackers.equals(o.player_first_quartile_trackers) && player_midpoint_trackers.equals(o.player_midpoint_trackers) && player_third_quartile_trackers.equals(o.player_third_quartile_trackers) && download_trackers.equals(o.download_trackers) && downloaded_trackers.equals(o.downloaded_trackers) && installed_trackers.equals(o.installed_trackers) && install_trackers.equals(o.install_trackers) && active_trackers.equals(o.active_trackers);
    }

    @Override
    public int hashCode() {
        int result = super.hashCode;
        if (result == 0) {
            result = unknownFields().hashCode();
            result = result * 37 + click_trackers.hashCode();
            result = result * 37 + imp_trackers.hashCode();
            result = result * 37 + dplk_trackers.hashCode();
            result = result * 37 + nurls.hashCode();
            result = result * 37 + lurls.hashCode();
            result = result * 37 + dplk_fail_trackers.hashCode();
            result = result * 37 + dplk_try_trackers.hashCode();
            result = result * 37 + player_start_trackers.hashCode();
            result = result * 37 + (nurl != null ? nurl.hashCode() : 0);
            result = result * 37 + player_end_trackers.hashCode();
            result = result * 37 + player_valid_trackers.hashCode();
            result = result * 37 + player_first_quartile_trackers.hashCode();
            result = result * 37 + player_midpoint_trackers.hashCode();
            result = result * 37 + player_third_quartile_trackers.hashCode();
            result = result * 37 + download_trackers.hashCode();
            result = result * 37 + downloaded_trackers.hashCode();
            result = result * 37 + installed_trackers.hashCode();
            result = result * 37 + install_trackers.hashCode();
            result = result * 37 + active_trackers.hashCode();
            super.hashCode = result;
        }
        return result;
    }

    @Override
    public String toString() {
        StringBuilder builder = new StringBuilder();
        if (!click_trackers.isEmpty()) builder.append(", click_trackers=").append(click_trackers);
        if (!imp_trackers.isEmpty()) builder.append(", imp_trackers=").append(imp_trackers);
        if (!dplk_trackers.isEmpty()) builder.append(", dplk_trackers=").append(dplk_trackers);
        if (!nurls.isEmpty()) builder.append(", nurls=").append(nurls);
        if (!lurls.isEmpty()) builder.append(", lurls=").append(lurls);
        if (!dplk_fail_trackers.isEmpty())
            builder.append(", dplk_fail_trackers=").append(dplk_fail_trackers);
        if (!dplk_try_trackers.isEmpty())
            builder.append(", dplk_try_trackers=").append(dplk_try_trackers);
        if (!player_start_trackers.isEmpty())
            builder.append(", player_start_trackers=").append(player_start_trackers);
        if (nurl != null) builder.append(", nurl=").append(nurl);
        if (!player_end_trackers.isEmpty())
            builder.append(", player_end_trackers=").append(player_end_trackers);
        if (!player_valid_trackers.isEmpty())
            builder.append(", player_valid_trackers=").append(player_valid_trackers);
        if (!player_first_quartile_trackers.isEmpty())
            builder.append(", player_first_quartile_trackers=").append(player_first_quartile_trackers);
        if (!player_midpoint_trackers.isEmpty())
            builder.append(", player_midpoint_trackers=").append(player_midpoint_trackers);
        if (!player_third_quartile_trackers.isEmpty())
            builder.append(", player_third_quartile_trackers=").append(player_third_quartile_trackers);
        if (!download_trackers.isEmpty())
            builder.append(", download_trackers=").append(download_trackers);
        if (!downloaded_trackers.isEmpty())
            builder.append(", downloaded_trackers=").append(downloaded_trackers);
        if (!installed_trackers.isEmpty())
            builder.append(", installed_trackers=").append(installed_trackers);
        if (!install_trackers.isEmpty())
            builder.append(", install_trackers=").append(install_trackers);
        if (!active_trackers.isEmpty())
            builder.append(", active_trackers=").append(active_trackers);
        return builder.replace(0, 2, "Tracking{").append('}').toString();
    }

    public static final class Builder extends Message.Builder<Tracking, Builder> {
        public List<String> click_trackers;

        public List<String> imp_trackers;

        public List<String> dplk_trackers;

        public List<String> nurls;

        public List<String> lurls;

        public List<String> dplk_fail_trackers;

        public List<String> dplk_try_trackers;

        public List<String> player_start_trackers;

        public String nurl;

        public List<String> player_end_trackers;

        public List<String> player_valid_trackers;

        public List<String> player_first_quartile_trackers;

        public List<String> player_midpoint_trackers;

        public List<String> player_third_quartile_trackers;

        public List<String> download_trackers;

        public List<String> downloaded_trackers;

        public List<String> installed_trackers;

        public List<String> install_trackers;

        public List<String> active_trackers;

        public Builder() {
            click_trackers = Internal.newMutableList();
            imp_trackers = Internal.newMutableList();
            dplk_trackers = Internal.newMutableList();
            nurls = Internal.newMutableList();
            lurls = Internal.newMutableList();
            dplk_fail_trackers = Internal.newMutableList();
            dplk_try_trackers = Internal.newMutableList();
            player_start_trackers = Internal.newMutableList();
            player_end_trackers = Internal.newMutableList();
            player_valid_trackers = Internal.newMutableList();
            player_first_quartile_trackers = Internal.newMutableList();
            player_midpoint_trackers = Internal.newMutableList();
            player_third_quartile_trackers = Internal.newMutableList();
            download_trackers = Internal.newMutableList();
            downloaded_trackers = Internal.newMutableList();
            installed_trackers = Internal.newMutableList();
            install_trackers = Internal.newMutableList();
            active_trackers = Internal.newMutableList();
        }

        /**
         * 点击跟踪器
         */
        public Builder click_trackers(List<String> click_trackers) {
            Internal.checkElementsNotNull(click_trackers);
            this.click_trackers = click_trackers;
            return this;
        }

        /**
         * 展示跟踪器
         */
        public Builder imp_trackers(List<String> imp_trackers) {
            Internal.checkElementsNotNull(imp_trackers);
            this.imp_trackers = imp_trackers;
            return this;
        }

        /**
         * 用 deeplink 唤醒成功后上报
         */
        public Builder dplk_trackers(List<String> dplk_trackers) {
            Internal.checkElementsNotNull(dplk_trackers);
            this.dplk_trackers = dplk_trackers;
            return this;
        }

        /**
         * 竞胜时候上报
         */
        public Builder nurls(List<String> nurls) {
            Internal.checkElementsNotNull(nurls);
            this.nurls = nurls;
            return this;
        }

        /**
         * 竞败时候上报
         */
        public Builder lurls(List<String> lurls) {
            Internal.checkElementsNotNull(lurls);
            this.lurls = lurls;
            return this;
        }

        /**
         * 用 deeplink 唤醒失败后上报
         */
        public Builder dplk_fail_trackers(List<String> dplk_fail_trackers) {
            Internal.checkElementsNotNull(dplk_fail_trackers);
            this.dplk_fail_trackers = dplk_fail_trackers;
            return this;
        }

        /**
         * 开始用 deeplink 尝试唤醒时上报
         */
        public Builder dplk_try_trackers(List<String> dplk_try_trackers) {
            Internal.checkElementsNotNull(dplk_try_trackers);
            this.dplk_try_trackers = dplk_try_trackers;
            return this;
        }

        /**
         * 视频开始播放监测 URL，在视频开始播放时上报
         */
        public Builder player_start_trackers(List<String> player_start_trackers) {
            Internal.checkElementsNotNull(player_start_trackers);
            this.player_start_trackers = player_start_trackers;
            return this;
        }

        /**
         * 兼容旧的
         */
        public Builder nurl(String nurl) {
            this.nurl = nurl;
            return this;
        }

        /**
         * 视频播放完成监测 URL，在视频播放完成时上报
         */
        public Builder player_end_trackers(List<String> player_end_trackers) {
            Internal.checkElementsNotNull(player_end_trackers);
            this.player_end_trackers = player_end_trackers;
            return this;
        }

        /**
         * 视频有效播放监测 URL，在视频播放时长过半时上报
         */
        public Builder player_valid_trackers(List<String> player_valid_trackers) {
            Internal.checkElementsNotNull(player_valid_trackers);
            this.player_valid_trackers = player_valid_trackers;
            return this;
        }

        /**
         * 视频播放 1/4 追踪 url 数组
         */
        public Builder player_first_quartile_trackers(List<String> player_first_quartile_trackers) {
            Internal.checkElementsNotNull(player_first_quartile_trackers);
            this.player_first_quartile_trackers = player_first_quartile_trackers;
            return this;
        }

        /**
         * 视频播放 1/2 追踪 url 数组
         */
        public Builder player_midpoint_trackers(List<String> player_midpoint_trackers) {
            Internal.checkElementsNotNull(player_midpoint_trackers);
            this.player_midpoint_trackers = player_midpoint_trackers;
            return this;
        }

        /**
         * 视频播放 3/4 追踪 url 数组
         */
        public Builder player_third_quartile_trackers(List<String> player_third_quartile_trackers) {
            Internal.checkElementsNotNull(player_third_quartile_trackers);
            this.player_third_quartile_trackers = player_third_quartile_trackers;
            return this;
        }

        /**
         * 通过广告开始下载时上报
         */
        public Builder download_trackers(List<String> download_trackers) {
            Internal.checkElementsNotNull(download_trackers);
            this.download_trackers = download_trackers;
            return this;
        }

        /**
         * 通过广告完成下载时上报
         */
        public Builder downloaded_trackers(List<String> downloaded_trackers) {
            Internal.checkElementsNotNull(downloaded_trackers);
            this.downloaded_trackers = downloaded_trackers;
            return this;
        }

        /**
         * 通过广告下载并完成安装时上报
         */
        public Builder installed_trackers(List<String> installed_trackers) {
            Internal.checkElementsNotNull(installed_trackers);
            this.installed_trackers = installed_trackers;
            return this;
        }

        /**
         * 开始安装上报数组
         */
        public Builder install_trackers(List<String> install_trackers) {
            Internal.checkElementsNotNull(install_trackers);
            this.install_trackers = install_trackers;
            return this;
        }

        /**
         * 安装后激活打开App后上报数组
         */
        public Builder active_trackers(List<String> active_trackers) {
            Internal.checkElementsNotNull(active_trackers);
            this.active_trackers = active_trackers;
            return this;
        }

        @Override
        public Tracking build() {
            return new Tracking(click_trackers, imp_trackers, dplk_trackers, nurls, lurls, dplk_fail_trackers, dplk_try_trackers, player_start_trackers, nurl, player_end_trackers, player_valid_trackers, player_first_quartile_trackers, player_midpoint_trackers, player_third_quartile_trackers, download_trackers, downloaded_trackers, installed_trackers, install_trackers, active_trackers, super.buildUnknownFields());
        }
    }

    private static final class ProtoAdapter_Tracking extends ProtoAdapter<Tracking> {
        public ProtoAdapter_Tracking() {
            super(FieldEncoding.LENGTH_DELIMITED, Tracking.class);
        }

        @Override
        public int encodedSize(Tracking value) {
            return ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(1, value.click_trackers) + ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(2, value.imp_trackers) + ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(3, value.dplk_trackers) + ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(4, value.nurls) + ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(5, value.lurls) + ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(6, value.dplk_fail_trackers) + ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(7, value.dplk_try_trackers) + ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(8, value.player_start_trackers) + ProtoAdapter.STRING.encodedSizeWithTag(9, value.nurl) + ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(10, value.player_end_trackers) + ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(11, value.player_valid_trackers) + ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(12, value.player_first_quartile_trackers) + ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(13, value.player_midpoint_trackers) + ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(14, value.player_third_quartile_trackers) + ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(15, value.download_trackers) + ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(16, value.downloaded_trackers) + ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(17, value.installed_trackers) + ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(18, value.install_trackers) + ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(19, value.active_trackers) + value.unknownFields().size();
        }

        @Override
        public void encode(ProtoWriter writer, Tracking value) throws IOException {
            ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 1, value.click_trackers);
            ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 2, value.imp_trackers);
            ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 3, value.dplk_trackers);
            ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 4, value.nurls);
            ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 5, value.lurls);
            ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 6, value.dplk_fail_trackers);
            ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 7, value.dplk_try_trackers);
            ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 8, value.player_start_trackers);
            ProtoAdapter.STRING.encodeWithTag(writer, 9, value.nurl);
            ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 10, value.player_end_trackers);
            ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 11, value.player_valid_trackers);
            ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 12, value.player_first_quartile_trackers);
            ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 13, value.player_midpoint_trackers);
            ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 14, value.player_third_quartile_trackers);
            ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 15, value.download_trackers);
            ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 16, value.downloaded_trackers);
            ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 17, value.installed_trackers);
            ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 18, value.install_trackers);
            ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 19, value.active_trackers);
            writer.writeBytes(value.unknownFields());
        }

        @Override
        public Tracking decode(ProtoReader reader) throws IOException {
            Builder builder = new Builder();
            long token = reader.beginMessage();
            for (int tag; (tag = reader.nextTag()) != -1; ) {
                switch (tag) {
                    case 1:
                        builder.click_trackers.add(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 2:
                        builder.imp_trackers.add(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 3:
                        builder.dplk_trackers.add(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 4:
                        builder.nurls.add(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 5:
                        builder.lurls.add(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 6:
                        builder.dplk_fail_trackers.add(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 7:
                        builder.dplk_try_trackers.add(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 8:
                        builder.player_start_trackers.add(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 9:
                        builder.nurl(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 10:
                        builder.player_end_trackers.add(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 11:
                        builder.player_valid_trackers.add(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 12:
                        builder.player_first_quartile_trackers.add(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 13:
                        builder.player_midpoint_trackers.add(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 14:
                        builder.player_third_quartile_trackers.add(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 15:
                        builder.download_trackers.add(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 16:
                        builder.downloaded_trackers.add(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 17:
                        builder.installed_trackers.add(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 18:
                        builder.install_trackers.add(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 19:
                        builder.active_trackers.add(ProtoAdapter.STRING.decode(reader));
                        break;
                    default: {
                        FieldEncoding fieldEncoding = reader.peekFieldEncoding();
                        Object value = fieldEncoding.rawProtoAdapter().decode(reader);
                        builder.addUnknownField(tag, fieldEncoding, value);
                    }
                }
            }
            reader.endMessage(token);
            return builder.build();
        }

        @Override
        public Tracking redact(Tracking value) {
            Builder builder = value.newBuilder();
            builder.clearUnknownFields();
            return builder.build();
        }
    }
}
