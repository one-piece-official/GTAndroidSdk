// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: gt_ad_request.proto
package com.gt.sdk.base.models;

import android.os.Parcelable;

import com.czhj.wire.AndroidMessage;
import com.czhj.wire.FieldEncoding;
import com.czhj.wire.Message;
import com.czhj.wire.ProtoAdapter;
import com.czhj.wire.ProtoReader;
import com.czhj.wire.ProtoWriter;
import com.czhj.wire.WireField;
import com.czhj.wire.internal.Internal;
import com.czhj.wire.okio.ByteString;

import java.io.IOException;
import java.util.List;

/**
 * 内部竞价请求
 */
public final class BidRequest extends AndroidMessage<BidRequest, BidRequest.Builder> {

    public static final ProtoAdapter<BidRequest> ADAPTER = new ProtoAdapter_BidRequest();

    public static final Parcelable.Creator<BidRequest> CREATOR = AndroidMessage.newCreator(ADAPTER);

    private static final long serialVersionUID = 0L;

    public static final String DEFAULT_TOKEN = "";

    public static final String DEFAULT_ID = "";

    /**
     * 内部生成；请求唯一标识，[a-zA-Z0-9]{32}
     */
    @WireField(tag = 1, adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final String token;

    /**
     * 内部生成；请求唯一标识，[a-zA-Z0-9]{32}
     */
    @WireField(tag = 2, adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final String id;

    /**
     * 内部生成；请求唯一标识，[a-zA-Z0-9]{32}
     */
    @WireField(tag = 3, adapter = "com.gt.sdk.base.models.Imp#ADAPTER", label = WireField.Label.REPEATED)
    public final List<Imp> imp;

    /**
     * 必填！应用信息
     */
    @WireField(tag = 4, adapter = "com.gt.sdk.base.models.App#ADAPTER")
    public final App app;

    /**
     * 必填！设备信息
     */
    @WireField(tag = 5, adapter = "com.gt.sdk.base.models.Device#ADAPTER")
    public final Device device;

    /**
     * 用户信息
     */
    @WireField(tag = 6, adapter = "com.gt.sdk.base.models.User#ADAPTER")
    public final User user;

    public BidRequest(String token, String id, List<Imp> imp, App app, Device device, User user) {
        this(token, id, imp, app, device, user, ByteString.EMPTY);
    }

    public BidRequest(String token, String id, List<Imp> imp, App app, Device device, User user, ByteString unknownFields) {
        super(ADAPTER, unknownFields);
        this.token = token;
        this.id = id;
        this.imp = Internal.immutableCopyOf("imp", imp);
        this.app = app;
        this.device = device;
        this.user = user;
    }

    @Override
    public Builder newBuilder() {
        Builder builder = new Builder();
        builder.token = token;
        builder.id = id;
        builder.imp = Internal.copyOf("imp", imp);
        builder.app = app;
        builder.device = device;
        builder.user = user;
        builder.addUnknownFields(unknownFields());
        return builder;
    }

    @Override
    public boolean equals(Object other) {
        if (other == this) return true;
        if (!(other instanceof BidRequest)) return false;
        BidRequest o = (BidRequest) other;
        return unknownFields().equals(o.unknownFields()) && Internal.equals(token, o.token) && Internal.equals(id, o.id) && imp.equals(o.imp) && Internal.equals(app, o.app) && Internal.equals(device, o.device) && Internal.equals(user, o.user);
    }

    @Override
    public int hashCode() {
        int result = super.hashCode;
        if (result == 0) {
            result = unknownFields().hashCode();
            result = result * 37 + (token != null ? token.hashCode() : 0);
            result = result * 37 + (id != null ? id.hashCode() : 0);
            result = result * 37 + imp.hashCode();
            result = result * 37 + (app != null ? app.hashCode() : 0);
            result = result * 37 + (device != null ? device.hashCode() : 0);
            result = result * 37 + (user != null ? user.hashCode() : 0);
            super.hashCode = result;
        }
        return result;
    }

    @Override
    public String toString() {
        StringBuilder builder = new StringBuilder();
        if (token != null) builder.append(", token=").append(token);
        if (id != null) builder.append(", id=").append(id);
        if (!imp.isEmpty()) builder.append(", imp=").append(imp);
        if (app != null) builder.append(", app=").append(app);
        if (device != null) builder.append(", device=").append(device);
        if (user != null) builder.append(", user=").append(user);
        return builder.replace(0, 2, "BidRequest{").append('}').toString();
    }

    public static final class Builder extends Message.Builder<BidRequest, Builder> {
        public String token = DEFAULT_TOKEN;

        public String id = DEFAULT_ID;

        public List<Imp> imp;

        public App app;

        public Device device;

        public User user;

        public Builder() {
            imp = Internal.newMutableList();
        }

        /**
         * 内部生成；请求唯一标识，[a-zA-Z0-9]{32}
         */
        public Builder token(String token) {
            this.token = token;
            return this;
        }

        /**
         * 内部生成；请求唯一标识，[a-zA-Z0-9]{32}
         */
        public Builder id(String id) {
            this.id = id;
            return this;
        }

        /**
         * 内部生成；请求唯一标识，[a-zA-Z0-9]{32}
         */
        public Builder imp(List<Imp> imp) {
            Internal.checkElementsNotNull(imp);
            this.imp = imp;
            return this;
        }

        /**
         * 必填！应用信息
         */
        public Builder app(App app) {
            this.app = app;
            return this;
        }

        /**
         * 必填！设备信息
         */
        public Builder device(Device device) {
            this.device = device;
            return this;
        }

        /**
         * 用户信息
         */
        public Builder user(User user) {
            this.user = user;
            return this;
        }

        @Override
        public BidRequest build() {
            return new BidRequest(token, id, imp, app, device, user, super.buildUnknownFields());
        }
    }

    private static final class ProtoAdapter_BidRequest extends ProtoAdapter<BidRequest> {
        public ProtoAdapter_BidRequest() {
            super(FieldEncoding.LENGTH_DELIMITED, BidRequest.class);
        }

        @Override
        public int encodedSize(BidRequest value) {
            return ProtoAdapter.STRING.encodedSizeWithTag(1, value.token) + ProtoAdapter.STRING.encodedSizeWithTag(2, value.id) + Imp.ADAPTER.asRepeated().encodedSizeWithTag(3, value.imp) + App.ADAPTER.encodedSizeWithTag(4, value.app) + Device.ADAPTER.encodedSizeWithTag(5, value.device) + User.ADAPTER.encodedSizeWithTag(6, value.user) + value.unknownFields().size();
        }

        @Override
        public void encode(ProtoWriter writer, BidRequest value) throws IOException {
            ProtoAdapter.STRING.encodeWithTag(writer, 1, value.token);
            ProtoAdapter.STRING.encodeWithTag(writer, 2, value.id);
            Imp.ADAPTER.asRepeated().encodeWithTag(writer, 3, value.imp);
            App.ADAPTER.encodeWithTag(writer, 4, value.app);
            Device.ADAPTER.encodeWithTag(writer, 5, value.device);
            User.ADAPTER.encodeWithTag(writer, 6, value.user);
            writer.writeBytes(value.unknownFields());
        }

        @Override
        public BidRequest decode(ProtoReader reader) throws IOException {
            Builder builder = new Builder();
            long token = reader.beginMessage();
            for (int tag; (tag = reader.nextTag()) != -1; ) {
                switch (tag) {
                    case 1:
                        builder.token(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 2:
                        builder.id(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 3:
                        builder.imp.add(Imp.ADAPTER.decode(reader));
                        break;
                    case 4:
                        builder.app(App.ADAPTER.decode(reader));
                        break;
                    case 5:
                        builder.device(Device.ADAPTER.decode(reader));
                        break;
                    case 6:
                        builder.user(User.ADAPTER.decode(reader));
                        break;
                    default: {
                        FieldEncoding fieldEncoding = reader.peekFieldEncoding();
                        Object value = fieldEncoding.rawProtoAdapter().decode(reader);
                        builder.addUnknownField(tag, fieldEncoding, value);
                    }
                }
            }
            reader.endMessage(token);
            return builder.build();
        }

        @Override
        public BidRequest redact(BidRequest value) {
            Builder builder = value.newBuilder();
            Internal.redactElements(builder.imp, Imp.ADAPTER);
            if (builder.app != null) builder.app = App.ADAPTER.redact(builder.app);
            if (builder.device != null) builder.device = Device.ADAPTER.redact(builder.device);
            if (builder.user != null) builder.user = User.ADAPTER.redact(builder.user);
            builder.clearUnknownFields();
            return builder.build();
        }
    }
}
