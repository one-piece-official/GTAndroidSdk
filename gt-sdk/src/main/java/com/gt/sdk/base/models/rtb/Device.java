// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: gt_common.proto
package com.gt.sdk.base.models.rtb;

import android.os.Parcelable;

import com.czhj.wire.AndroidMessage;
import com.czhj.wire.FieldEncoding;
import com.czhj.wire.Message;
import com.czhj.wire.ProtoAdapter;
import com.czhj.wire.ProtoReader;
import com.czhj.wire.ProtoWriter;
import com.czhj.wire.WireField;
import com.czhj.wire.internal.Internal;
import com.czhj.wire.okio.ByteString;

import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;


public final class Device extends AndroidMessage<Device, Device.Builder> {
    public static final ProtoAdapter<Device> ADAPTER = new ProtoAdapter_Device();

    public static final Parcelable.Creator<Device> CREATOR = AndroidMessage.newCreator(ADAPTER);

    private static final long serialVersionUID = 0L;

    public static final Integer DEFAULT_CARRIER = 0;

    public static final Integer DEFAULT_CONNECTIONTYPE = 0;

    public static final Integer DEFAULT_DEVICETYPE = 0;

    public static final String DEFAULT_DID = "";

    public static final String DEFAULT_DIDMD5 = "";

    public static final String DEFAULT_IFAMD5 = "";

    public static final String DEFAULT_DPID = "";

    public static final String DEFAULT_DPIDMD5 = "";

    public static final Integer DEFAULT_H = 0;

    public static final String DEFAULT_HWV = "";

    public static final String DEFAULT_IP = "";

    public static final String DEFAULT_OID = "";

    public static final String DEFAULT_OIDMD5 = "";

    public static final String DEFAULT_IFA = "";

    public static final String DEFAULT_IPV6 = "";

    public static final String DEFAULT_MAKE = "";

    public static final String DEFAULT_MODEL = "";

    public static final Integer DEFAULT_OS = 0;

    public static final String DEFAULT_OSV = "";

    public static final Integer DEFAULT_PPI = 0;

    public static final String DEFAULT_UA = "";

    public static final Integer DEFAULT_W = 0;

    public static final String DEFAULT_MAC = "";

    public static final String DEFAULT_MACMD5 = "";

    public static final String DEFAULT_SSID = "";

    public static final String DEFAULT_WIFI_MAC = "";

    public static final String DEFAULT_ROM_VERSION = "";

    public static final String DEFAULT_UPDATE_MARK = "";

    public static final String DEFAULT_UPDATE_TIME = "";

    public static final String DEFAULT_BOOT_MARK = "";

    public static final String DEFAULT_BOOT_TIME = "";

    public static final String DEFAULT_SYS_COMPILING_TIME = "";

    public static final String DEFAULT_BIRTH_TIME = "";

    public static final String DEFAULT_PAID_1_4 = "";

    public static final String DEFAULT_HMS_VER = "";

    public static final String DEFAULT_HWAG_VER = "";

    public static final String DEFAULT_CAID = "";

    public static final String DEFAULT_CAID_MD5 = "";

    public static final String DEFAULT_CAID_VERSION = "";

    public static final String DEFAULT_DEVICE_NAME_MD5 = "";

    public static final String DEFAULT_HARDWARE_MACHINE = "";

    public static final String DEFAULT_PHYSICAL_MEMORY = "";

    public static final String DEFAULT_HARD_DISK_SIZE = "";

    public static final String DEFAULT_COUNTRY = "";

    public static final String DEFAULT_LANGUAGE = "";

    public static final String DEFAULT_TIME_ZONE = "";

    public static final String DEFAULT_CPU_NUM = "";

    /**
     * 运营商名称 - 1：中国移动 2：联通 3：电信 0：未知
     */
    @WireField(tag = 1, adapter = "com.squareup.wire.ProtoAdapter#INT32")
    public final Integer carrier;

    /**
     * 设备链接类型 - 0：Unknown 1：Ethernet 2：WiFi 3：Cellular Network-Unk 4：2G 5：3G 6：4G 7：5G
     */
    @WireField(tag = 2, adapter = "com.squareup.wire.ProtoAdapter#INT32")
    public final Integer connectiontype;

    /**
     * 设备类型 - 1：手机 2：平板 3:  电脑 4:  智能电视 0:  未知
     */
    @WireField(tag = 3, adapter = "com.squareup.wire.ProtoAdapter#INT32")
    public final Integer devicetype;

    /**
     * Android 设备的 IMEI
     */
    @WireField(tag = 4, adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final String did;

    /**
     * Android 设备的 IMEI 使用 MD5 后的值
     */
    @WireField(tag = 5, adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final String didmd5;

    /**
     * iOS设备的IDFA使用MD5后的值
     */
    @WireField(tag = 6, adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final String ifamd5;

    /**
     * Android 设备 Android ID
     */
    @WireField(tag = 7, adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final String dpid;

    /**
     * Android 设备 Android ID 使用 MD5 后的值
     */
    @WireField(tag = 8, adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final String dpidmd5;

    /**
     * 设备的位置信息
     */
    @WireField(tag = 9, adapter = "com.gt.sdk.base.models.rtb.Geo#ADAPTER")
    public final Geo geo;

    /**
     * 屏幕的物理高度，单位：px
     */
    @WireField(tag = 10, adapter = "com.squareup.wire.ProtoAdapter#INT32")
    public final Integer h;

    /**
     * 硬件版本, 如 "HUAWEI R9"
     */
    @WireField(tag = 11, adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final String hwv;

    /**
     * 设备 IP 地址
     */
    @WireField(tag = 12, adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final String ip;

    /**
     * Android 设备的 OAID 明文
     */
    @WireField(tag = 13, adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final String oid;

    /**
     * Android 设备的 OAID 使用MD5后的值
     */
    @WireField(tag = 14, adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final String oidmd5;

    /**
     * iOS 设备的 IDFA，需大写
     */
    @WireField(tag = 15, adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final String ifa;

    /**
     * 设备 IPv6 地址
     */
    @WireField(tag = 16, adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final String ipv6;

    /**
     * 设备品牌 Android取Build.BRAND，可用Build.MANUFACTURE代替，但效果会变差；iOS使用默认值Apple Android例子：Honor
     */
    @WireField(tag = 17, adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final String make;

    /**
     * 设备型号，Android取Build.MODEL Android例子：Che1-CL20 iOS例子：iPhone4,1
     */
    @WireField(tag = 18, adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final String model;

    /**
     * 操作系统 1 :Android, 2 : ios
     */
    @WireField(tag = 19, adapter = "com.squareup.wire.ProtoAdapter#INT32")
    public final Integer os;

    /**
     * 操作系统硬件版本，Android API 等级（例如：28）
     */
    @WireField(tag = 20, adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final String osv;

    /**
     * 每英寸像素个数，单位：ppi
     */
    @WireField(tag = 21, adapter = "com.squareup.wire.ProtoAdapter#INT32")
    public final Integer ppi;

    /**
     * User Agent，需使用系统 webview 的 ua
     */
    @WireField(tag = 22, adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final String ua;

    /**
     * 屏幕的物理宽度，单位：px
     */
    @WireField(tag = 23, adapter = "com.squareup.wire.ProtoAdapter#INT32")
    public final Integer w;

    /**
     * 设备 MAC 地址的 原值
     */
    @WireField(tag = 24, adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final String mac;

    /**
     * 设备 MAC 地址使用 MD5 后的值
     */
    @WireField(tag = 25, adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final String macmd5;

    /**
     * 无线网 ssid 名称
     */
    @WireField(tag = 26, adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final String ssid;

    /**
     * wifi 路由器的 Mac 地址
     */
    @WireField(tag = 27, adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final String wifi_mac;

    /**
     * 手机 ROM 版本
     */
    @WireField(tag = 28, adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final String rom_version;

    /**
     * 用户已安装的app
     */
    @WireField(tag = 29, adapter = "com.squareup.wire.ProtoAdapter#STRING", label = WireField.Label.REPEATED)
    public final List<String> installed_app;

    /**
     * 系统更新标识
     */
    @WireField(tag = 30, adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final String update_mark;

    /**
     * 系统更新时间
     */
    @WireField(tag = 31, adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final String update_time;

    /**
     * 系统启动标识
     */
    @WireField(tag = 32, adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final String boot_mark;

    /**
     * 系统启动时间
     */
    @WireField(tag = 33, adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final String boot_time;

    @WireField(tag = 34, adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final String sys_compiling_time;

    /**
     * 设备启动时间
     */
    @WireField(tag = 35, adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final String birth_time;

    /**
     * 拼多多设备ID
     */
    @WireField(tag = 36, adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final String paid_1_4;

    /**
     * 华为安卓设备的 HMS Core的版本号，保留原始值
     */
    @WireField(tag = 37, adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final String hms_ver;

    /**
     * 华为安卓设备的 AG（应用市场）的版本号，保留原始值
     */
    @WireField(tag = 38, adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final String hwag_ver;

    /**
     * Caid 原值
     */
    @WireField(tag = 39, adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final String caid;

    /**
     * Caid md5 值
     */
    @WireField(tag = 40, adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final String caid_md5;

    /**
     * Caid 的版本
     */
    @WireField(tag = 41, adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final String caid_version;

    /**
     * 设备名称的md5值
     */
    @WireField(tag = 42, adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final String device_name_md5;

    /**
     * 设备machine值，对应model，示例："iPhone10,3"
     */
    @WireField(tag = 43, adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final String hardware_machine;

    /**
     * 物理内存，单位：字节
     */
    @WireField(tag = 44, adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final String physical_memory;

    /**
     * 硬盘大小，单位：字节
     */
    @WireField(tag = 45, adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final String hard_disk_size;

    /**
     * 国家，示例："CN"
     */
    @WireField(tag = 46, adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final String country;

    /**
     * 语言，示例："zh-Hans-CN"
     */
    @WireField(tag = 47, adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final String language;

    /**
     * 时区，示例："28800"
     */
    @WireField(tag = 48, adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final String time_zone;

    /**
     * CPU数目
     */
    @WireField(tag = 49, adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final String cpu_num;

    public Device(Integer carrier, Integer connectiontype, Integer devicetype, String did, String didmd5, String ifamd5, String dpid, String dpidmd5, Geo geo, Integer h, String hwv, String ip, String oid, String oidmd5, String ifa, String ipv6, String make, String model, Integer os, String osv, Integer ppi, String ua, Integer w, String mac, String macmd5, String ssid, String wifi_mac, String rom_version, List<String> installed_app, String update_mark, String update_time, String boot_mark, String boot_time, String sys_compiling_time, String birth_time, String paid_1_4, String hms_ver, String hwag_ver, String caid, String caid_md5, String caid_version, String device_name_md5, String hardware_machine, String physical_memory, String hard_disk_size, String country, String language, String time_zone, String cpu_num) {
        this(carrier, connectiontype, devicetype, did, didmd5, ifamd5, dpid, dpidmd5, geo, h, hwv, ip, oid, oidmd5, ifa, ipv6, make, model, os, osv, ppi, ua, w, mac, macmd5, ssid, wifi_mac, rom_version, installed_app, update_mark, update_time, boot_mark, boot_time, sys_compiling_time, birth_time, paid_1_4, hms_ver, hwag_ver, caid, caid_md5, caid_version, device_name_md5, hardware_machine, physical_memory, hard_disk_size, country, language, time_zone, cpu_num, ByteString.EMPTY);
    }

    public Device(Integer carrier, Integer connectiontype, Integer devicetype, String did, String didmd5, String ifamd5, String dpid, String dpidmd5, Geo geo, Integer h, String hwv, String ip, String oid, String oidmd5, String ifa, String ipv6, String make, String model, Integer os, String osv, Integer ppi, String ua, Integer w, String mac, String macmd5, String ssid, String wifi_mac, String rom_version, List<String> installed_app, String update_mark, String update_time, String boot_mark, String boot_time, String sys_compiling_time, String birth_time, String paid_1_4, String hms_ver, String hwag_ver, String caid, String caid_md5, String caid_version, String device_name_md5, String hardware_machine, String physical_memory, String hard_disk_size, String country, String language, String time_zone, String cpu_num, ByteString unknownFields) {
        super(ADAPTER, unknownFields);
        this.carrier = carrier;
        this.connectiontype = connectiontype;
        this.devicetype = devicetype;
        this.did = did;
        this.didmd5 = didmd5;
        this.ifamd5 = ifamd5;
        this.dpid = dpid;
        this.dpidmd5 = dpidmd5;
        this.geo = geo;
        this.h = h;
        this.hwv = hwv;
        this.ip = ip;
        this.oid = oid;
        this.oidmd5 = oidmd5;
        this.ifa = ifa;
        this.ipv6 = ipv6;
        this.make = make;
        this.model = model;
        this.os = os;
        this.osv = osv;
        this.ppi = ppi;
        this.ua = ua;
        this.w = w;
        this.mac = mac;
        this.macmd5 = macmd5;
        this.ssid = ssid;
        this.wifi_mac = wifi_mac;
        this.rom_version = rom_version;
        this.installed_app = Internal.immutableCopyOf("installed_app", installed_app);
        this.update_mark = update_mark;
        this.update_time = update_time;
        this.boot_mark = boot_mark;
        this.boot_time = boot_time;
        this.sys_compiling_time = sys_compiling_time;
        this.birth_time = birth_time;
        this.paid_1_4 = paid_1_4;
        this.hms_ver = hms_ver;
        this.hwag_ver = hwag_ver;
        this.caid = caid;
        this.caid_md5 = caid_md5;
        this.caid_version = caid_version;
        this.device_name_md5 = device_name_md5;
        this.hardware_machine = hardware_machine;
        this.physical_memory = physical_memory;
        this.hard_disk_size = hard_disk_size;
        this.country = country;
        this.language = language;
        this.time_zone = time_zone;
        this.cpu_num = cpu_num;
    }

    @Override
    public Builder newBuilder() {
        Builder builder = new Builder();
        builder.carrier = carrier;
        builder.connectiontype = connectiontype;
        builder.devicetype = devicetype;
        builder.did = did;
        builder.didmd5 = didmd5;
        builder.ifamd5 = ifamd5;
        builder.dpid = dpid;
        builder.dpidmd5 = dpidmd5;
        builder.geo = geo;
        builder.h = h;
        builder.hwv = hwv;
        builder.ip = ip;
        builder.oid = oid;
        builder.oidmd5 = oidmd5;
        builder.ifa = ifa;
        builder.ipv6 = ipv6;
        builder.make = make;
        builder.model = model;
        builder.os = os;
        builder.osv = osv;
        builder.ppi = ppi;
        builder.ua = ua;
        builder.w = w;
        builder.mac = mac;
        builder.macmd5 = macmd5;
        builder.ssid = ssid;
        builder.wifi_mac = wifi_mac;
        builder.rom_version = rom_version;
        builder.installed_app = Internal.copyOf("installed_app", installed_app);
        builder.update_mark = update_mark;
        builder.update_time = update_time;
        builder.boot_mark = boot_mark;
        builder.boot_time = boot_time;
        builder.sys_compiling_time = sys_compiling_time;
        builder.birth_time = birth_time;
        builder.paid_1_4 = paid_1_4;
        builder.hms_ver = hms_ver;
        builder.hwag_ver = hwag_ver;
        builder.caid = caid;
        builder.caid_md5 = caid_md5;
        builder.caid_version = caid_version;
        builder.device_name_md5 = device_name_md5;
        builder.hardware_machine = hardware_machine;
        builder.physical_memory = physical_memory;
        builder.hard_disk_size = hard_disk_size;
        builder.country = country;
        builder.language = language;
        builder.time_zone = time_zone;
        builder.cpu_num = cpu_num;
        builder.addUnknownFields(unknownFields());
        return builder;
    }

    @Override
    public boolean equals(Object other) {
        if (other == this) return true;
        if (!(other instanceof Device)) return false;
        Device o = (Device) other;
        return unknownFields().equals(o.unknownFields()) && Internal.equals(carrier, o.carrier) && Internal.equals(connectiontype, o.connectiontype) && Internal.equals(devicetype, o.devicetype) && Internal.equals(did, o.did) && Internal.equals(didmd5, o.didmd5) && Internal.equals(ifamd5, o.ifamd5) && Internal.equals(dpid, o.dpid) && Internal.equals(dpidmd5, o.dpidmd5) && Internal.equals(geo, o.geo) && Internal.equals(h, o.h) && Internal.equals(hwv, o.hwv) && Internal.equals(ip, o.ip) && Internal.equals(oid, o.oid) && Internal.equals(oidmd5, o.oidmd5) && Internal.equals(ifa, o.ifa) && Internal.equals(ipv6, o.ipv6) && Internal.equals(make, o.make) && Internal.equals(model, o.model) && Internal.equals(os, o.os) && Internal.equals(osv, o.osv) && Internal.equals(ppi, o.ppi) && Internal.equals(ua, o.ua) && Internal.equals(w, o.w) && Internal.equals(mac, o.mac) && Internal.equals(macmd5, o.macmd5) && Internal.equals(ssid, o.ssid) && Internal.equals(wifi_mac, o.wifi_mac) && Internal.equals(rom_version, o.rom_version) && installed_app.equals(o.installed_app) && Internal.equals(update_mark, o.update_mark) && Internal.equals(update_time, o.update_time) && Internal.equals(boot_mark, o.boot_mark) && Internal.equals(boot_time, o.boot_time) && Internal.equals(sys_compiling_time, o.sys_compiling_time) && Internal.equals(birth_time, o.birth_time) && Internal.equals(paid_1_4, o.paid_1_4) && Internal.equals(hms_ver, o.hms_ver) && Internal.equals(hwag_ver, o.hwag_ver) && Internal.equals(caid, o.caid) && Internal.equals(caid_md5, o.caid_md5) && Internal.equals(caid_version, o.caid_version) && Internal.equals(device_name_md5, o.device_name_md5) && Internal.equals(hardware_machine, o.hardware_machine) && Internal.equals(physical_memory, o.physical_memory) && Internal.equals(hard_disk_size, o.hard_disk_size) && Internal.equals(country, o.country) && Internal.equals(language, o.language) && Internal.equals(time_zone, o.time_zone) && Internal.equals(cpu_num, o.cpu_num);
    }

    @Override
    public int hashCode() {
        int result = super.hashCode;
        if (result == 0) {
            result = unknownFields().hashCode();
            result = result * 37 + (carrier != null ? carrier.hashCode() : 0);
            result = result * 37 + (connectiontype != null ? connectiontype.hashCode() : 0);
            result = result * 37 + (devicetype != null ? devicetype.hashCode() : 0);
            result = result * 37 + (did != null ? did.hashCode() : 0);
            result = result * 37 + (didmd5 != null ? didmd5.hashCode() : 0);
            result = result * 37 + (ifamd5 != null ? ifamd5.hashCode() : 0);
            result = result * 37 + (dpid != null ? dpid.hashCode() : 0);
            result = result * 37 + (dpidmd5 != null ? dpidmd5.hashCode() : 0);
            result = result * 37 + (geo != null ? geo.hashCode() : 0);
            result = result * 37 + (h != null ? h.hashCode() : 0);
            result = result * 37 + (hwv != null ? hwv.hashCode() : 0);
            result = result * 37 + (ip != null ? ip.hashCode() : 0);
            result = result * 37 + (oid != null ? oid.hashCode() : 0);
            result = result * 37 + (oidmd5 != null ? oidmd5.hashCode() : 0);
            result = result * 37 + (ifa != null ? ifa.hashCode() : 0);
            result = result * 37 + (ipv6 != null ? ipv6.hashCode() : 0);
            result = result * 37 + (make != null ? make.hashCode() : 0);
            result = result * 37 + (model != null ? model.hashCode() : 0);
            result = result * 37 + (os != null ? os.hashCode() : 0);
            result = result * 37 + (osv != null ? osv.hashCode() : 0);
            result = result * 37 + (ppi != null ? ppi.hashCode() : 0);
            result = result * 37 + (ua != null ? ua.hashCode() : 0);
            result = result * 37 + (w != null ? w.hashCode() : 0);
            result = result * 37 + (mac != null ? mac.hashCode() : 0);
            result = result * 37 + (macmd5 != null ? macmd5.hashCode() : 0);
            result = result * 37 + (ssid != null ? ssid.hashCode() : 0);
            result = result * 37 + (wifi_mac != null ? wifi_mac.hashCode() : 0);
            result = result * 37 + (rom_version != null ? rom_version.hashCode() : 0);
            result = result * 37 + installed_app.hashCode();
            result = result * 37 + (update_mark != null ? update_mark.hashCode() : 0);
            result = result * 37 + (update_time != null ? update_time.hashCode() : 0);
            result = result * 37 + (boot_mark != null ? boot_mark.hashCode() : 0);
            result = result * 37 + (boot_time != null ? boot_time.hashCode() : 0);
            result = result * 37 + (sys_compiling_time != null ? sys_compiling_time.hashCode() : 0);
            result = result * 37 + (birth_time != null ? birth_time.hashCode() : 0);
            result = result * 37 + (paid_1_4 != null ? paid_1_4.hashCode() : 0);
            result = result * 37 + (hms_ver != null ? hms_ver.hashCode() : 0);
            result = result * 37 + (hwag_ver != null ? hwag_ver.hashCode() : 0);
            result = result * 37 + (caid != null ? caid.hashCode() : 0);
            result = result * 37 + (caid_md5 != null ? caid_md5.hashCode() : 0);
            result = result * 37 + (caid_version != null ? caid_version.hashCode() : 0);
            result = result * 37 + (device_name_md5 != null ? device_name_md5.hashCode() : 0);
            result = result * 37 + (hardware_machine != null ? hardware_machine.hashCode() : 0);
            result = result * 37 + (physical_memory != null ? physical_memory.hashCode() : 0);
            result = result * 37 + (hard_disk_size != null ? hard_disk_size.hashCode() : 0);
            result = result * 37 + (country != null ? country.hashCode() : 0);
            result = result * 37 + (language != null ? language.hashCode() : 0);
            result = result * 37 + (time_zone != null ? time_zone.hashCode() : 0);
            result = result * 37 + (cpu_num != null ? cpu_num.hashCode() : 0);
            super.hashCode = result;
        }
        return result;
    }

    @Override
    public String toString() {
        StringBuilder builder = new StringBuilder();
        if (carrier != null) builder.append(", carrier=").append(carrier);
        if (connectiontype != null) builder.append(", connectiontype=").append(connectiontype);
        if (devicetype != null) builder.append(", devicetype=").append(devicetype);
        if (did != null) builder.append(", did=").append(did);
        if (didmd5 != null) builder.append(", didmd5=").append(didmd5);
        if (ifamd5 != null) builder.append(", ifamd5=").append(ifamd5);
        if (dpid != null) builder.append(", dpid=").append(dpid);
        if (dpidmd5 != null) builder.append(", dpidmd5=").append(dpidmd5);
        if (geo != null) builder.append(", geo=").append(geo);
        if (h != null) builder.append(", h=").append(h);
        if (hwv != null) builder.append(", hwv=").append(hwv);
        if (ip != null) builder.append(", ip=").append(ip);
        if (oid != null) builder.append(", oid=").append(oid);
        if (oidmd5 != null) builder.append(", oidmd5=").append(oidmd5);
        if (ifa != null) builder.append(", ifa=").append(ifa);
        if (ipv6 != null) builder.append(", ipv6=").append(ipv6);
        if (make != null) builder.append(", make=").append(make);
        if (model != null) builder.append(", model=").append(model);
        if (os != null) builder.append(", os=").append(os);
        if (osv != null) builder.append(", osv=").append(osv);
        if (ppi != null) builder.append(", ppi=").append(ppi);
        if (ua != null) builder.append(", ua=").append(ua);
        if (w != null) builder.append(", w=").append(w);
        if (mac != null) builder.append(", mac=").append(mac);
        if (macmd5 != null) builder.append(", macmd5=").append(macmd5);
        if (ssid != null) builder.append(", ssid=").append(ssid);
        if (wifi_mac != null) builder.append(", wifi_mac=").append(wifi_mac);
        if (rom_version != null) builder.append(", rom_version=").append(rom_version);
        if (!installed_app.isEmpty()) builder.append(", installed_app=").append(installed_app);
        if (update_mark != null) builder.append(", update_mark=").append(update_mark);
        if (update_time != null) builder.append(", update_time=").append(update_time);
        if (boot_mark != null) builder.append(", boot_mark=").append(boot_mark);
        if (boot_time != null) builder.append(", boot_time=").append(boot_time);
        if (sys_compiling_time != null)
            builder.append(", sys_compiling_time=").append(sys_compiling_time);
        if (birth_time != null) builder.append(", birth_time=").append(birth_time);
        if (paid_1_4 != null) builder.append(", paid_1_4=").append(paid_1_4);
        if (hms_ver != null) builder.append(", hms_ver=").append(hms_ver);
        if (hwag_ver != null) builder.append(", hwag_ver=").append(hwag_ver);
        if (caid != null) builder.append(", caid=").append(caid);
        if (caid_md5 != null) builder.append(", caid_md5=").append(caid_md5);
        if (caid_version != null) builder.append(", caid_version=").append(caid_version);
        if (device_name_md5 != null) builder.append(", device_name_md5=").append(device_name_md5);
        if (hardware_machine != null)
            builder.append(", hardware_machine=").append(hardware_machine);
        if (physical_memory != null) builder.append(", physical_memory=").append(physical_memory);
        if (hard_disk_size != null) builder.append(", hard_disk_size=").append(hard_disk_size);
        if (country != null) builder.append(", country=").append(country);
        if (language != null) builder.append(", language=").append(language);
        if (time_zone != null) builder.append(", time_zone=").append(time_zone);
        if (cpu_num != null) builder.append(", cpu_num=").append(cpu_num);
        return builder.replace(0, 2, "Device{").append('}').toString();
    }

    public static final class Builder extends Message.Builder<Device, Builder> {
        public Integer carrier;

        public Integer connectiontype;

        public Integer devicetype;

        public String did;

        public String didmd5;

        public String ifamd5;

        public String dpid;

        public String dpidmd5;

        public Geo geo;

        public Integer h;

        public String hwv;

        public String ip;

        public String oid;

        public String oidmd5;

        public String ifa;

        public String ipv6;

        public String make;

        public String model;

        public Integer os;

        public String osv;

        public Integer ppi;

        public String ua;

        public Integer w;

        public String mac;

        public String macmd5;

        public String ssid;

        public String wifi_mac;

        public String rom_version;

        public List<String> installed_app;

        public String update_mark;

        public String update_time;

        public String boot_mark;

        public String boot_time;

        public String sys_compiling_time;

        public String birth_time;

        public String paid_1_4;

        public String hms_ver;

        public String hwag_ver;

        public String caid;

        public String caid_md5;

        public String caid_version;

        public String device_name_md5;

        public String hardware_machine;

        public String physical_memory;

        public String hard_disk_size;

        public String country;

        public String language;

        public String time_zone;

        public String cpu_num;

        public Builder() {
            installed_app = Internal.newMutableList();
        }

        /**
         * 运营商名称 - 1：中国移动 2：联通 3：电信 0：未知
         */
        public Builder carrier(Integer carrier) {
            this.carrier = carrier;
            return this;
        }

        /**
         * 设备链接类型 - 0：Unknown 1：Ethernet 2：WiFi 3：Cellular Network-Unk 4：2G 5：3G 6：4G 7：5G
         */
        public Builder connectiontype(Integer connectiontype) {
            this.connectiontype = connectiontype;
            return this;
        }

        /**
         * 设备类型 - 1：手机 2：平板 3:  电脑 4:  智能电视 0:  未知
         */
        public Builder devicetype(Integer devicetype) {
            this.devicetype = devicetype;
            return this;
        }

        /**
         * Android 设备的 IMEI
         */
        public Builder did(String did) {
            this.did = did;
            return this;
        }

        /**
         * Android 设备的 IMEI 使用 MD5 后的值
         */
        public Builder didmd5(String didmd5) {
            this.didmd5 = didmd5;
            return this;
        }

        /**
         * iOS设备的IDFA使用MD5后的值
         */
        public Builder ifamd5(String ifamd5) {
            this.ifamd5 = ifamd5;
            return this;
        }

        /**
         * Android 设备 Android ID
         */
        public Builder dpid(String dpid) {
            this.dpid = dpid;
            return this;
        }

        /**
         * Android 设备 Android ID 使用 MD5 后的值
         */
        public Builder dpidmd5(String dpidmd5) {
            this.dpidmd5 = dpidmd5;
            return this;
        }

        /**
         * 设备的位置信息
         */
        public Builder geo(Geo geo) {
            this.geo = geo;
            return this;
        }

        /**
         * 屏幕的物理高度，单位：px
         */
        public Builder h(Integer h) {
            this.h = h;
            return this;
        }

        /**
         * 硬件版本, 如 "HUAWEI R9"
         */
        public Builder hwv(String hwv) {
            this.hwv = hwv;
            return this;
        }

        /**
         * 设备 IP 地址
         */
        public Builder ip(String ip) {
            this.ip = ip;
            return this;
        }

        /**
         * Android 设备的 OAID 明文
         */
        public Builder oid(String oid) {
            this.oid = oid;
            return this;
        }

        /**
         * Android 设备的 OAID 使用MD5后的值
         */
        public Builder oidmd5(String oidmd5) {
            this.oidmd5 = oidmd5;
            return this;
        }

        /**
         * iOS 设备的 IDFA，需大写
         */
        public Builder ifa(String ifa) {
            this.ifa = ifa;
            return this;
        }

        /**
         * 设备 IPv6 地址
         */
        public Builder ipv6(String ipv6) {
            this.ipv6 = ipv6;
            return this;
        }

        /**
         * 设备品牌 Android取Build.BRAND，可用Build.MANUFACTURE代替，但效果会变差；iOS使用默认值Apple Android例子：Honor
         */
        public Builder make(String make) {
            this.make = make;
            return this;
        }

        /**
         * 设备型号，Android取Build.MODEL Android例子：Che1-CL20 iOS例子：iPhone4,1
         */
        public Builder model(String model) {
            this.model = model;
            return this;
        }

        /**
         * 操作系统 1 :Android, 2 : ios
         */
        public Builder os(Integer os) {
            this.os = os;
            return this;
        }

        /**
         * 操作系统硬件版本，Android API 等级（例如：28）
         */
        public Builder osv(String osv) {
            this.osv = osv;
            return this;
        }

        /**
         * 每英寸像素个数，单位：ppi
         */
        public Builder ppi(Integer ppi) {
            this.ppi = ppi;
            return this;
        }

        /**
         * User Agent，需使用系统 webview 的 ua
         */
        public Builder ua(String ua) {
            this.ua = ua;
            return this;
        }

        /**
         * 屏幕的物理宽度，单位：px
         */
        public Builder w(Integer w) {
            this.w = w;
            return this;
        }

        /**
         * 设备 MAC 地址的 原值
         */
        public Builder mac(String mac) {
            this.mac = mac;
            return this;
        }

        /**
         * 设备 MAC 地址使用 MD5 后的值
         */
        public Builder macmd5(String macmd5) {
            this.macmd5 = macmd5;
            return this;
        }

        /**
         * 无线网 ssid 名称
         */
        public Builder ssid(String ssid) {
            this.ssid = ssid;
            return this;
        }

        /**
         * wifi 路由器的 Mac 地址
         */
        public Builder wifi_mac(String wifi_mac) {
            this.wifi_mac = wifi_mac;
            return this;
        }

        /**
         * 手机 ROM 版本
         */
        public Builder rom_version(String rom_version) {
            this.rom_version = rom_version;
            return this;
        }

        /**
         * 用户已安装的app
         */
        public Builder installed_app(List<String> installed_app) {
            Internal.checkElementsNotNull(installed_app);
            this.installed_app = installed_app;
            return this;
        }

        /**
         * 系统更新标识
         */
        public Builder update_mark(String update_mark) {
            this.update_mark = update_mark;
            return this;
        }

        /**
         * 系统更新时间
         */
        public Builder update_time(String update_time) {
            this.update_time = update_time;
            return this;
        }

        /**
         * 系统启动标识
         */
        public Builder boot_mark(String boot_mark) {
            this.boot_mark = boot_mark;
            return this;
        }

        /**
         * 系统启动时间
         */
        public Builder boot_time(String boot_time) {
            this.boot_time = boot_time;
            return this;
        }

        public Builder sys_compiling_time(String sys_compiling_time) {
            this.sys_compiling_time = sys_compiling_time;
            return this;
        }

        /**
         * 设备启动时间
         */
        public Builder birth_time(String birth_time) {
            this.birth_time = birth_time;
            return this;
        }

        /**
         * 拼多多设备ID
         */
        public Builder paid_1_4(String paid_1_4) {
            this.paid_1_4 = paid_1_4;
            return this;
        }

        /**
         * 华为安卓设备的 HMS Core的版本号，保留原始值
         */
        public Builder hms_ver(String hms_ver) {
            this.hms_ver = hms_ver;
            return this;
        }

        /**
         * 华为安卓设备的 AG（应用市场）的版本号，保留原始值
         */
        public Builder hwag_ver(String hwag_ver) {
            this.hwag_ver = hwag_ver;
            return this;
        }

        /**
         * Caid 原值
         */
        public Builder caid(String caid) {
            this.caid = caid;
            return this;
        }

        /**
         * Caid md5 值
         */
        public Builder caid_md5(String caid_md5) {
            this.caid_md5 = caid_md5;
            return this;
        }

        /**
         * Caid 的版本
         */
        public Builder caid_version(String caid_version) {
            this.caid_version = caid_version;
            return this;
        }

        /**
         * 设备名称的md5值
         */
        public Builder device_name_md5(String device_name_md5) {
            this.device_name_md5 = device_name_md5;
            return this;
        }

        /**
         * 设备machine值，对应model，示例："iPhone10,3"
         */
        public Builder hardware_machine(String hardware_machine) {
            this.hardware_machine = hardware_machine;
            return this;
        }

        /**
         * 物理内存，单位：字节
         */
        public Builder physical_memory(String physical_memory) {
            this.physical_memory = physical_memory;
            return this;
        }

        /**
         * 硬盘大小，单位：字节
         */
        public Builder hard_disk_size(String hard_disk_size) {
            this.hard_disk_size = hard_disk_size;
            return this;
        }

        /**
         * 国家，示例："CN"
         */
        public Builder country(String country) {
            this.country = country;
            return this;
        }

        /**
         * 语言，示例："zh-Hans-CN"
         */
        public Builder language(String language) {
            this.language = language;
            return this;
        }

        /**
         * 时区，示例："28800"
         */
        public Builder time_zone(String time_zone) {
            this.time_zone = time_zone;
            return this;
        }

        /**
         * CPU数目
         */
        public Builder cpu_num(String cpu_num) {
            this.cpu_num = cpu_num;
            return this;
        }

        @Override
        public Device build() {
            return new Device(carrier, connectiontype, devicetype, did, didmd5, ifamd5, dpid, dpidmd5, geo, h, hwv, ip, oid, oidmd5, ifa, ipv6, make, model, os, osv, ppi, ua, w, mac, macmd5, ssid, wifi_mac, rom_version, installed_app, update_mark, update_time, boot_mark, boot_time, sys_compiling_time, birth_time, paid_1_4, hms_ver, hwag_ver, caid, caid_md5, caid_version, device_name_md5, hardware_machine, physical_memory, hard_disk_size, country, language, time_zone, cpu_num, super.buildUnknownFields());
        }
    }

    private static final class ProtoAdapter_Device extends ProtoAdapter<Device> {
        public ProtoAdapter_Device() {
            super(FieldEncoding.LENGTH_DELIMITED, Device.class);
        }

        @Override
        public int encodedSize(Device value) {
            return ProtoAdapter.INT32.encodedSizeWithTag(1, value.carrier) + ProtoAdapter.INT32.encodedSizeWithTag(2, value.connectiontype) + ProtoAdapter.INT32.encodedSizeWithTag(3, value.devicetype) + ProtoAdapter.STRING.encodedSizeWithTag(4, value.did) + ProtoAdapter.STRING.encodedSizeWithTag(5, value.didmd5) + ProtoAdapter.STRING.encodedSizeWithTag(6, value.ifamd5) + ProtoAdapter.STRING.encodedSizeWithTag(7, value.dpid) + ProtoAdapter.STRING.encodedSizeWithTag(8, value.dpidmd5) + Geo.ADAPTER.encodedSizeWithTag(9, value.geo) + ProtoAdapter.INT32.encodedSizeWithTag(10, value.h) + ProtoAdapter.STRING.encodedSizeWithTag(11, value.hwv) + ProtoAdapter.STRING.encodedSizeWithTag(12, value.ip) + ProtoAdapter.STRING.encodedSizeWithTag(13, value.oid) + ProtoAdapter.STRING.encodedSizeWithTag(14, value.oidmd5) + ProtoAdapter.STRING.encodedSizeWithTag(15, value.ifa) + ProtoAdapter.STRING.encodedSizeWithTag(16, value.ipv6) + ProtoAdapter.STRING.encodedSizeWithTag(17, value.make) + ProtoAdapter.STRING.encodedSizeWithTag(18, value.model) + ProtoAdapter.INT32.encodedSizeWithTag(19, value.os) + ProtoAdapter.STRING.encodedSizeWithTag(20, value.osv) + ProtoAdapter.INT32.encodedSizeWithTag(21, value.ppi) + ProtoAdapter.STRING.encodedSizeWithTag(22, value.ua) + ProtoAdapter.INT32.encodedSizeWithTag(23, value.w) + ProtoAdapter.STRING.encodedSizeWithTag(24, value.mac) + ProtoAdapter.STRING.encodedSizeWithTag(25, value.macmd5) + ProtoAdapter.STRING.encodedSizeWithTag(26, value.ssid) + ProtoAdapter.STRING.encodedSizeWithTag(27, value.wifi_mac) + ProtoAdapter.STRING.encodedSizeWithTag(28, value.rom_version) + ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(29, value.installed_app) + ProtoAdapter.STRING.encodedSizeWithTag(30, value.update_mark) + ProtoAdapter.STRING.encodedSizeWithTag(31, value.update_time) + ProtoAdapter.STRING.encodedSizeWithTag(32, value.boot_mark) + ProtoAdapter.STRING.encodedSizeWithTag(33, value.boot_time) + ProtoAdapter.STRING.encodedSizeWithTag(34, value.sys_compiling_time) + ProtoAdapter.STRING.encodedSizeWithTag(35, value.birth_time) + ProtoAdapter.STRING.encodedSizeWithTag(36, value.paid_1_4) + ProtoAdapter.STRING.encodedSizeWithTag(37, value.hms_ver) + ProtoAdapter.STRING.encodedSizeWithTag(38, value.hwag_ver) + ProtoAdapter.STRING.encodedSizeWithTag(39, value.caid) + ProtoAdapter.STRING.encodedSizeWithTag(40, value.caid_md5) + ProtoAdapter.STRING.encodedSizeWithTag(41, value.caid_version) + ProtoAdapter.STRING.encodedSizeWithTag(42, value.device_name_md5) + ProtoAdapter.STRING.encodedSizeWithTag(43, value.hardware_machine) + ProtoAdapter.STRING.encodedSizeWithTag(44, value.physical_memory) + ProtoAdapter.STRING.encodedSizeWithTag(45, value.hard_disk_size) + ProtoAdapter.STRING.encodedSizeWithTag(46, value.country) + ProtoAdapter.STRING.encodedSizeWithTag(47, value.language) + ProtoAdapter.STRING.encodedSizeWithTag(48, value.time_zone) + ProtoAdapter.STRING.encodedSizeWithTag(49, value.cpu_num) + value.unknownFields().size();
        }

        @Override
        public void encode(ProtoWriter writer, Device value) throws IOException {
            ProtoAdapter.INT32.encodeWithTag(writer, 1, value.carrier);
            ProtoAdapter.INT32.encodeWithTag(writer, 2, value.connectiontype);
            ProtoAdapter.INT32.encodeWithTag(writer, 3, value.devicetype);
            ProtoAdapter.STRING.encodeWithTag(writer, 4, value.did);
            ProtoAdapter.STRING.encodeWithTag(writer, 5, value.didmd5);
            ProtoAdapter.STRING.encodeWithTag(writer, 6, value.ifamd5);
            ProtoAdapter.STRING.encodeWithTag(writer, 7, value.dpid);
            ProtoAdapter.STRING.encodeWithTag(writer, 8, value.dpidmd5);
            Geo.ADAPTER.encodeWithTag(writer, 9, value.geo);
            ProtoAdapter.INT32.encodeWithTag(writer, 10, value.h);
            ProtoAdapter.STRING.encodeWithTag(writer, 11, value.hwv);
            ProtoAdapter.STRING.encodeWithTag(writer, 12, value.ip);
            ProtoAdapter.STRING.encodeWithTag(writer, 13, value.oid);
            ProtoAdapter.STRING.encodeWithTag(writer, 14, value.oidmd5);
            ProtoAdapter.STRING.encodeWithTag(writer, 15, value.ifa);
            ProtoAdapter.STRING.encodeWithTag(writer, 16, value.ipv6);
            ProtoAdapter.STRING.encodeWithTag(writer, 17, value.make);
            ProtoAdapter.STRING.encodeWithTag(writer, 18, value.model);
            ProtoAdapter.INT32.encodeWithTag(writer, 19, value.os);
            ProtoAdapter.STRING.encodeWithTag(writer, 20, value.osv);
            ProtoAdapter.INT32.encodeWithTag(writer, 21, value.ppi);
            ProtoAdapter.STRING.encodeWithTag(writer, 22, value.ua);
            ProtoAdapter.INT32.encodeWithTag(writer, 23, value.w);
            ProtoAdapter.STRING.encodeWithTag(writer, 24, value.mac);
            ProtoAdapter.STRING.encodeWithTag(writer, 25, value.macmd5);
            ProtoAdapter.STRING.encodeWithTag(writer, 26, value.ssid);
            ProtoAdapter.STRING.encodeWithTag(writer, 27, value.wifi_mac);
            ProtoAdapter.STRING.encodeWithTag(writer, 28, value.rom_version);
            ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 29, value.installed_app);
            ProtoAdapter.STRING.encodeWithTag(writer, 30, value.update_mark);
            ProtoAdapter.STRING.encodeWithTag(writer, 31, value.update_time);
            ProtoAdapter.STRING.encodeWithTag(writer, 32, value.boot_mark);
            ProtoAdapter.STRING.encodeWithTag(writer, 33, value.boot_time);
            ProtoAdapter.STRING.encodeWithTag(writer, 34, value.sys_compiling_time);
            ProtoAdapter.STRING.encodeWithTag(writer, 35, value.birth_time);
            ProtoAdapter.STRING.encodeWithTag(writer, 36, value.paid_1_4);
            ProtoAdapter.STRING.encodeWithTag(writer, 37, value.hms_ver);
            ProtoAdapter.STRING.encodeWithTag(writer, 38, value.hwag_ver);
            ProtoAdapter.STRING.encodeWithTag(writer, 39, value.caid);
            ProtoAdapter.STRING.encodeWithTag(writer, 40, value.caid_md5);
            ProtoAdapter.STRING.encodeWithTag(writer, 41, value.caid_version);
            ProtoAdapter.STRING.encodeWithTag(writer, 42, value.device_name_md5);
            ProtoAdapter.STRING.encodeWithTag(writer, 43, value.hardware_machine);
            ProtoAdapter.STRING.encodeWithTag(writer, 44, value.physical_memory);
            ProtoAdapter.STRING.encodeWithTag(writer, 45, value.hard_disk_size);
            ProtoAdapter.STRING.encodeWithTag(writer, 46, value.country);
            ProtoAdapter.STRING.encodeWithTag(writer, 47, value.language);
            ProtoAdapter.STRING.encodeWithTag(writer, 48, value.time_zone);
            ProtoAdapter.STRING.encodeWithTag(writer, 49, value.cpu_num);
            writer.writeBytes(value.unknownFields());
        }

        @Override
        public Device decode(ProtoReader reader) throws IOException {
            Builder builder = new Builder();
            long token = reader.beginMessage();
            for (int tag; (tag = reader.nextTag()) != -1; ) {
                switch (tag) {
                    case 1:
                        builder.carrier(ProtoAdapter.INT32.decode(reader));
                        break;
                    case 2:
                        builder.connectiontype(ProtoAdapter.INT32.decode(reader));
                        break;
                    case 3:
                        builder.devicetype(ProtoAdapter.INT32.decode(reader));
                        break;
                    case 4:
                        builder.did(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 5:
                        builder.didmd5(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 6:
                        builder.ifamd5(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 7:
                        builder.dpid(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 8:
                        builder.dpidmd5(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 9:
                        builder.geo(Geo.ADAPTER.decode(reader));
                        break;
                    case 10:
                        builder.h(ProtoAdapter.INT32.decode(reader));
                        break;
                    case 11:
                        builder.hwv(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 12:
                        builder.ip(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 13:
                        builder.oid(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 14:
                        builder.oidmd5(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 15:
                        builder.ifa(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 16:
                        builder.ipv6(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 17:
                        builder.make(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 18:
                        builder.model(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 19:
                        builder.os(ProtoAdapter.INT32.decode(reader));
                        break;
                    case 20:
                        builder.osv(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 21:
                        builder.ppi(ProtoAdapter.INT32.decode(reader));
                        break;
                    case 22:
                        builder.ua(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 23:
                        builder.w(ProtoAdapter.INT32.decode(reader));
                        break;
                    case 24:
                        builder.mac(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 25:
                        builder.macmd5(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 26:
                        builder.ssid(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 27:
                        builder.wifi_mac(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 28:
                        builder.rom_version(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 29:
                        builder.installed_app.add(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 30:
                        builder.update_mark(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 31:
                        builder.update_time(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 32:
                        builder.boot_mark(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 33:
                        builder.boot_time(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 34:
                        builder.sys_compiling_time(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 35:
                        builder.birth_time(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 36:
                        builder.paid_1_4(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 37:
                        builder.hms_ver(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 38:
                        builder.hwag_ver(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 39:
                        builder.caid(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 40:
                        builder.caid_md5(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 41:
                        builder.caid_version(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 42:
                        builder.device_name_md5(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 43:
                        builder.hardware_machine(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 44:
                        builder.physical_memory(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 45:
                        builder.hard_disk_size(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 46:
                        builder.country(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 47:
                        builder.language(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 48:
                        builder.time_zone(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 49:
                        builder.cpu_num(ProtoAdapter.STRING.decode(reader));
                        break;
                    default: {
                        FieldEncoding fieldEncoding = reader.peekFieldEncoding();
                        Object value = fieldEncoding.rawProtoAdapter().decode(reader);
                        builder.addUnknownField(tag, fieldEncoding, value);
                    }
                }
            }
            reader.endMessage(token);
            return builder.build();
        }

        @Override
        public Device redact(Device value) {
            Builder builder = value.newBuilder();
            if (builder.geo != null) builder.geo = Geo.ADAPTER.redact(builder.geo);
            builder.clearUnknownFields();
            return builder.build();
        }
    }
}
