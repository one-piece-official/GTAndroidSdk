// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: gt_common.proto
package com.gt.sdk.base.models.rtb;

import android.os.Parcelable;

import com.czhj.wire.AndroidMessage;
import com.czhj.wire.FieldEncoding;
import com.czhj.wire.Message;
import com.czhj.wire.ProtoAdapter;
import com.czhj.wire.ProtoReader;
import com.czhj.wire.ProtoWriter;
import com.czhj.wire.WireField;
import com.czhj.wire.internal.Internal;
import com.czhj.wire.okio.ByteString;

import java.io.IOException;
import java.util.List;

public final class Device extends AndroidMessage<Device, Device.Builder> {

    public static final ProtoAdapter<Device> ADAPTER = new ProtoAdapter_Device();

    public static final Parcelable.Creator<Device> CREATOR = AndroidMessage.newCreator(ADAPTER);

    private static final long serialVersionUID = 0L;

    public static final Integer DEFAULT_OS = 0;

    public static final Integer DEFAULT_OSV = 0;

    public static final String DEFAULT_DID = "";

    public static final String DEFAULT_DIDMD5 = "";

    public static final String DEFAULT_DIDSHA1 = "";

    public static final String DEFAULT_OID = "";

    public static final String DEFAULT_OIDMD5 = "";

    public static final String DEFAULT_DPID = "";

    public static final String DEFAULT_DPIDMD5 = "";

    public static final String DEFAULT_DPIDSHA1 = "";

    public static final String DEFAULT_IFA = "";

    public static final String DEFAULT_IFAMD5 = "";

    public static final String DEFAULT_IP = "";

    public static final String DEFAULT_IPV6 = "";

    public static final String DEFAULT_UA = "";

    public static final Integer DEFAULT_CONNECTIONTYPE = 0;

    public static final Integer DEFAULT_DEVICETYPE = 0;

    public static final String DEFAULT_MAKE = "";

    public static final String DEFAULT_MODEL = "";

    public static final String DEFAULT_HWV = "";

    public static final Integer DEFAULT_CARRIER = 0;

    public static final String DEFAULT_MACMD5 = "";

    public static final String DEFAULT_MACSHA1 = "";

    public static final String DEFAULT_MAC = "";

    public static final Integer DEFAULT_H = 0;

    public static final Integer DEFAULT_W = 0;

    public static final Integer DEFAULT_PPI = 0;

    public static final String DEFAULT_SSID = "";

    public static final String DEFAULT_WIFI_MAC = "";

    public static final String DEFAULT_ROM_VERSION = "";

    public static final String DEFAULT_UPDATE_MARK = "";

    public static final String DEFAULT_UPDATE_TIME = "";

    public static final String DEFAULT_BOOT_MARK = "";

    public static final String DEFAULT_BOOT_TIME = "";

    public static final String DEFAULT_SYS_COMPILING_TIME = "";

    public static final String DEFAULT_BIRTH_TIME = "";

    public static final String DEFAULT_PAID_1_4 = "";

    public static final String DEFAULT_HMS_VER = "";

    public static final String DEFAULT_HWAG_VER = "";

    public static final String DEFAULT_CAID = "";

    public static final String DEFAULT_CAID_MD5 = "";

    public static final String DEFAULT_CAID_VERSION = "";

    public static final String DEFAULT_DEVICE_NAME_MD5 = "";

    public static final String DEFAULT_HARDWARE_MACHINE = "";

    public static final String DEFAULT_PHYSICAL_MEMORY = "";

    public static final String DEFAULT_HARD_DISK_SIZE = "";

    public static final String DEFAULT_COUNTRY = "";

    public static final String DEFAULT_LANGUAGE = "";

    public static final String DEFAULT_TIME_ZONE = "";

    public static final Integer DEFAULT_CPU_NUM = 0;

    /**
     * 操作系统类型. 1=IOS；2=Android
     */
    @WireField(tag = 1, adapter = "com.squareup.wire.ProtoAdapter#UINT32")
    public final Integer os;

    /**
     * Android API level
     */
    @WireField(tag = 2, adapter = "com.squareup.wire.ProtoAdapter#UINT32")
    public final Integer osv;

    @WireField(tag = 3, adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final String did;

    @WireField(tag = 4, adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final String didmd5;

    @WireField(tag = 5, adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final String didsha1;

    @WireField(tag = 6, adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final String oid;

    @WireField(tag = 7, adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final String oidmd5;

    @WireField(tag = 8, adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final String dpid;

    @WireField(tag = 9, adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final String dpidmd5;

    @WireField(tag = 10, adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final String dpidsha1;

    @WireField(tag = 11, adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final String ifa;

    @WireField(tag = 12, adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final String ifamd5;

    @WireField(tag = 13, adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final String ip;

    @WireField(tag = 14, adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final String ipv6;

    @WireField(tag = 15, adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final String ua;

    @WireField(tag = 16, adapter = "com.squareup.wire.ProtoAdapter#UINT32")
    public final Integer connectiontype;

    @WireField(tag = 17, adapter = "com.squareup.wire.ProtoAdapter#UINT32")
    public final Integer devicetype;

    @WireField(tag = 18, adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final String make;

    @WireField(tag = 19, adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final String model;

    @WireField(tag = 20, adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final String hwv;

    @WireField(tag = 21, adapter = "com.squareup.wire.ProtoAdapter#UINT32")
    public final Integer carrier;

    @WireField(tag = 22, adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final String macmd5;

    @WireField(tag = 23, adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final String macsha1;

    @WireField(tag = 24, adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final String mac;

    @WireField(tag = 25, adapter = "com.squareup.wire.ProtoAdapter#UINT32")
    public final Integer h;

    @WireField(tag = 26, adapter = "com.squareup.wire.ProtoAdapter#UINT32")
    public final Integer w;

    @WireField(tag = 27, adapter = "com.squareup.wire.ProtoAdapter#UINT32")
    public final Integer ppi;

    @WireField(tag = 28, adapter = "com.gt.sdk.base.models.rtb.Geo#ADAPTER")
    public final Geo geo;

    @WireField(tag = 29, adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final String ssid;

    @WireField(tag = 30, adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final String wifi_mac;

    @WireField(tag = 31, adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final String rom_version;

    @WireField(tag = 32, adapter = "com.squareup.wire.ProtoAdapter#STRING", label = WireField.Label.REPEATED)
    public final List<String> installed_app;

    @WireField(tag = 33, adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final String update_mark;

    @WireField(tag = 34, adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final String update_time;

    @WireField(tag = 35, adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final String boot_mark;

    @WireField(tag = 36, adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final String boot_time;

    @WireField(tag = 37, adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final String sys_compiling_time;

    @WireField(tag = 38, adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final String birth_time;

    @WireField(tag = 39, adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final String paid_1_4;

    @WireField(tag = 40, adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final String hms_ver;

    @WireField(tag = 41, adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final String hwag_ver;

    @WireField(tag = 42, adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final String caid;

    @WireField(tag = 43, adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final String caid_md5;

    @WireField(tag = 44, adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final String caid_version;

    @WireField(tag = 45, adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final String device_name_md5;

    @WireField(tag = 46, adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final String hardware_machine;

    @WireField(tag = 47, adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final String physical_memory;

    @WireField(tag = 48, adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final String hard_disk_size;

    @WireField(tag = 49, adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final String country;

    @WireField(tag = 50, adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final String language;

    @WireField(tag = 51, adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final String time_zone;

    @WireField(tag = 52, adapter = "com.squareup.wire.ProtoAdapter#UINT32")
    public final Integer cpu_num;

    public Device(Integer os, Integer osv, String did, String didmd5, String didsha1, String oid, String oidmd5, String dpid, String dpidmd5, String dpidsha1, String ifa, String ifamd5, String ip, String ipv6, String ua, Integer connectiontype, Integer devicetype, String make, String model, String hwv, Integer carrier, String macmd5, String macsha1, String mac, Integer h, Integer w, Integer ppi, Geo geo, String ssid, String wifi_mac, String rom_version, List<String> installed_app, String update_mark, String update_time, String boot_mark, String boot_time, String sys_compiling_time, String birth_time, String paid_1_4, String hms_ver, String hwag_ver, String caid, String caid_md5, String caid_version, String device_name_md5, String hardware_machine, String physical_memory, String hard_disk_size, String country, String language, String time_zone, Integer cpu_num) {
        this(os, osv, did, didmd5, didsha1, oid, oidmd5, dpid, dpidmd5, dpidsha1, ifa, ifamd5, ip, ipv6, ua, connectiontype, devicetype, make, model, hwv, carrier, macmd5, macsha1, mac, h, w, ppi, geo, ssid, wifi_mac, rom_version, installed_app, update_mark, update_time, boot_mark, boot_time, sys_compiling_time, birth_time, paid_1_4, hms_ver, hwag_ver, caid, caid_md5, caid_version, device_name_md5, hardware_machine, physical_memory, hard_disk_size, country, language, time_zone, cpu_num, ByteString.EMPTY);
    }

    public Device(Integer os, Integer osv, String did, String didmd5, String didsha1, String oid, String oidmd5, String dpid, String dpidmd5, String dpidsha1, String ifa, String ifamd5, String ip, String ipv6, String ua, Integer connectiontype, Integer devicetype, String make, String model, String hwv, Integer carrier, String macmd5, String macsha1, String mac, Integer h, Integer w, Integer ppi, Geo geo, String ssid, String wifi_mac, String rom_version, List<String> installed_app, String update_mark, String update_time, String boot_mark, String boot_time, String sys_compiling_time, String birth_time, String paid_1_4, String hms_ver, String hwag_ver, String caid, String caid_md5, String caid_version, String device_name_md5, String hardware_machine, String physical_memory, String hard_disk_size, String country, String language, String time_zone, Integer cpu_num, ByteString unknownFields) {
        super(ADAPTER, unknownFields);
        this.os = os;
        this.osv = osv;
        this.did = did;
        this.didmd5 = didmd5;
        this.didsha1 = didsha1;
        this.oid = oid;
        this.oidmd5 = oidmd5;
        this.dpid = dpid;
        this.dpidmd5 = dpidmd5;
        this.dpidsha1 = dpidsha1;
        this.ifa = ifa;
        this.ifamd5 = ifamd5;
        this.ip = ip;
        this.ipv6 = ipv6;
        this.ua = ua;
        this.connectiontype = connectiontype;
        this.devicetype = devicetype;
        this.make = make;
        this.model = model;
        this.hwv = hwv;
        this.carrier = carrier;
        this.macmd5 = macmd5;
        this.macsha1 = macsha1;
        this.mac = mac;
        this.h = h;
        this.w = w;
        this.ppi = ppi;
        this.geo = geo;
        this.ssid = ssid;
        this.wifi_mac = wifi_mac;
        this.rom_version = rom_version;
        this.installed_app = Internal.immutableCopyOf("installed_app", installed_app);
        this.update_mark = update_mark;
        this.update_time = update_time;
        this.boot_mark = boot_mark;
        this.boot_time = boot_time;
        this.sys_compiling_time = sys_compiling_time;
        this.birth_time = birth_time;
        this.paid_1_4 = paid_1_4;
        this.hms_ver = hms_ver;
        this.hwag_ver = hwag_ver;
        this.caid = caid;
        this.caid_md5 = caid_md5;
        this.caid_version = caid_version;
        this.device_name_md5 = device_name_md5;
        this.hardware_machine = hardware_machine;
        this.physical_memory = physical_memory;
        this.hard_disk_size = hard_disk_size;
        this.country = country;
        this.language = language;
        this.time_zone = time_zone;
        this.cpu_num = cpu_num;
    }

    @Override
    public Builder newBuilder() {
        Builder builder = new Builder();
        builder.os = os;
        builder.osv = osv;
        builder.did = did;
        builder.didmd5 = didmd5;
        builder.didsha1 = didsha1;
        builder.oid = oid;
        builder.oidmd5 = oidmd5;
        builder.dpid = dpid;
        builder.dpidmd5 = dpidmd5;
        builder.dpidsha1 = dpidsha1;
        builder.ifa = ifa;
        builder.ifamd5 = ifamd5;
        builder.ip = ip;
        builder.ipv6 = ipv6;
        builder.ua = ua;
        builder.connectiontype = connectiontype;
        builder.devicetype = devicetype;
        builder.make = make;
        builder.model = model;
        builder.hwv = hwv;
        builder.carrier = carrier;
        builder.macmd5 = macmd5;
        builder.macsha1 = macsha1;
        builder.mac = mac;
        builder.h = h;
        builder.w = w;
        builder.ppi = ppi;
        builder.geo = geo;
        builder.ssid = ssid;
        builder.wifi_mac = wifi_mac;
        builder.rom_version = rom_version;
        builder.installed_app = Internal.copyOf("installed_app", installed_app);
        builder.update_mark = update_mark;
        builder.update_time = update_time;
        builder.boot_mark = boot_mark;
        builder.boot_time = boot_time;
        builder.sys_compiling_time = sys_compiling_time;
        builder.birth_time = birth_time;
        builder.paid_1_4 = paid_1_4;
        builder.hms_ver = hms_ver;
        builder.hwag_ver = hwag_ver;
        builder.caid = caid;
        builder.caid_md5 = caid_md5;
        builder.caid_version = caid_version;
        builder.device_name_md5 = device_name_md5;
        builder.hardware_machine = hardware_machine;
        builder.physical_memory = physical_memory;
        builder.hard_disk_size = hard_disk_size;
        builder.country = country;
        builder.language = language;
        builder.time_zone = time_zone;
        builder.cpu_num = cpu_num;
        builder.addUnknownFields(unknownFields());
        return builder;
    }

    @Override
    public boolean equals(Object other) {
        if (other == this) return true;
        if (!(other instanceof Device)) return false;
        Device o = (Device) other;
        return unknownFields().equals(o.unknownFields()) && Internal.equals(os, o.os) && Internal.equals(osv, o.osv) && Internal.equals(did, o.did) && Internal.equals(didmd5, o.didmd5) && Internal.equals(didsha1, o.didsha1) && Internal.equals(oid, o.oid) && Internal.equals(oidmd5, o.oidmd5) && Internal.equals(dpid, o.dpid) && Internal.equals(dpidmd5, o.dpidmd5) && Internal.equals(dpidsha1, o.dpidsha1) && Internal.equals(ifa, o.ifa) && Internal.equals(ifamd5, o.ifamd5) && Internal.equals(ip, o.ip) && Internal.equals(ipv6, o.ipv6) && Internal.equals(ua, o.ua) && Internal.equals(connectiontype, o.connectiontype) && Internal.equals(devicetype, o.devicetype) && Internal.equals(make, o.make) && Internal.equals(model, o.model) && Internal.equals(hwv, o.hwv) && Internal.equals(carrier, o.carrier) && Internal.equals(macmd5, o.macmd5) && Internal.equals(macsha1, o.macsha1) && Internal.equals(mac, o.mac) && Internal.equals(h, o.h) && Internal.equals(w, o.w) && Internal.equals(ppi, o.ppi) && Internal.equals(geo, o.geo) && Internal.equals(ssid, o.ssid) && Internal.equals(wifi_mac, o.wifi_mac) && Internal.equals(rom_version, o.rom_version) && installed_app.equals(o.installed_app) && Internal.equals(update_mark, o.update_mark) && Internal.equals(update_time, o.update_time) && Internal.equals(boot_mark, o.boot_mark) && Internal.equals(boot_time, o.boot_time) && Internal.equals(sys_compiling_time, o.sys_compiling_time) && Internal.equals(birth_time, o.birth_time) && Internal.equals(paid_1_4, o.paid_1_4) && Internal.equals(hms_ver, o.hms_ver) && Internal.equals(hwag_ver, o.hwag_ver) && Internal.equals(caid, o.caid) && Internal.equals(caid_md5, o.caid_md5) && Internal.equals(caid_version, o.caid_version) && Internal.equals(device_name_md5, o.device_name_md5) && Internal.equals(hardware_machine, o.hardware_machine) && Internal.equals(physical_memory, o.physical_memory) && Internal.equals(hard_disk_size, o.hard_disk_size) && Internal.equals(country, o.country) && Internal.equals(language, o.language) && Internal.equals(time_zone, o.time_zone) && Internal.equals(cpu_num, o.cpu_num);
    }

    @Override
    public int hashCode() {
        int result = super.hashCode;
        if (result == 0) {
            result = unknownFields().hashCode();
            result = result * 37 + (os != null ? os.hashCode() : 0);
            result = result * 37 + (osv != null ? osv.hashCode() : 0);
            result = result * 37 + (did != null ? did.hashCode() : 0);
            result = result * 37 + (didmd5 != null ? didmd5.hashCode() : 0);
            result = result * 37 + (didsha1 != null ? didsha1.hashCode() : 0);
            result = result * 37 + (oid != null ? oid.hashCode() : 0);
            result = result * 37 + (oidmd5 != null ? oidmd5.hashCode() : 0);
            result = result * 37 + (dpid != null ? dpid.hashCode() : 0);
            result = result * 37 + (dpidmd5 != null ? dpidmd5.hashCode() : 0);
            result = result * 37 + (dpidsha1 != null ? dpidsha1.hashCode() : 0);
            result = result * 37 + (ifa != null ? ifa.hashCode() : 0);
            result = result * 37 + (ifamd5 != null ? ifamd5.hashCode() : 0);
            result = result * 37 + (ip != null ? ip.hashCode() : 0);
            result = result * 37 + (ipv6 != null ? ipv6.hashCode() : 0);
            result = result * 37 + (ua != null ? ua.hashCode() : 0);
            result = result * 37 + (connectiontype != null ? connectiontype.hashCode() : 0);
            result = result * 37 + (devicetype != null ? devicetype.hashCode() : 0);
            result = result * 37 + (make != null ? make.hashCode() : 0);
            result = result * 37 + (model != null ? model.hashCode() : 0);
            result = result * 37 + (hwv != null ? hwv.hashCode() : 0);
            result = result * 37 + (carrier != null ? carrier.hashCode() : 0);
            result = result * 37 + (macmd5 != null ? macmd5.hashCode() : 0);
            result = result * 37 + (macsha1 != null ? macsha1.hashCode() : 0);
            result = result * 37 + (mac != null ? mac.hashCode() : 0);
            result = result * 37 + (h != null ? h.hashCode() : 0);
            result = result * 37 + (w != null ? w.hashCode() : 0);
            result = result * 37 + (ppi != null ? ppi.hashCode() : 0);
            result = result * 37 + (geo != null ? geo.hashCode() : 0);
            result = result * 37 + (ssid != null ? ssid.hashCode() : 0);
            result = result * 37 + (wifi_mac != null ? wifi_mac.hashCode() : 0);
            result = result * 37 + (rom_version != null ? rom_version.hashCode() : 0);
            result = result * 37 + installed_app.hashCode();
            result = result * 37 + (update_mark != null ? update_mark.hashCode() : 0);
            result = result * 37 + (update_time != null ? update_time.hashCode() : 0);
            result = result * 37 + (boot_mark != null ? boot_mark.hashCode() : 0);
            result = result * 37 + (boot_time != null ? boot_time.hashCode() : 0);
            result = result * 37 + (sys_compiling_time != null ? sys_compiling_time.hashCode() : 0);
            result = result * 37 + (birth_time != null ? birth_time.hashCode() : 0);
            result = result * 37 + (paid_1_4 != null ? paid_1_4.hashCode() : 0);
            result = result * 37 + (hms_ver != null ? hms_ver.hashCode() : 0);
            result = result * 37 + (hwag_ver != null ? hwag_ver.hashCode() : 0);
            result = result * 37 + (caid != null ? caid.hashCode() : 0);
            result = result * 37 + (caid_md5 != null ? caid_md5.hashCode() : 0);
            result = result * 37 + (caid_version != null ? caid_version.hashCode() : 0);
            result = result * 37 + (device_name_md5 != null ? device_name_md5.hashCode() : 0);
            result = result * 37 + (hardware_machine != null ? hardware_machine.hashCode() : 0);
            result = result * 37 + (physical_memory != null ? physical_memory.hashCode() : 0);
            result = result * 37 + (hard_disk_size != null ? hard_disk_size.hashCode() : 0);
            result = result * 37 + (country != null ? country.hashCode() : 0);
            result = result * 37 + (language != null ? language.hashCode() : 0);
            result = result * 37 + (time_zone != null ? time_zone.hashCode() : 0);
            result = result * 37 + (cpu_num != null ? cpu_num.hashCode() : 0);
            super.hashCode = result;
        }
        return result;
    }

    @Override
    public String toString() {
        StringBuilder builder = new StringBuilder();
        if (os != null) builder.append(", os=").append(os);
        if (osv != null) builder.append(", osv=").append(osv);
        if (did != null) builder.append(", did=").append(did);
        if (didmd5 != null) builder.append(", didmd5=").append(didmd5);
        if (didsha1 != null) builder.append(", didsha1=").append(didsha1);
        if (oid != null) builder.append(", oid=").append(oid);
        if (oidmd5 != null) builder.append(", oidmd5=").append(oidmd5);
        if (dpid != null) builder.append(", dpid=").append(dpid);
        if (dpidmd5 != null) builder.append(", dpidmd5=").append(dpidmd5);
        if (dpidsha1 != null) builder.append(", dpidsha1=").append(dpidsha1);
        if (ifa != null) builder.append(", ifa=").append(ifa);
        if (ifamd5 != null) builder.append(", ifamd5=").append(ifamd5);
        if (ip != null) builder.append(", ip=").append(ip);
        if (ipv6 != null) builder.append(", ipv6=").append(ipv6);
        if (ua != null) builder.append(", ua=").append(ua);
        if (connectiontype != null) builder.append(", connectiontype=").append(connectiontype);
        if (devicetype != null) builder.append(", devicetype=").append(devicetype);
        if (make != null) builder.append(", make=").append(make);
        if (model != null) builder.append(", model=").append(model);
        if (hwv != null) builder.append(", hwv=").append(hwv);
        if (carrier != null) builder.append(", carrier=").append(carrier);
        if (macmd5 != null) builder.append(", macmd5=").append(macmd5);
        if (macsha1 != null) builder.append(", macsha1=").append(macsha1);
        if (mac != null) builder.append(", mac=").append(mac);
        if (h != null) builder.append(", h=").append(h);
        if (w != null) builder.append(", w=").append(w);
        if (ppi != null) builder.append(", ppi=").append(ppi);
        if (geo != null) builder.append(", geo=").append(geo);
        if (ssid != null) builder.append(", ssid=").append(ssid);
        if (wifi_mac != null) builder.append(", wifi_mac=").append(wifi_mac);
        if (rom_version != null) builder.append(", rom_version=").append(rom_version);
        if (!installed_app.isEmpty()) builder.append(", installed_app=").append(installed_app);
        if (update_mark != null) builder.append(", update_mark=").append(update_mark);
        if (update_time != null) builder.append(", update_time=").append(update_time);
        if (boot_mark != null) builder.append(", boot_mark=").append(boot_mark);
        if (boot_time != null) builder.append(", boot_time=").append(boot_time);
        if (sys_compiling_time != null)
            builder.append(", sys_compiling_time=").append(sys_compiling_time);
        if (birth_time != null) builder.append(", birth_time=").append(birth_time);
        if (paid_1_4 != null) builder.append(", paid_1_4=").append(paid_1_4);
        if (hms_ver != null) builder.append(", hms_ver=").append(hms_ver);
        if (hwag_ver != null) builder.append(", hwag_ver=").append(hwag_ver);
        if (caid != null) builder.append(", caid=").append(caid);
        if (caid_md5 != null) builder.append(", caid_md5=").append(caid_md5);
        if (caid_version != null) builder.append(", caid_version=").append(caid_version);
        if (device_name_md5 != null) builder.append(", device_name_md5=").append(device_name_md5);
        if (hardware_machine != null)
            builder.append(", hardware_machine=").append(hardware_machine);
        if (physical_memory != null) builder.append(", physical_memory=").append(physical_memory);
        if (hard_disk_size != null) builder.append(", hard_disk_size=").append(hard_disk_size);
        if (country != null) builder.append(", country=").append(country);
        if (language != null) builder.append(", language=").append(language);
        if (time_zone != null) builder.append(", time_zone=").append(time_zone);
        if (cpu_num != null) builder.append(", cpu_num=").append(cpu_num);
        return builder.replace(0, 2, "Device{").append('}').toString();
    }

    public static final class Builder extends Message.Builder<Device, Builder> {
        public Integer os = DEFAULT_OS;

        public Integer osv = DEFAULT_OSV;

        public String did = DEFAULT_DID;

        public String didmd5 = DEFAULT_DIDMD5;

        public String didsha1 = DEFAULT_DIDSHA1;

        public String oid = DEFAULT_OID;

        public String oidmd5 = DEFAULT_OIDMD5;

        public String dpid = DEFAULT_DPID;

        public String dpidmd5 = DEFAULT_DPIDMD5;

        public String dpidsha1 = DEFAULT_DPIDSHA1;

        public String ifa = DEFAULT_IFA;

        public String ifamd5 = DEFAULT_IFAMD5;

        public String ip = DEFAULT_IP;

        public String ipv6 = DEFAULT_IPV6;

        public String ua = DEFAULT_UA;

        public Integer connectiontype = DEFAULT_CONNECTIONTYPE;

        public Integer devicetype = DEFAULT_DEVICETYPE;

        public String make = DEFAULT_MAKE;

        public String model = DEFAULT_MODEL;

        public String hwv = DEFAULT_HWV;

        public Integer carrier = DEFAULT_CARRIER;

        public String macmd5 = DEFAULT_MACMD5;

        public String macsha1 = DEFAULT_MACSHA1;

        public String mac = DEFAULT_MAC;

        public Integer h = DEFAULT_H;

        public Integer w = DEFAULT_W;

        public Integer ppi = DEFAULT_PPI;

        public Geo geo;

        public String ssid = DEFAULT_SSID;

        public String wifi_mac = DEFAULT_WIFI_MAC;

        public String rom_version = DEFAULT_ROM_VERSION;

        public List<String> installed_app;

        public String update_mark = DEFAULT_UPDATE_MARK;

        public String update_time = DEFAULT_UPDATE_TIME;

        public String boot_mark = DEFAULT_BOOT_MARK;

        public String boot_time = DEFAULT_BOOT_TIME;

        public String sys_compiling_time = DEFAULT_SYS_COMPILING_TIME;

        public String birth_time = DEFAULT_BIRTH_TIME;

        public String paid_1_4 = DEFAULT_PAID_1_4;

        public String hms_ver = DEFAULT_HMS_VER;

        public String hwag_ver = DEFAULT_HWAG_VER;

        public String caid = DEFAULT_CAID;

        public String caid_md5 = DEFAULT_CAID_MD5;

        public String caid_version = DEFAULT_CAID_VERSION;

        public String device_name_md5 = DEFAULT_DEVICE_NAME_MD5;

        public String hardware_machine = DEFAULT_HARDWARE_MACHINE;

        public String physical_memory = DEFAULT_PHYSICAL_MEMORY;

        public String hard_disk_size = DEFAULT_HARD_DISK_SIZE;

        public String country = DEFAULT_COUNTRY;

        public String language = DEFAULT_LANGUAGE;

        public String time_zone = DEFAULT_TIME_ZONE;

        public Integer cpu_num = DEFAULT_CPU_NUM;

        public Builder() {
            installed_app = Internal.newMutableList();
        }

        /**
         * 操作系统类型. 1=IOS；2=Android
         */
        public Builder os(Integer os) {
            this.os = os;
            return this;
        }

        /**
         * Android API level
         */
        public Builder osv(Integer osv) {
            this.osv = osv;
            return this;
        }

        public Builder did(String did) {
            this.did = did;
            return this;
        }

        public Builder didmd5(String didmd5) {
            this.didmd5 = didmd5;
            return this;
        }

        public Builder didsha1(String didsha1) {
            this.didsha1 = didsha1;
            return this;
        }

        public Builder oid(String oid) {
            this.oid = oid;
            return this;
        }

        public Builder oidmd5(String oidmd5) {
            this.oidmd5 = oidmd5;
            return this;
        }

        public Builder dpid(String dpid) {
            this.dpid = dpid;
            return this;
        }

        public Builder dpidmd5(String dpidmd5) {
            this.dpidmd5 = dpidmd5;
            return this;
        }

        public Builder dpidsha1(String dpidsha1) {
            this.dpidsha1 = dpidsha1;
            return this;
        }

        public Builder ifa(String ifa) {
            this.ifa = ifa;
            return this;
        }

        public Builder ifamd5(String ifamd5) {
            this.ifamd5 = ifamd5;
            return this;
        }

        public Builder ip(String ip) {
            this.ip = ip;
            return this;
        }

        public Builder ipv6(String ipv6) {
            this.ipv6 = ipv6;
            return this;
        }

        public Builder ua(String ua) {
            this.ua = ua;
            return this;
        }

        public Builder connectiontype(Integer connectiontype) {
            this.connectiontype = connectiontype;
            return this;
        }

        public Builder devicetype(Integer devicetype) {
            this.devicetype = devicetype;
            return this;
        }

        public Builder make(String make) {
            this.make = make;
            return this;
        }

        public Builder model(String model) {
            this.model = model;
            return this;
        }

        public Builder hwv(String hwv) {
            this.hwv = hwv;
            return this;
        }

        public Builder carrier(Integer carrier) {
            this.carrier = carrier;
            return this;
        }

        public Builder macmd5(String macmd5) {
            this.macmd5 = macmd5;
            return this;
        }

        public Builder macsha1(String macsha1) {
            this.macsha1 = macsha1;
            return this;
        }

        public Builder mac(String mac) {
            this.mac = mac;
            return this;
        }

        public Builder h(Integer h) {
            this.h = h;
            return this;
        }

        public Builder w(Integer w) {
            this.w = w;
            return this;
        }

        public Builder ppi(Integer ppi) {
            this.ppi = ppi;
            return this;
        }

        public Builder geo(Geo geo) {
            this.geo = geo;
            return this;
        }

        public Builder ssid(String ssid) {
            this.ssid = ssid;
            return this;
        }

        public Builder wifi_mac(String wifi_mac) {
            this.wifi_mac = wifi_mac;
            return this;
        }

        public Builder rom_version(String rom_version) {
            this.rom_version = rom_version;
            return this;
        }

        public Builder installed_app(List<String> installed_app) {
            Internal.checkElementsNotNull(installed_app);
            this.installed_app = installed_app;
            return this;
        }

        public Builder update_mark(String update_mark) {
            this.update_mark = update_mark;
            return this;
        }

        public Builder update_time(String update_time) {
            this.update_time = update_time;
            return this;
        }

        public Builder boot_mark(String boot_mark) {
            this.boot_mark = boot_mark;
            return this;
        }

        public Builder boot_time(String boot_time) {
            this.boot_time = boot_time;
            return this;
        }

        public Builder sys_compiling_time(String sys_compiling_time) {
            this.sys_compiling_time = sys_compiling_time;
            return this;
        }

        public Builder birth_time(String birth_time) {
            this.birth_time = birth_time;
            return this;
        }

        public Builder paid_1_4(String paid_1_4) {
            this.paid_1_4 = paid_1_4;
            return this;
        }

        public Builder hms_ver(String hms_ver) {
            this.hms_ver = hms_ver;
            return this;
        }

        public Builder hwag_ver(String hwag_ver) {
            this.hwag_ver = hwag_ver;
            return this;
        }

        public Builder caid(String caid) {
            this.caid = caid;
            return this;
        }

        public Builder caid_md5(String caid_md5) {
            this.caid_md5 = caid_md5;
            return this;
        }

        public Builder caid_version(String caid_version) {
            this.caid_version = caid_version;
            return this;
        }

        public Builder device_name_md5(String device_name_md5) {
            this.device_name_md5 = device_name_md5;
            return this;
        }

        public Builder hardware_machine(String hardware_machine) {
            this.hardware_machine = hardware_machine;
            return this;
        }

        public Builder physical_memory(String physical_memory) {
            this.physical_memory = physical_memory;
            return this;
        }

        public Builder hard_disk_size(String hard_disk_size) {
            this.hard_disk_size = hard_disk_size;
            return this;
        }

        public Builder country(String country) {
            this.country = country;
            return this;
        }

        public Builder language(String language) {
            this.language = language;
            return this;
        }

        public Builder time_zone(String time_zone) {
            this.time_zone = time_zone;
            return this;
        }

        public Builder cpu_num(Integer cpu_num) {
            this.cpu_num = cpu_num;
            return this;
        }

        @Override
        public Device build() {
            return new Device(os, osv, did, didmd5, didsha1, oid, oidmd5, dpid, dpidmd5, dpidsha1, ifa, ifamd5, ip, ipv6, ua, connectiontype, devicetype, make, model, hwv, carrier, macmd5, macsha1, mac, h, w, ppi, geo, ssid, wifi_mac, rom_version, installed_app, update_mark, update_time, boot_mark, boot_time, sys_compiling_time, birth_time, paid_1_4, hms_ver, hwag_ver, caid, caid_md5, caid_version, device_name_md5, hardware_machine, physical_memory, hard_disk_size, country, language, time_zone, cpu_num, super.buildUnknownFields());
        }
    }

    private static final class ProtoAdapter_Device extends ProtoAdapter<Device> {
        public ProtoAdapter_Device() {
            super(FieldEncoding.LENGTH_DELIMITED, Device.class);
        }

        @Override
        public int encodedSize(Device value) {
            return ProtoAdapter.UINT32.encodedSizeWithTag(1, value.os) + ProtoAdapter.UINT32.encodedSizeWithTag(2, value.osv) + ProtoAdapter.STRING.encodedSizeWithTag(3, value.did) + ProtoAdapter.STRING.encodedSizeWithTag(4, value.didmd5) + ProtoAdapter.STRING.encodedSizeWithTag(5, value.didsha1) + ProtoAdapter.STRING.encodedSizeWithTag(6, value.oid) + ProtoAdapter.STRING.encodedSizeWithTag(7, value.oidmd5) + ProtoAdapter.STRING.encodedSizeWithTag(8, value.dpid) + ProtoAdapter.STRING.encodedSizeWithTag(9, value.dpidmd5) + ProtoAdapter.STRING.encodedSizeWithTag(10, value.dpidsha1) + ProtoAdapter.STRING.encodedSizeWithTag(11, value.ifa) + ProtoAdapter.STRING.encodedSizeWithTag(12, value.ifamd5) + ProtoAdapter.STRING.encodedSizeWithTag(13, value.ip) + ProtoAdapter.STRING.encodedSizeWithTag(14, value.ipv6) + ProtoAdapter.STRING.encodedSizeWithTag(15, value.ua) + ProtoAdapter.UINT32.encodedSizeWithTag(16, value.connectiontype) + ProtoAdapter.UINT32.encodedSizeWithTag(17, value.devicetype) + ProtoAdapter.STRING.encodedSizeWithTag(18, value.make) + ProtoAdapter.STRING.encodedSizeWithTag(19, value.model) + ProtoAdapter.STRING.encodedSizeWithTag(20, value.hwv) + ProtoAdapter.UINT32.encodedSizeWithTag(21, value.carrier) + ProtoAdapter.STRING.encodedSizeWithTag(22, value.macmd5) + ProtoAdapter.STRING.encodedSizeWithTag(23, value.macsha1) + ProtoAdapter.STRING.encodedSizeWithTag(24, value.mac) + ProtoAdapter.UINT32.encodedSizeWithTag(25, value.h) + ProtoAdapter.UINT32.encodedSizeWithTag(26, value.w) + ProtoAdapter.UINT32.encodedSizeWithTag(27, value.ppi) + Geo.ADAPTER.encodedSizeWithTag(28, value.geo) + ProtoAdapter.STRING.encodedSizeWithTag(29, value.ssid) + ProtoAdapter.STRING.encodedSizeWithTag(30, value.wifi_mac) + ProtoAdapter.STRING.encodedSizeWithTag(31, value.rom_version) + ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(32, value.installed_app) + ProtoAdapter.STRING.encodedSizeWithTag(33, value.update_mark) + ProtoAdapter.STRING.encodedSizeWithTag(34, value.update_time) + ProtoAdapter.STRING.encodedSizeWithTag(35, value.boot_mark) + ProtoAdapter.STRING.encodedSizeWithTag(36, value.boot_time) + ProtoAdapter.STRING.encodedSizeWithTag(37, value.sys_compiling_time) + ProtoAdapter.STRING.encodedSizeWithTag(38, value.birth_time) + ProtoAdapter.STRING.encodedSizeWithTag(39, value.paid_1_4) + ProtoAdapter.STRING.encodedSizeWithTag(40, value.hms_ver) + ProtoAdapter.STRING.encodedSizeWithTag(41, value.hwag_ver) + ProtoAdapter.STRING.encodedSizeWithTag(42, value.caid) + ProtoAdapter.STRING.encodedSizeWithTag(43, value.caid_md5) + ProtoAdapter.STRING.encodedSizeWithTag(44, value.caid_version) + ProtoAdapter.STRING.encodedSizeWithTag(45, value.device_name_md5) + ProtoAdapter.STRING.encodedSizeWithTag(46, value.hardware_machine) + ProtoAdapter.STRING.encodedSizeWithTag(47, value.physical_memory) + ProtoAdapter.STRING.encodedSizeWithTag(48, value.hard_disk_size) + ProtoAdapter.STRING.encodedSizeWithTag(49, value.country) + ProtoAdapter.STRING.encodedSizeWithTag(50, value.language) + ProtoAdapter.STRING.encodedSizeWithTag(51, value.time_zone) + ProtoAdapter.UINT32.encodedSizeWithTag(52, value.cpu_num) + value.unknownFields().size();
        }

        @Override
        public void encode(ProtoWriter writer, Device value) throws IOException {
            ProtoAdapter.UINT32.encodeWithTag(writer, 1, value.os);
            ProtoAdapter.UINT32.encodeWithTag(writer, 2, value.osv);
            ProtoAdapter.STRING.encodeWithTag(writer, 3, value.did);
            ProtoAdapter.STRING.encodeWithTag(writer, 4, value.didmd5);
            ProtoAdapter.STRING.encodeWithTag(writer, 5, value.didsha1);
            ProtoAdapter.STRING.encodeWithTag(writer, 6, value.oid);
            ProtoAdapter.STRING.encodeWithTag(writer, 7, value.oidmd5);
            ProtoAdapter.STRING.encodeWithTag(writer, 8, value.dpid);
            ProtoAdapter.STRING.encodeWithTag(writer, 9, value.dpidmd5);
            ProtoAdapter.STRING.encodeWithTag(writer, 10, value.dpidsha1);
            ProtoAdapter.STRING.encodeWithTag(writer, 11, value.ifa);
            ProtoAdapter.STRING.encodeWithTag(writer, 12, value.ifamd5);
            ProtoAdapter.STRING.encodeWithTag(writer, 13, value.ip);
            ProtoAdapter.STRING.encodeWithTag(writer, 14, value.ipv6);
            ProtoAdapter.STRING.encodeWithTag(writer, 15, value.ua);
            ProtoAdapter.UINT32.encodeWithTag(writer, 16, value.connectiontype);
            ProtoAdapter.UINT32.encodeWithTag(writer, 17, value.devicetype);
            ProtoAdapter.STRING.encodeWithTag(writer, 18, value.make);
            ProtoAdapter.STRING.encodeWithTag(writer, 19, value.model);
            ProtoAdapter.STRING.encodeWithTag(writer, 20, value.hwv);
            ProtoAdapter.UINT32.encodeWithTag(writer, 21, value.carrier);
            ProtoAdapter.STRING.encodeWithTag(writer, 22, value.macmd5);
            ProtoAdapter.STRING.encodeWithTag(writer, 23, value.macsha1);
            ProtoAdapter.STRING.encodeWithTag(writer, 24, value.mac);
            ProtoAdapter.UINT32.encodeWithTag(writer, 25, value.h);
            ProtoAdapter.UINT32.encodeWithTag(writer, 26, value.w);
            ProtoAdapter.UINT32.encodeWithTag(writer, 27, value.ppi);
            Geo.ADAPTER.encodeWithTag(writer, 28, value.geo);
            ProtoAdapter.STRING.encodeWithTag(writer, 29, value.ssid);
            ProtoAdapter.STRING.encodeWithTag(writer, 30, value.wifi_mac);
            ProtoAdapter.STRING.encodeWithTag(writer, 31, value.rom_version);
            ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 32, value.installed_app);
            ProtoAdapter.STRING.encodeWithTag(writer, 33, value.update_mark);
            ProtoAdapter.STRING.encodeWithTag(writer, 34, value.update_time);
            ProtoAdapter.STRING.encodeWithTag(writer, 35, value.boot_mark);
            ProtoAdapter.STRING.encodeWithTag(writer, 36, value.boot_time);
            ProtoAdapter.STRING.encodeWithTag(writer, 37, value.sys_compiling_time);
            ProtoAdapter.STRING.encodeWithTag(writer, 38, value.birth_time);
            ProtoAdapter.STRING.encodeWithTag(writer, 39, value.paid_1_4);
            ProtoAdapter.STRING.encodeWithTag(writer, 40, value.hms_ver);
            ProtoAdapter.STRING.encodeWithTag(writer, 41, value.hwag_ver);
            ProtoAdapter.STRING.encodeWithTag(writer, 42, value.caid);
            ProtoAdapter.STRING.encodeWithTag(writer, 43, value.caid_md5);
            ProtoAdapter.STRING.encodeWithTag(writer, 44, value.caid_version);
            ProtoAdapter.STRING.encodeWithTag(writer, 45, value.device_name_md5);
            ProtoAdapter.STRING.encodeWithTag(writer, 46, value.hardware_machine);
            ProtoAdapter.STRING.encodeWithTag(writer, 47, value.physical_memory);
            ProtoAdapter.STRING.encodeWithTag(writer, 48, value.hard_disk_size);
            ProtoAdapter.STRING.encodeWithTag(writer, 49, value.country);
            ProtoAdapter.STRING.encodeWithTag(writer, 50, value.language);
            ProtoAdapter.STRING.encodeWithTag(writer, 51, value.time_zone);
            ProtoAdapter.UINT32.encodeWithTag(writer, 52, value.cpu_num);
            writer.writeBytes(value.unknownFields());
        }

        @Override
        public Device decode(ProtoReader reader) throws IOException {
            Builder builder = new Builder();
            long token = reader.beginMessage();
            for (int tag; (tag = reader.nextTag()) != -1; ) {
                switch (tag) {
                    case 1:
                        builder.os(ProtoAdapter.UINT32.decode(reader));
                        break;
                    case 2:
                        builder.osv(ProtoAdapter.UINT32.decode(reader));
                        break;
                    case 3:
                        builder.did(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 4:
                        builder.didmd5(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 5:
                        builder.didsha1(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 6:
                        builder.oid(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 7:
                        builder.oidmd5(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 8:
                        builder.dpid(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 9:
                        builder.dpidmd5(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 10:
                        builder.dpidsha1(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 11:
                        builder.ifa(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 12:
                        builder.ifamd5(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 13:
                        builder.ip(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 14:
                        builder.ipv6(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 15:
                        builder.ua(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 16:
                        builder.connectiontype(ProtoAdapter.UINT32.decode(reader));
                        break;
                    case 17:
                        builder.devicetype(ProtoAdapter.UINT32.decode(reader));
                        break;
                    case 18:
                        builder.make(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 19:
                        builder.model(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 20:
                        builder.hwv(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 21:
                        builder.carrier(ProtoAdapter.UINT32.decode(reader));
                        break;
                    case 22:
                        builder.macmd5(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 23:
                        builder.macsha1(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 24:
                        builder.mac(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 25:
                        builder.h(ProtoAdapter.UINT32.decode(reader));
                        break;
                    case 26:
                        builder.w(ProtoAdapter.UINT32.decode(reader));
                        break;
                    case 27:
                        builder.ppi(ProtoAdapter.UINT32.decode(reader));
                        break;
                    case 28:
                        builder.geo(Geo.ADAPTER.decode(reader));
                        break;
                    case 29:
                        builder.ssid(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 30:
                        builder.wifi_mac(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 31:
                        builder.rom_version(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 32:
                        builder.installed_app.add(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 33:
                        builder.update_mark(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 34:
                        builder.update_time(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 35:
                        builder.boot_mark(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 36:
                        builder.boot_time(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 37:
                        builder.sys_compiling_time(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 38:
                        builder.birth_time(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 39:
                        builder.paid_1_4(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 40:
                        builder.hms_ver(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 41:
                        builder.hwag_ver(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 42:
                        builder.caid(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 43:
                        builder.caid_md5(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 44:
                        builder.caid_version(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 45:
                        builder.device_name_md5(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 46:
                        builder.hardware_machine(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 47:
                        builder.physical_memory(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 48:
                        builder.hard_disk_size(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 49:
                        builder.country(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 50:
                        builder.language(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 51:
                        builder.time_zone(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 52:
                        builder.cpu_num(ProtoAdapter.UINT32.decode(reader));
                        break;
                    default: {
                        FieldEncoding fieldEncoding = reader.peekFieldEncoding();
                        Object value = fieldEncoding.rawProtoAdapter().decode(reader);
                        builder.addUnknownField(tag, fieldEncoding, value);
                    }
                }
            }
            reader.endMessage(token);
            return builder.build();
        }

        @Override
        public Device redact(Device value) {
            Builder builder = value.newBuilder();
            if (builder.geo != null) builder.geo = Geo.ADAPTER.redact(builder.geo);
            builder.clearUnknownFields();
            return builder.build();
        }
    }
}
