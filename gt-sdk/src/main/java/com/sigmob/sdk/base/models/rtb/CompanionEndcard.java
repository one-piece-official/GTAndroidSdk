// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: sigmob_ssp_response.proto
package com.sigmob.sdk.base.models.rtb;

import android.os.Parcelable;

import com.czhj.wire.AndroidMessage;
import com.czhj.wire.FieldEncoding;
import com.czhj.wire.Message;
import com.czhj.wire.ProtoAdapter;
import com.czhj.wire.ProtoReader;
import com.czhj.wire.ProtoWriter;
import com.czhj.wire.WireField;
import com.czhj.wire.internal.Internal;
import com.czhj.wire.okio.ByteString;

import java.io.IOException;

public final class CompanionEndcard extends AndroidMessage<CompanionEndcard, CompanionEndcard.Builder> {
    public static final ProtoAdapter<CompanionEndcard> ADAPTER = new ProtoAdapter_CompanionEndcard();

    public static final Parcelable.Creator<CompanionEndcard> CREATOR = AndroidMessage.newCreator(ADAPTER);

    private static final long serialVersionUID = 0L;

    public static final String DEFAULT_ICON_URL = "";

    public static final String DEFAULT_TITLE = "";

    public static final Float DEFAULT_SCORE = 0.0f;

    public static final String DEFAULT_BUTTON_TEXT = "";

    public static final Integer DEFAULT_CLICK_TYPE = 0;

    public static final String DEFAULT_DESC = "";

    public static final Integer DEFAULT_ANIMATE_TYPE = 0;

    public static final Integer DEFAULT_SHOW_DELAY_SECS = 0;

    /**
     * 下载类app的icon（目前用在伴随广告）
     */
    @WireField(
            tag = 1,
            adapter = "com.squareup.wire.ProtoAdapter#STRING"
    )
    public final String icon_url;

    /**
     * 广告标题（目前用在伴随广告，即将废弃。移入ad中）
     */
    @WireField(
            tag = 2,
            adapter = "com.squareup.wire.ProtoAdapter#STRING"
    )
    public final String title;

    /**
     * 下载类app的星际，小数，例如4.5表示4星半（目前用在伴随广告），score大于等于1才有效
     */
    @WireField(
            tag = 3,
            adapter = "com.squareup.wire.ProtoAdapter#FLOAT"
    )
    public final Float score;

    /**
     * 伴随广告的button的文字（目前用在伴随广告）
     */
    @WireField(
            tag = 4,
            adapter = "com.squareup.wire.ProtoAdapter#STRING"
    )
    public final String button_text;

    /**
     * 按钮颜色（目前用在伴随广告）,color对象
     */
    @WireField(
            tag = 5,
            adapter = "Color#ADAPTER"
    )
    public final Color button_color;

    /**
     * 按钮字体的颜色（目前用在伴随广告）,color对象
     */
    @WireField(
            tag = 6,
            adapter = "Color#ADAPTER"
    )
    public final Color button_text_color;

    /**
     * 点击类型，1=按钮点击，2=伴随条点击
     */
    @WireField(
            tag = 7,
            adapter = "com.squareup.wire.ProtoAdapter#UINT32"
    )
    public final Integer click_type;

    /**
     * 伴随条的颜色,color对象
     */
    @WireField(
            tag = 8,
            adapter = "Color#ADAPTER"
    )
    public final Color bar_color;

    /**
     * 应用描述
     */
    @WireField(
            tag = 9,
            adapter = "com.squareup.wire.ProtoAdapter#STRING"
    )
    public final String desc;

    /**
     * 动画类型,1：中心缩放+弹簧；2：自下而上;3:无动画；
     */
    @WireField(
            tag = 10,
            adapter = "com.squareup.wire.ProtoAdapter#UINT32"
    )
    public final Integer animate_type;

    /**
     * 伴随条延迟出现的秒数
     */
    @WireField(
            tag = 11,
            adapter = "com.squareup.wire.ProtoAdapter#UINT32"
    )
    public final Integer show_delay_secs;

    public CompanionEndcard(String icon_url, String title, Float score, String button_text,
                            Color button_color, Color button_text_color, Integer click_type, Color bar_color, String desc,
                            Integer animate_type, Integer show_delay_secs) {
        this(icon_url, title, score, button_text, button_color, button_text_color, click_type, bar_color, desc, animate_type, show_delay_secs, ByteString.EMPTY);
    }

    public CompanionEndcard(String icon_url, String title, Float score, String button_text,
                            Color button_color, Color button_text_color, Integer click_type, Color bar_color, String desc,
                            Integer animate_type, Integer show_delay_secs, ByteString unknownFields) {
        super(ADAPTER, unknownFields);
        this.icon_url = icon_url;
        this.title = title;
        this.score = score;
        this.button_text = button_text;
        this.button_color = button_color;
        this.button_text_color = button_text_color;
        this.click_type = click_type;
        this.bar_color = bar_color;
        this.desc = desc;
        this.animate_type = animate_type;
        this.show_delay_secs = show_delay_secs;
    }

    @Override
    public Builder newBuilder() {
        Builder builder = new Builder();
        builder.icon_url = icon_url;
        builder.title = title;
        builder.score = score;
        builder.button_text = button_text;
        builder.button_color = button_color;
        builder.button_text_color = button_text_color;
        builder.click_type = click_type;
        builder.bar_color = bar_color;
        builder.desc = desc;
        builder.animate_type = animate_type;
        builder.show_delay_secs = show_delay_secs;
        builder.addUnknownFields(unknownFields());
        return builder;
    }

    @Override
    public boolean equals(Object other) {
        if (other == this) return true;
        if (!(other instanceof CompanionEndcard)) return false;
        CompanionEndcard o = (CompanionEndcard) other;
        return unknownFields().equals(o.unknownFields())
                && Internal.equals(icon_url, o.icon_url)
                && Internal.equals(title, o.title)
                && Internal.equals(score, o.score)
                && Internal.equals(button_text, o.button_text)
                && Internal.equals(button_color, o.button_color)
                && Internal.equals(button_text_color, o.button_text_color)
                && Internal.equals(click_type, o.click_type)
                && Internal.equals(bar_color, o.bar_color)
                && Internal.equals(desc, o.desc)
                && Internal.equals(animate_type, o.animate_type)
                && Internal.equals(show_delay_secs, o.show_delay_secs);
    }

    @Override
    public int hashCode() {
        int result = super.hashCode;
        if (result == 0) {
            result = unknownFields().hashCode();
            result = result * 37 + (icon_url != null ? icon_url.hashCode() : 0);
            result = result * 37 + (title != null ? title.hashCode() : 0);
            result = result * 37 + (score != null ? score.hashCode() : 0);
            result = result * 37 + (button_text != null ? button_text.hashCode() : 0);
            result = result * 37 + (button_color != null ? button_color.hashCode() : 0);
            result = result * 37 + (button_text_color != null ? button_text_color.hashCode() : 0);
            result = result * 37 + (click_type != null ? click_type.hashCode() : 0);
            result = result * 37 + (bar_color != null ? bar_color.hashCode() : 0);
            result = result * 37 + (desc != null ? desc.hashCode() : 0);
            result = result * 37 + (animate_type != null ? animate_type.hashCode() : 0);
            result = result * 37 + (show_delay_secs != null ? show_delay_secs.hashCode() : 0);
            super.hashCode = result;
        }
        return result;
    }

    @Override
    public String toString() {
        StringBuilder builder = new StringBuilder();
        if (icon_url != null) builder.append(", icon_url=").append(icon_url);
        if (title != null) builder.append(", title=").append(title);
        if (score != null) builder.append(", score=").append(score);
        if (button_text != null) builder.append(", button_text=").append(button_text);
        if (button_color != null) builder.append(", button_color=").append(button_color);
        if (button_text_color != null)
            builder.append(", button_text_color=").append(button_text_color);
        if (click_type != null) builder.append(", click_type=").append(click_type);
        if (bar_color != null) builder.append(", bar_color=").append(bar_color);
        if (desc != null) builder.append(", desc=").append(desc);
        if (animate_type != null) builder.append(", animate_type=").append(animate_type);
        if (show_delay_secs != null) builder.append(", show_delay_secs=").append(show_delay_secs);
        return builder.replace(0, 2, "CompanionEndcard{").append('}').toString();
    }

    public static final class Builder extends Message.Builder<CompanionEndcard, Builder> {
        public String icon_url = DEFAULT_ICON_URL;

        public String title = DEFAULT_TITLE;

        public Float score = DEFAULT_SCORE;

        public String button_text = DEFAULT_BUTTON_TEXT;

        public Color button_color;

        public Color button_text_color;

        public Integer click_type = DEFAULT_CLICK_TYPE;

        public Color bar_color;

        public String desc = DEFAULT_DESC;

        public Integer animate_type = DEFAULT_ANIMATE_TYPE;

        public Integer show_delay_secs = DEFAULT_SHOW_DELAY_SECS;

        public Builder() {
        }

        /**
         * 下载类app的icon（目前用在伴随广告）
         */
        public Builder icon_url(String icon_url) {
            this.icon_url = icon_url;
            return this;
        }

        /**
         * 广告标题（目前用在伴随广告，即将废弃。移入ad中）
         */
        public Builder title(String title) {
            this.title = title;
            return this;
        }

        /**
         * 下载类app的星际，小数，例如4.5表示4星半（目前用在伴随广告），score大于等于1才有效
         */
        public Builder score(Float score) {
            this.score = score;
            return this;
        }

        /**
         * 伴随广告的button的文字（目前用在伴随广告）
         */
        public Builder button_text(String button_text) {
            this.button_text = button_text;
            return this;
        }

        /**
         * 按钮颜色（目前用在伴随广告）,color对象
         */
        public Builder button_color(Color button_color) {
            this.button_color = button_color;
            return this;
        }

        /**
         * 按钮字体的颜色（目前用在伴随广告）,color对象
         */
        public Builder button_text_color(Color button_text_color) {
            this.button_text_color = button_text_color;
            return this;
        }

        /**
         * 点击类型，1=按钮点击，2=伴随条点击
         */
        public Builder click_type(Integer click_type) {
            this.click_type = click_type;
            return this;
        }

        /**
         * 伴随条的颜色,color对象
         */
        public Builder bar_color(Color bar_color) {
            this.bar_color = bar_color;
            return this;
        }

        /**
         * 应用描述
         */
        public Builder desc(String desc) {
            this.desc = desc;
            return this;
        }

        /**
         * 动画类型,1：中心缩放+弹簧；2：自下而上;3:无动画；
         */
        public Builder animate_type(Integer animate_type) {
            this.animate_type = animate_type;
            return this;
        }

        /**
         * 伴随条延迟出现的秒数
         */
        public Builder show_delay_secs(Integer show_delay_secs) {
            this.show_delay_secs = show_delay_secs;
            return this;
        }

        @Override
        public CompanionEndcard build() {
            return new CompanionEndcard(icon_url, title, score, button_text, button_color, button_text_color, click_type, bar_color, desc, animate_type, show_delay_secs, super.buildUnknownFields());
        }
    }

    private static final class ProtoAdapter_CompanionEndcard extends ProtoAdapter<CompanionEndcard> {
        public ProtoAdapter_CompanionEndcard() {
            super(FieldEncoding.LENGTH_DELIMITED, CompanionEndcard.class);
        }

        @Override
        public int encodedSize(CompanionEndcard value) {
            return ProtoAdapter.STRING.encodedSizeWithTag(1, value.icon_url)
                    + ProtoAdapter.STRING.encodedSizeWithTag(2, value.title)
                    + ProtoAdapter.FLOAT.encodedSizeWithTag(3, value.score)
                    + ProtoAdapter.STRING.encodedSizeWithTag(4, value.button_text)
                    + Color.ADAPTER.encodedSizeWithTag(5, value.button_color)
                    + Color.ADAPTER.encodedSizeWithTag(6, value.button_text_color)
                    + ProtoAdapter.UINT32.encodedSizeWithTag(7, value.click_type)
                    + Color.ADAPTER.encodedSizeWithTag(8, value.bar_color)
                    + ProtoAdapter.STRING.encodedSizeWithTag(9, value.desc)
                    + ProtoAdapter.UINT32.encodedSizeWithTag(10, value.animate_type)
                    + ProtoAdapter.UINT32.encodedSizeWithTag(11, value.show_delay_secs)
                    + value.unknownFields().size();
        }

        @Override
        public void encode(ProtoWriter writer, CompanionEndcard value) throws IOException {
            ProtoAdapter.STRING.encodeWithTag(writer, 1, value.icon_url);
            ProtoAdapter.STRING.encodeWithTag(writer, 2, value.title);
            ProtoAdapter.FLOAT.encodeWithTag(writer, 3, value.score);
            ProtoAdapter.STRING.encodeWithTag(writer, 4, value.button_text);
            Color.ADAPTER.encodeWithTag(writer, 5, value.button_color);
            Color.ADAPTER.encodeWithTag(writer, 6, value.button_text_color);
            ProtoAdapter.UINT32.encodeWithTag(writer, 7, value.click_type);
            Color.ADAPTER.encodeWithTag(writer, 8, value.bar_color);
            ProtoAdapter.STRING.encodeWithTag(writer, 9, value.desc);
            ProtoAdapter.UINT32.encodeWithTag(writer, 10, value.animate_type);
            ProtoAdapter.UINT32.encodeWithTag(writer, 11, value.show_delay_secs);
            writer.writeBytes(value.unknownFields());
        }

        @Override
        public CompanionEndcard decode(ProtoReader reader) throws IOException {
            Builder builder = new Builder();
            long token = reader.beginMessage();
            for (int tag; (tag = reader.nextTag()) != -1; ) {
                switch (tag) {
                    case 1:
                        builder.icon_url(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 2:
                        builder.title(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 3:
                        builder.score(ProtoAdapter.FLOAT.decode(reader));
                        break;
                    case 4:
                        builder.button_text(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 5:
                        builder.button_color(Color.ADAPTER.decode(reader));
                        break;
                    case 6:
                        builder.button_text_color(Color.ADAPTER.decode(reader));
                        break;
                    case 7:
                        builder.click_type(ProtoAdapter.UINT32.decode(reader));
                        break;
                    case 8:
                        builder.bar_color(Color.ADAPTER.decode(reader));
                        break;
                    case 9:
                        builder.desc(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 10:
                        builder.animate_type(ProtoAdapter.UINT32.decode(reader));
                        break;
                    case 11:
                        builder.show_delay_secs(ProtoAdapter.UINT32.decode(reader));
                        break;
                    default: {
                        FieldEncoding fieldEncoding = reader.peekFieldEncoding();
                        Object value = fieldEncoding.rawProtoAdapter().decode(reader);
                        builder.addUnknownField(tag, fieldEncoding, value);
                    }
                }
            }
            reader.endMessage(token);
            return builder.build();
        }

        @Override
        public CompanionEndcard redact(CompanionEndcard value) {
            Builder builder = value.newBuilder();
            if (builder.button_color != null)
                builder.button_color = Color.ADAPTER.redact(builder.button_color);
            if (builder.button_text_color != null)
                builder.button_text_color = Color.ADAPTER.redact(builder.button_text_color);
            if (builder.bar_color != null)
                builder.bar_color = Color.ADAPTER.redact(builder.bar_color);
            builder.clearUnknownFields();
            return builder.build();
        }
    }
}
