// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: sigmob_ssp_response.proto
package com.sigmob.sdk.base.models.rtb;

import android.os.Parcelable;

import com.czhj.wire.AndroidMessage;
import com.czhj.wire.FieldEncoding;
import com.czhj.wire.Message;
import com.czhj.wire.ProtoAdapter;
import com.czhj.wire.ProtoReader;
import com.czhj.wire.ProtoWriter;
import com.czhj.wire.WireField;
import com.czhj.wire.internal.Internal;
import com.czhj.wire.okio.ByteString;

import java.io.IOException;
import java.util.List;

/**
 * 广告效果跟踪信息
 */
public final class Tracking extends AndroidMessage<Tracking, Tracking.Builder> {
    public static final ProtoAdapter<Tracking> ADAPTER = new ProtoAdapter_Tracking();

    public static final Parcelable.Creator<Tracking> CREATOR = AndroidMessage.newCreator(ADAPTER);

    private static final long serialVersionUID = 0L;

    public static final String DEFAULT_TRACKING_EVENT_TYPE = "";

    /**
     * track事件类型。事件类型见字典
     */
    @WireField(
            tag = 1,
            adapter = "com.squareup.wire.ProtoAdapter#STRING"
    )
    public final String tracking_event_type;

    /**
     * track事件URL
     */
    @WireField(
            tag = 2,
            adapter = "com.squareup.wire.ProtoAdapter#STRING",
            label = WireField.Label.REPEATED
    )
    public final List<String> tracking_url;

    public Tracking(String tracking_event_type, List<String> tracking_url) {
        this(tracking_event_type, tracking_url, ByteString.EMPTY);
    }

    public Tracking(String tracking_event_type, List<String> tracking_url, ByteString unknownFields) {
        super(ADAPTER, unknownFields);
        this.tracking_event_type = tracking_event_type;
        this.tracking_url = Internal.immutableCopyOf("tracking_url", tracking_url);
    }

    @Override
    public Builder newBuilder() {
        Builder builder = new Builder();
        builder.tracking_event_type = tracking_event_type;
        builder.tracking_url = Internal.copyOf("tracking_url", tracking_url);
        builder.addUnknownFields(unknownFields());
        return builder;
    }

    @Override
    public boolean equals(Object other) {
        if (other == this) return true;
        if (!(other instanceof Tracking)) return false;
        Tracking o = (Tracking) other;
        return unknownFields().equals(o.unknownFields())
                && Internal.equals(tracking_event_type, o.tracking_event_type)
                && tracking_url.equals(o.tracking_url);
    }

    @Override
    public int hashCode() {
        int result = super.hashCode;
        if (result == 0) {
            result = unknownFields().hashCode();
            result = result * 37 + (tracking_event_type != null ? tracking_event_type.hashCode() : 0);
            result = result * 37 + tracking_url.hashCode();
            super.hashCode = result;
        }
        return result;
    }

    @Override
    public String toString() {
        StringBuilder builder = new StringBuilder();
        if (tracking_event_type != null)
            builder.append(", tracking_event_type=").append(tracking_event_type);
        if (!tracking_url.isEmpty()) builder.append(", tracking_url=").append(tracking_url);
        return builder.replace(0, 2, "Tracking{").append('}').toString();
    }

    public static final class Builder extends Message.Builder<Tracking, Builder> {
        public String tracking_event_type = DEFAULT_TRACKING_EVENT_TYPE;

        public List<String> tracking_url;

        public Builder() {
            tracking_url = Internal.newMutableList();
        }

        /**
         * track事件类型。事件类型见字典
         */
        public Builder tracking_event_type(String tracking_event_type) {
            this.tracking_event_type = tracking_event_type;
            return this;
        }

        /**
         * track事件URL
         */
        public Builder tracking_url(List<String> tracking_url) {
            Internal.checkElementsNotNull(tracking_url);
            this.tracking_url = tracking_url;
            return this;
        }

        @Override
        public Tracking build() {
            return new Tracking(tracking_event_type, tracking_url, super.buildUnknownFields());
        }
    }

    private static final class ProtoAdapter_Tracking extends ProtoAdapter<Tracking> {
        public ProtoAdapter_Tracking() {
            super(FieldEncoding.LENGTH_DELIMITED, Tracking.class);
        }

        @Override
        public int encodedSize(Tracking value) {
            return ProtoAdapter.STRING.encodedSizeWithTag(1, value.tracking_event_type)
                    + ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(2, value.tracking_url)
                    + value.unknownFields().size();
        }

        @Override
        public void encode(ProtoWriter writer, Tracking value) throws IOException {
            ProtoAdapter.STRING.encodeWithTag(writer, 1, value.tracking_event_type);
            ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 2, value.tracking_url);
            writer.writeBytes(value.unknownFields());
        }

        @Override
        public Tracking decode(ProtoReader reader) throws IOException {
            Builder builder = new Builder();
            long token = reader.beginMessage();
            for (int tag; (tag = reader.nextTag()) != -1; ) {
                switch (tag) {
                    case 1:
                        builder.tracking_event_type(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 2:
                        builder.tracking_url.add(ProtoAdapter.STRING.decode(reader));
                        break;
                    default: {
                        FieldEncoding fieldEncoding = reader.peekFieldEncoding();
                        Object value = fieldEncoding.rawProtoAdapter().decode(reader);
                        builder.addUnknownField(tag, fieldEncoding, value);
                    }
                }
            }
            reader.endMessage(token);
            return builder.build();
        }

        @Override
        public Tracking redact(Tracking value) {
            Builder builder = value.newBuilder();
            builder.clearUnknownFields();
            return builder.build();
        }
    }
}
