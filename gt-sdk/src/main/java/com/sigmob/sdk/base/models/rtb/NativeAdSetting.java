// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: sigmob_ssp_response.proto
package com.sigmob.sdk.base.models.rtb;

import android.os.Parcelable;

import com.czhj.wire.AndroidMessage;
import com.czhj.wire.FieldEncoding;
import com.czhj.wire.Message;
import com.czhj.wire.ProtoAdapter;
import com.czhj.wire.ProtoReader;
import com.czhj.wire.ProtoWriter;
import com.czhj.wire.WireField;
import com.czhj.wire.internal.Internal;
import com.czhj.wire.okio.ByteString;

import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;

/**
 * 广告位原生广告配置
 */
public final class NativeAdSetting extends AndroidMessage<NativeAdSetting, NativeAdSetting.Builder> {
  public static final ProtoAdapter<NativeAdSetting> ADAPTER = new ProtoAdapter_NativeAdSetting();

  public static final Parcelable.Creator<NativeAdSetting> CREATOR = AndroidMessage.newCreator(ADAPTER);

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_VIDEO_AUTO_PLAY = 0;

  public static final Integer DEFAULT_PREVIEW_PAGE_VIDEO_MUTE = 0;

  public static final Integer DEFAULT_DETAIL_PAGE_VIDEO_MUTE = 0;

  public static final Integer DEFAULT_IMPRESSION_PERCENT = 0;

  public static final Integer DEFAULT_IMPRESSION_TIME = 0;

  public static final Integer DEFAULT_END_IMPRESSION_TIME = 0;

  public static final Integer DEFAULT_REQ_INTERVAL_TIME = 0;

  public static final Integer DEFAULT_AD_POOL_SIZE = 0;

  public static final Integer DEFAULT_MEDIA_EXPECTED_FLOOR = 0;

  public static final Integer DEFAULT_LOG_INTERVAL_TIME = 0;

  /**
   * 播放器自动控制：0-总是；1-wifi；2-不自动
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer video_auto_play;

  /**
   * 预览页播放器静音控制：0-静音；1-不静音
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer preview_page_video_mute;

  /**
   * 详情页播放器静音控制：0-不静音；1-静音
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer detail_page_video_mute;

  /**
   * 广告有效曝光定义-曝光像素百分比
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer impression_percent;

  /**
   * 广告有效曝光定义-曝光持续时间
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer impression_time;

  /**
   * 针对view-through-ad
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  public final Integer end_impression_time;

  /**
   * 配置间隔时间
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  public final Integer req_interval_time;

  /**
   * 缓存的广告数量
   */
  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  public final Integer ad_pool_size;

  /**
   * 媒体请求底价
   */
  @WireField(
      tag = 9,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer media_expected_floor;

  /**
   * 日志上报间隔
   */
  @WireField(
      tag = 10,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer log_interval_time;

  public NativeAdSetting(Integer video_auto_play, Integer preview_page_video_mute,
      Integer detail_page_video_mute, Integer impression_percent, Integer impression_time,
      Integer end_impression_time, Integer req_interval_time, Integer ad_pool_size,
      Integer media_expected_floor, Integer log_interval_time) {
    this(video_auto_play, preview_page_video_mute, detail_page_video_mute, impression_percent, impression_time, end_impression_time, req_interval_time, ad_pool_size, media_expected_floor, log_interval_time, ByteString.EMPTY);
  }

  public NativeAdSetting(Integer video_auto_play, Integer preview_page_video_mute,
      Integer detail_page_video_mute, Integer impression_percent, Integer impression_time,
      Integer end_impression_time, Integer req_interval_time, Integer ad_pool_size,
      Integer media_expected_floor, Integer log_interval_time, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.video_auto_play = video_auto_play;
    this.preview_page_video_mute = preview_page_video_mute;
    this.detail_page_video_mute = detail_page_video_mute;
    this.impression_percent = impression_percent;
    this.impression_time = impression_time;
    this.end_impression_time = end_impression_time;
    this.req_interval_time = req_interval_time;
    this.ad_pool_size = ad_pool_size;
    this.media_expected_floor = media_expected_floor;
    this.log_interval_time = log_interval_time;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.video_auto_play = video_auto_play;
    builder.preview_page_video_mute = preview_page_video_mute;
    builder.detail_page_video_mute = detail_page_video_mute;
    builder.impression_percent = impression_percent;
    builder.impression_time = impression_time;
    builder.end_impression_time = end_impression_time;
    builder.req_interval_time = req_interval_time;
    builder.ad_pool_size = ad_pool_size;
    builder.media_expected_floor = media_expected_floor;
    builder.log_interval_time = log_interval_time;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof NativeAdSetting)) return false;
    NativeAdSetting o = (NativeAdSetting) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(video_auto_play, o.video_auto_play)
        && Internal.equals(preview_page_video_mute, o.preview_page_video_mute)
        && Internal.equals(detail_page_video_mute, o.detail_page_video_mute)
        && Internal.equals(impression_percent, o.impression_percent)
        && Internal.equals(impression_time, o.impression_time)
        && Internal.equals(end_impression_time, o.end_impression_time)
        && Internal.equals(req_interval_time, o.req_interval_time)
        && Internal.equals(ad_pool_size, o.ad_pool_size)
        && Internal.equals(media_expected_floor, o.media_expected_floor)
        && Internal.equals(log_interval_time, o.log_interval_time);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (video_auto_play != null ? video_auto_play.hashCode() : 0);
      result = result * 37 + (preview_page_video_mute != null ? preview_page_video_mute.hashCode() : 0);
      result = result * 37 + (detail_page_video_mute != null ? detail_page_video_mute.hashCode() : 0);
      result = result * 37 + (impression_percent != null ? impression_percent.hashCode() : 0);
      result = result * 37 + (impression_time != null ? impression_time.hashCode() : 0);
      result = result * 37 + (end_impression_time != null ? end_impression_time.hashCode() : 0);
      result = result * 37 + (req_interval_time != null ? req_interval_time.hashCode() : 0);
      result = result * 37 + (ad_pool_size != null ? ad_pool_size.hashCode() : 0);
      result = result * 37 + (media_expected_floor != null ? media_expected_floor.hashCode() : 0);
      result = result * 37 + (log_interval_time != null ? log_interval_time.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (video_auto_play != null) builder.append(", video_auto_play=").append(video_auto_play);
    if (preview_page_video_mute != null) builder.append(", preview_page_video_mute=").append(preview_page_video_mute);
    if (detail_page_video_mute != null) builder.append(", detail_page_video_mute=").append(detail_page_video_mute);
    if (impression_percent != null) builder.append(", impression_percent=").append(impression_percent);
    if (impression_time != null) builder.append(", impression_time=").append(impression_time);
    if (end_impression_time != null) builder.append(", end_impression_time=").append(end_impression_time);
    if (req_interval_time != null) builder.append(", req_interval_time=").append(req_interval_time);
    if (ad_pool_size != null) builder.append(", ad_pool_size=").append(ad_pool_size);
    if (media_expected_floor != null) builder.append(", media_expected_floor=").append(media_expected_floor);
    if (log_interval_time != null) builder.append(", log_interval_time=").append(log_interval_time);
    return builder.replace(0, 2, "NativeAdSetting{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<NativeAdSetting, Builder> {
        public Integer video_auto_play = DEFAULT_VIDEO_AUTO_PLAY;

        public Integer preview_page_video_mute = DEFAULT_PREVIEW_PAGE_VIDEO_MUTE;

        public Integer detail_page_video_mute = DEFAULT_DETAIL_PAGE_VIDEO_MUTE;

        public Integer impression_percent = DEFAULT_IMPRESSION_PERCENT;

        public Integer impression_time = DEFAULT_IMPRESSION_TIME;

        public Integer end_impression_time = DEFAULT_END_IMPRESSION_TIME;

        public Integer req_interval_time = DEFAULT_REQ_INTERVAL_TIME;

        public Integer ad_pool_size = DEFAULT_AD_POOL_SIZE;

        public Integer media_expected_floor = DEFAULT_MEDIA_EXPECTED_FLOOR;

        public Integer log_interval_time = DEFAULT_LOG_INTERVAL_TIME;

    public Builder() {
    }

    /**
     * 播放器自动控制：0-总是；1-wifi；2-不自动
     */
    public Builder video_auto_play(Integer video_auto_play) {
      this.video_auto_play = video_auto_play;
      return this;
    }

    /**
     * 预览页播放器静音控制：0-静音；1-不静音
     */
    public Builder preview_page_video_mute(Integer preview_page_video_mute) {
      this.preview_page_video_mute = preview_page_video_mute;
      return this;
    }

    /**
     * 详情页播放器静音控制：0-不静音；1-静音
     */
    public Builder detail_page_video_mute(Integer detail_page_video_mute) {
      this.detail_page_video_mute = detail_page_video_mute;
      return this;
    }

    /**
     * 广告有效曝光定义-曝光像素百分比
     */
    public Builder impression_percent(Integer impression_percent) {
      this.impression_percent = impression_percent;
      return this;
    }

    /**
     * 广告有效曝光定义-曝光持续时间
     */
    public Builder impression_time(Integer impression_time) {
      this.impression_time = impression_time;
      return this;
    }

    /**
     * 针对view-through-ad
     */
    public Builder end_impression_time(Integer end_impression_time) {
      this.end_impression_time = end_impression_time;
      return this;
    }

    /**
     * 配置间隔时间
     */
    public Builder req_interval_time(Integer req_interval_time) {
      this.req_interval_time = req_interval_time;
      return this;
    }

    /**
     * 缓存的广告数量
     */
    public Builder ad_pool_size(Integer ad_pool_size) {
      this.ad_pool_size = ad_pool_size;
      return this;
    }

    /**
     * 媒体请求底价
     */
    public Builder media_expected_floor(Integer media_expected_floor) {
      this.media_expected_floor = media_expected_floor;
      return this;
    }

    /**
     * 日志上报间隔
     */
    public Builder log_interval_time(Integer log_interval_time) {
      this.log_interval_time = log_interval_time;
      return this;
    }

    @Override
    public NativeAdSetting build() {
      return new NativeAdSetting(video_auto_play, preview_page_video_mute, detail_page_video_mute, impression_percent, impression_time, end_impression_time, req_interval_time, ad_pool_size, media_expected_floor, log_interval_time, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_NativeAdSetting extends ProtoAdapter<NativeAdSetting> {
    public ProtoAdapter_NativeAdSetting() {
      super(FieldEncoding.LENGTH_DELIMITED, NativeAdSetting.class);
    }

    @Override
    public int encodedSize(NativeAdSetting value) {
      return ProtoAdapter.UINT32.encodedSizeWithTag(1, value.video_auto_play)
          + ProtoAdapter.UINT32.encodedSizeWithTag(2, value.preview_page_video_mute)
          + ProtoAdapter.UINT32.encodedSizeWithTag(3, value.detail_page_video_mute)
          + ProtoAdapter.UINT32.encodedSizeWithTag(4, value.impression_percent)
          + ProtoAdapter.UINT32.encodedSizeWithTag(5, value.impression_time)
          + ProtoAdapter.INT32.encodedSizeWithTag(6, value.end_impression_time)
          + ProtoAdapter.INT32.encodedSizeWithTag(7, value.req_interval_time)
          + ProtoAdapter.INT32.encodedSizeWithTag(8, value.ad_pool_size)
          + ProtoAdapter.UINT32.encodedSizeWithTag(9, value.media_expected_floor)
          + ProtoAdapter.UINT32.encodedSizeWithTag(10, value.log_interval_time)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, NativeAdSetting value) throws IOException {
      ProtoAdapter.UINT32.encodeWithTag(writer, 1, value.video_auto_play);
      ProtoAdapter.UINT32.encodeWithTag(writer, 2, value.preview_page_video_mute);
      ProtoAdapter.UINT32.encodeWithTag(writer, 3, value.detail_page_video_mute);
      ProtoAdapter.UINT32.encodeWithTag(writer, 4, value.impression_percent);
      ProtoAdapter.UINT32.encodeWithTag(writer, 5, value.impression_time);
      ProtoAdapter.INT32.encodeWithTag(writer, 6, value.end_impression_time);
      ProtoAdapter.INT32.encodeWithTag(writer, 7, value.req_interval_time);
      ProtoAdapter.INT32.encodeWithTag(writer, 8, value.ad_pool_size);
      ProtoAdapter.UINT32.encodeWithTag(writer, 9, value.media_expected_floor);
      ProtoAdapter.UINT32.encodeWithTag(writer, 10, value.log_interval_time);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public NativeAdSetting decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.video_auto_play(ProtoAdapter.UINT32.decode(reader)); break;
          case 2: builder.preview_page_video_mute(ProtoAdapter.UINT32.decode(reader)); break;
          case 3: builder.detail_page_video_mute(ProtoAdapter.UINT32.decode(reader)); break;
          case 4: builder.impression_percent(ProtoAdapter.UINT32.decode(reader)); break;
          case 5: builder.impression_time(ProtoAdapter.UINT32.decode(reader)); break;
          case 6: builder.end_impression_time(ProtoAdapter.INT32.decode(reader)); break;
          case 7: builder.req_interval_time(ProtoAdapter.INT32.decode(reader)); break;
          case 8: builder.ad_pool_size(ProtoAdapter.INT32.decode(reader)); break;
          case 9: builder.media_expected_floor(ProtoAdapter.UINT32.decode(reader)); break;
          case 10: builder.log_interval_time(ProtoAdapter.UINT32.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public NativeAdSetting redact(NativeAdSetting value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
