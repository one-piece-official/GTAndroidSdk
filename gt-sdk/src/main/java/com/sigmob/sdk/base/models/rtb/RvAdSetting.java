// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: sigmob_ssp_response.proto
package com.sigmob.sdk.base.models.rtb;

import android.os.Parcelable;

import com.czhj.wire.AndroidMessage;
import com.czhj.wire.FieldEncoding;
import com.czhj.wire.Message;
import com.czhj.wire.ProtoAdapter;
import com.czhj.wire.ProtoReader;
import com.czhj.wire.ProtoWriter;
import com.czhj.wire.WireField;
import com.czhj.wire.internal.Internal;
import com.czhj.wire.okio.ByteString;

import java.io.IOException;

public final class RvAdSetting extends AndroidMessage<RvAdSetting, RvAdSetting.Builder> {
    public static final ProtoAdapter<RvAdSetting> ADAPTER = new ProtoAdapter_RvAdSetting();

    public static final Parcelable.Creator<RvAdSetting> CREATOR = AndroidMessage.newCreator(ADAPTER);

    private static final long serialVersionUID = 0L;

    public static final Integer DEFAULT_IF_MUTE = 0;

    public static final Float DEFAULT_FINISHED = 0.0f;

    public static final Integer DEFAULT_VIDEO_CLOSE_POSITION = 0;

    public static final Integer DEFAULT_ENDCARD_CLOSE_POSITION = 0;

    public static final Integer DEFAULT_MUTE_POSTION = 0;

    public static final Integer DEFAULT_SKIP_PERCENT = 0;

    public static final Integer DEFAULT_SKIP_SECONDS = 0;

    public static final Boolean DEFAULT_ENABLE_EXIT_ON_VIDEO_CLOSE = false;

    public static final Boolean DEFAULT_FULL_CLICK_ON_VIDEO = false;

    public static final Boolean DEFAULT_INVISIBLE_AD_LABEL = false;

    public static final Integer DEFAULT_END_TIME = 0;

    public static final Integer DEFAULT_ENDCARD_CLOSE_IMAGE = 0;

    public static final Integer DEFAULT_END_IMPRESSION_TIME = 0;

    public static final Boolean DEFAULT_DISABLE_AUTO_LOAD = false;

    public static final Integer DEFAULT_CHARGE_SECONDS = 0;

    public static final Integer DEFAULT_CHARGE_PERCENT = 0;

    public static final Integer DEFAULT_REWARD_SECONDS = 0;

    public static final Integer DEFAULT_REWARD_PERCENT = 0;

    public static final Integer DEFAULT_CONFIRM_DIALOG = 0;

    public static final Integer DEFAULT_REWARD_STYLE = 0;

    /**
     * 是否静音，负值表示未设置，由sdk决定，0、有声音，1、静音
     */
    @WireField(
            tag = 1,
            adapter = "com.squareup.wire.ProtoAdapter#INT32"
    )
    public final Integer if_mute;

    /**
     * 播放完成比例定义，从0到1的小数
     */
    @WireField(
            tag = 2,
            adapter = "com.squareup.wire.ProtoAdapter#FLOAT"
    )
    public final Float finished;

    /**
     * 视频关闭按钮位置，左上：1，右上：3
     */
    @WireField(
            tag = 3,
            adapter = "com.squareup.wire.ProtoAdapter#INT32"
    )
    public final Integer video_close_position;

    /**
     * endcard关闭按钮位置，左上：1，左下：2，右上：3，右下：4，
     */
    @WireField(
            tag = 4,
            adapter = "com.squareup.wire.ProtoAdapter#INT32"
    )
    public final Integer endcard_close_position;

    /**
     * 静音按钮位置， 左上：1，左下：2，右上：3，右下：4，
     */
    @WireField(
            tag = 5,
            adapter = "com.squareup.wire.ProtoAdapter#INT32"
    )
    public final Integer mute_postion;

    /**
     * 跳过按钮，根据视频播放进度的百分比显示，取值范围[0,100]，取0表示一开始就可条，取30，表示播放到30%时显示跳过按钮
     */
    @WireField(
            tag = 6,
            adapter = "com.squareup.wire.ProtoAdapter#INT32"
    )
    public final Integer skip_percent;

    /**
     * 小于零表示此项不生效，大于等于零表示经过的指定的秒数后显示跳过按钮，如果次项配置大于等于零，则skipPercent配置项自动失效
     */
    @WireField(
            tag = 7,
            adapter = "com.squareup.wire.ProtoAdapter#INT32"
    )
    public final Integer skip_seconds;

    /**
     * 是否允许关闭视频时直接退出广告，而不再显示endcard
     */
    @WireField(
            tag = 8,
            adapter = "com.squareup.wire.ProtoAdapter#BOOL"
    )
    public final Boolean enable_exit_on_video_close;

    /**
     * 视频全屏点击开关
     */
    @WireField(
            tag = 9,
            adapter = "com.squareup.wire.ProtoAdapter#BOOL"
    )
    public final Boolean full_click_on_video;

    /**
     * 点击区域配置
     */
    @WireField(
            tag = 10,
            adapter = "com.sigmob.sdk.base.models.rtb.ClickAreaSetting#ADAPTER"
    )
    public final ClickAreaSetting click_setting;

    /**
     * 是否不显示广告字样
     */
    @WireField(
            tag = 11,
            adapter = "com.squareup.wire.ProtoAdapter#BOOL"
    )
    public final Boolean invisible_ad_label;

    /**
     * 视频播放结束时间（t>0）
     */
    @WireField(
            tag = 12,
            adapter = "com.squareup.wire.ProtoAdapter#INT32"
    )
    public final Integer end_time;

    /**
     * endcard close按钮图片配置：0: 使用老图片；1: 使用新图片 default = 0
     */
    @WireField(
            tag = 13,
            adapter = "com.squareup.wire.ProtoAdapter#INT32"
    )
    public final Integer endcard_close_image;

    /**
     * 针对view-through-ad
     */
    @WireField(
            tag = 14,
            adapter = "com.squareup.wire.ProtoAdapter#INT32"
    )
    public final Integer end_impression_time;

    /**
     * 关闭广告播放中的自动加载逻辑
     */
    @WireField(
            tag = 15,
            adapter = "com.squareup.wire.ProtoAdapter#BOOL"
    )
    public final Boolean disable_auto_load;

    /**
     * 有效播放，>=0生效，正数第x秒触发
     */
    @WireField(
            tag = 16,
            adapter = "com.squareup.wire.ProtoAdapter#INT32"
    )
    public final Integer charge_seconds;

    /**
     * 有效播放，>=0生效，播放百分比触
     */
    @WireField(
            tag = 17,
            adapter = "com.squareup.wire.ProtoAdapter#INT32"
    )
    public final Integer charge_percent;

    /**
     * 触达奖励，>=0生效，正数第x秒触发
     */
    @WireField(
            tag = 18,
            adapter = "com.squareup.wire.ProtoAdapter#INT32"
    )
    public final Integer reward_seconds;

    /**
     * 触达奖励，>=0生效，播放百分比触发
     */
    @WireField(
            tag = 19,
            adapter = "com.squareup.wire.ProtoAdapter#INT32"
    )
    public final Integer reward_percent;

    /**
     * 广告在跳过时且未达到奖励条件时，是否弹窗挽留；0 or 1: 弹窗、2: 不弹窗
     */
    @WireField(
            tag = 20,
            adapter = "com.squareup.wire.ProtoAdapter#INT32"
    )
    public final Integer confirm_dialog;

    /**
     * 奖励等待样式 0: 无； 1: 长驻提示
     */
    @WireField(
            tag = 21,
            adapter = "com.squareup.wire.ProtoAdapter#INT32"
    )
    public final Integer reward_style;

    public RvAdSetting(Integer if_mute, Float finished, Integer video_close_position,
                       Integer endcard_close_position, Integer mute_postion, Integer skip_percent,
                       Integer skip_seconds, Boolean enable_exit_on_video_close, Boolean full_click_on_video,
                       ClickAreaSetting click_setting, Boolean invisible_ad_label, Integer end_time,
                       Integer endcard_close_image, Integer end_impression_time, Boolean disable_auto_load,
                       Integer charge_seconds, Integer charge_percent, Integer reward_seconds,
                       Integer reward_percent, Integer confirm_dialog, Integer reward_style) {
        this(if_mute, finished, video_close_position, endcard_close_position, mute_postion, skip_percent, skip_seconds, enable_exit_on_video_close, full_click_on_video, click_setting, invisible_ad_label, end_time, endcard_close_image, end_impression_time, disable_auto_load, charge_seconds, charge_percent, reward_seconds, reward_percent, confirm_dialog, reward_style, ByteString.EMPTY);
    }

    public RvAdSetting(Integer if_mute, Float finished, Integer video_close_position,
                       Integer endcard_close_position, Integer mute_postion, Integer skip_percent,
                       Integer skip_seconds, Boolean enable_exit_on_video_close, Boolean full_click_on_video,
                       ClickAreaSetting click_setting, Boolean invisible_ad_label, Integer end_time,
                       Integer endcard_close_image, Integer end_impression_time, Boolean disable_auto_load,
                       Integer charge_seconds, Integer charge_percent, Integer reward_seconds,
                       Integer reward_percent, Integer confirm_dialog, Integer reward_style,
                       ByteString unknownFields) {
        super(ADAPTER, unknownFields);
        this.if_mute = if_mute;
        this.finished = finished;
        this.video_close_position = video_close_position;
        this.endcard_close_position = endcard_close_position;
        this.mute_postion = mute_postion;
        this.skip_percent = skip_percent;
        this.skip_seconds = skip_seconds;
        this.enable_exit_on_video_close = enable_exit_on_video_close;
        this.full_click_on_video = full_click_on_video;
        this.click_setting = click_setting;
        this.invisible_ad_label = invisible_ad_label;
        this.end_time = end_time;
        this.endcard_close_image = endcard_close_image;
        this.end_impression_time = end_impression_time;
        this.disable_auto_load = disable_auto_load;
        this.charge_seconds = charge_seconds;
        this.charge_percent = charge_percent;
        this.reward_seconds = reward_seconds;
        this.reward_percent = reward_percent;
        this.confirm_dialog = confirm_dialog;
        this.reward_style = reward_style;
    }

    @Override
    public Builder newBuilder() {
        Builder builder = new Builder();
        builder.if_mute = if_mute;
        builder.finished = finished;
        builder.video_close_position = video_close_position;
        builder.endcard_close_position = endcard_close_position;
        builder.mute_postion = mute_postion;
        builder.skip_percent = skip_percent;
        builder.skip_seconds = skip_seconds;
        builder.enable_exit_on_video_close = enable_exit_on_video_close;
        builder.full_click_on_video = full_click_on_video;
        builder.click_setting = click_setting;
        builder.invisible_ad_label = invisible_ad_label;
        builder.end_time = end_time;
        builder.endcard_close_image = endcard_close_image;
        builder.end_impression_time = end_impression_time;
        builder.disable_auto_load = disable_auto_load;
        builder.charge_seconds = charge_seconds;
        builder.charge_percent = charge_percent;
        builder.reward_seconds = reward_seconds;
        builder.reward_percent = reward_percent;
        builder.confirm_dialog = confirm_dialog;
        builder.reward_style = reward_style;
        builder.addUnknownFields(unknownFields());
        return builder;
    }

    @Override
    public boolean equals(Object other) {
        if (other == this) return true;
        if (!(other instanceof RvAdSetting)) return false;
        RvAdSetting o = (RvAdSetting) other;
        return unknownFields().equals(o.unknownFields())
                && Internal.equals(if_mute, o.if_mute)
                && Internal.equals(finished, o.finished)
                && Internal.equals(video_close_position, o.video_close_position)
                && Internal.equals(endcard_close_position, o.endcard_close_position)
                && Internal.equals(mute_postion, o.mute_postion)
                && Internal.equals(skip_percent, o.skip_percent)
                && Internal.equals(skip_seconds, o.skip_seconds)
                && Internal.equals(enable_exit_on_video_close, o.enable_exit_on_video_close)
                && Internal.equals(full_click_on_video, o.full_click_on_video)
                && Internal.equals(click_setting, o.click_setting)
                && Internal.equals(invisible_ad_label, o.invisible_ad_label)
                && Internal.equals(end_time, o.end_time)
                && Internal.equals(endcard_close_image, o.endcard_close_image)
                && Internal.equals(end_impression_time, o.end_impression_time)
                && Internal.equals(disable_auto_load, o.disable_auto_load)
                && Internal.equals(charge_seconds, o.charge_seconds)
                && Internal.equals(charge_percent, o.charge_percent)
                && Internal.equals(reward_seconds, o.reward_seconds)
                && Internal.equals(reward_percent, o.reward_percent)
                && Internal.equals(confirm_dialog, o.confirm_dialog)
                && Internal.equals(reward_style, o.reward_style);
    }

    @Override
    public int hashCode() {
        int result = super.hashCode;
        if (result == 0) {
            result = unknownFields().hashCode();
            result = result * 37 + (if_mute != null ? if_mute.hashCode() : 0);
            result = result * 37 + (finished != null ? finished.hashCode() : 0);
            result = result * 37 + (video_close_position != null ? video_close_position.hashCode() : 0);
            result = result * 37 + (endcard_close_position != null ? endcard_close_position.hashCode() : 0);
            result = result * 37 + (mute_postion != null ? mute_postion.hashCode() : 0);
            result = result * 37 + (skip_percent != null ? skip_percent.hashCode() : 0);
            result = result * 37 + (skip_seconds != null ? skip_seconds.hashCode() : 0);
            result = result * 37 + (enable_exit_on_video_close != null ? enable_exit_on_video_close.hashCode() : 0);
            result = result * 37 + (full_click_on_video != null ? full_click_on_video.hashCode() : 0);
            result = result * 37 + (click_setting != null ? click_setting.hashCode() : 0);
            result = result * 37 + (invisible_ad_label != null ? invisible_ad_label.hashCode() : 0);
            result = result * 37 + (end_time != null ? end_time.hashCode() : 0);
            result = result * 37 + (endcard_close_image != null ? endcard_close_image.hashCode() : 0);
            result = result * 37 + (end_impression_time != null ? end_impression_time.hashCode() : 0);
            result = result * 37 + (disable_auto_load != null ? disable_auto_load.hashCode() : 0);
            result = result * 37 + (charge_seconds != null ? charge_seconds.hashCode() : 0);
            result = result * 37 + (charge_percent != null ? charge_percent.hashCode() : 0);
            result = result * 37 + (reward_seconds != null ? reward_seconds.hashCode() : 0);
            result = result * 37 + (reward_percent != null ? reward_percent.hashCode() : 0);
            result = result * 37 + (confirm_dialog != null ? confirm_dialog.hashCode() : 0);
            result = result * 37 + (reward_style != null ? reward_style.hashCode() : 0);
            super.hashCode = result;
        }
        return result;
    }

    @Override
    public String toString() {
        StringBuilder builder = new StringBuilder();
        if (if_mute != null) builder.append(", if_mute=").append(if_mute);
        if (finished != null) builder.append(", finished=").append(finished);
        if (video_close_position != null)
            builder.append(", video_close_position=").append(video_close_position);
        if (endcard_close_position != null)
            builder.append(", endcard_close_position=").append(endcard_close_position);
        if (mute_postion != null) builder.append(", mute_postion=").append(mute_postion);
        if (skip_percent != null) builder.append(", skip_percent=").append(skip_percent);
        if (skip_seconds != null) builder.append(", skip_seconds=").append(skip_seconds);
        if (enable_exit_on_video_close != null)
            builder.append(", enable_exit_on_video_close=").append(enable_exit_on_video_close);
        if (full_click_on_video != null)
            builder.append(", full_click_on_video=").append(full_click_on_video);
        if (click_setting != null) builder.append(", click_setting=").append(click_setting);
        if (invisible_ad_label != null)
            builder.append(", invisible_ad_label=").append(invisible_ad_label);
        if (end_time != null) builder.append(", end_time=").append(end_time);
        if (endcard_close_image != null)
            builder.append(", endcard_close_image=").append(endcard_close_image);
        if (end_impression_time != null)
            builder.append(", end_impression_time=").append(end_impression_time);
        if (disable_auto_load != null)
            builder.append(", disable_auto_load=").append(disable_auto_load);
        if (charge_seconds != null) builder.append(", charge_seconds=").append(charge_seconds);
        if (charge_percent != null) builder.append(", charge_percent=").append(charge_percent);
        if (reward_seconds != null) builder.append(", reward_seconds=").append(reward_seconds);
        if (reward_percent != null) builder.append(", reward_percent=").append(reward_percent);
        if (confirm_dialog != null) builder.append(", confirm_dialog=").append(confirm_dialog);
        if (reward_style != null) builder.append(", reward_style=").append(reward_style);
        return builder.replace(0, 2, "RvAdSetting{").append('}').toString();
    }

    public static final class Builder extends Message.Builder<RvAdSetting, Builder> {
        public Integer if_mute = DEFAULT_IF_MUTE;

        public Float finished = DEFAULT_FINISHED;

        public Integer video_close_position = DEFAULT_VIDEO_CLOSE_POSITION;

        public Integer endcard_close_position = DEFAULT_ENDCARD_CLOSE_POSITION;

        public Integer mute_postion = DEFAULT_MUTE_POSTION;

        public Integer skip_percent = DEFAULT_SKIP_PERCENT;

        public Integer skip_seconds;

        public Boolean enable_exit_on_video_close = DEFAULT_ENABLE_EXIT_ON_VIDEO_CLOSE;

        public Boolean full_click_on_video = DEFAULT_FULL_CLICK_ON_VIDEO;

        public ClickAreaSetting click_setting;

        public Boolean invisible_ad_label = DEFAULT_INVISIBLE_AD_LABEL;

        public Integer end_time = DEFAULT_END_TIME;

        public Integer endcard_close_image = DEFAULT_ENDCARD_CLOSE_IMAGE;

        public Integer end_impression_time = DEFAULT_END_IMPRESSION_TIME;

        public Boolean disable_auto_load = DEFAULT_DISABLE_AUTO_LOAD;

        public Integer charge_seconds = DEFAULT_CHARGE_SECONDS;

        public Integer charge_percent = DEFAULT_CHARGE_PERCENT;

        public Integer reward_seconds = DEFAULT_REWARD_SECONDS;

        public Integer reward_percent = DEFAULT_REWARD_PERCENT;

        public Integer confirm_dialog = DEFAULT_CONFIRM_DIALOG;

        public Integer reward_style = DEFAULT_REWARD_STYLE;

        public Builder() {
        }

        /**
         * 是否静音，负值表示未设置，由sdk决定，0、有声音，1、静音
         */
        public Builder if_mute(Integer if_mute) {
            this.if_mute = if_mute;
            return this;
        }

        /**
         * 播放完成比例定义，从0到1的小数
         */
        public Builder finished(Float finished) {
            this.finished = finished;
            return this;
        }

        /**
         * 视频关闭按钮位置，左上：1，右上：3
         */
        public Builder video_close_position(Integer video_close_position) {
            this.video_close_position = video_close_position;
            return this;
        }

        /**
         * endcard关闭按钮位置，左上：1，左下：2，右上：3，右下：4，
         */
        public Builder endcard_close_position(Integer endcard_close_position) {
            this.endcard_close_position = endcard_close_position;
            return this;
        }

        /**
         * 静音按钮位置， 左上：1，左下：2，右上：3，右下：4，
         */
        public Builder mute_postion(Integer mute_postion) {
            this.mute_postion = mute_postion;
            return this;
        }

        /**
         * 跳过按钮，根据视频播放进度的百分比显示，取值范围[0,100]，取0表示一开始就可条，取30，表示播放到30%时显示跳过按钮
         */
        public Builder skip_percent(Integer skip_percent) {
            this.skip_percent = skip_percent;
            return this;
        }

        /**
         * 小于零表示此项不生效，大于等于零表示经过的指定的秒数后显示跳过按钮，如果次项配置大于等于零，则skipPercent配置项自动失效
         */
        public Builder skip_seconds(Integer skip_seconds) {
            this.skip_seconds = skip_seconds;
            return this;
        }

        /**
         * 是否允许关闭视频时直接退出广告，而不再显示endcard
         */
        public Builder enable_exit_on_video_close(Boolean enable_exit_on_video_close) {
            this.enable_exit_on_video_close = enable_exit_on_video_close;
            return this;
        }

        /**
         * 视频全屏点击开关
         */
        public Builder full_click_on_video(Boolean full_click_on_video) {
            this.full_click_on_video = full_click_on_video;
            return this;
        }

        /**
         * 点击区域配置
         */
        public Builder click_setting(ClickAreaSetting click_setting) {
            this.click_setting = click_setting;
            return this;
        }

        /**
         * 是否不显示广告字样
         */
        public Builder invisible_ad_label(Boolean invisible_ad_label) {
            this.invisible_ad_label = invisible_ad_label;
            return this;
        }

        /**
         * 视频播放结束时间（t>0）
         */
        public Builder end_time(Integer end_time) {
            this.end_time = end_time;
            return this;
        }

        /**
         * endcard close按钮图片配置：0: 使用老图片；1: 使用新图片 default = 0
         */
        public Builder endcard_close_image(Integer endcard_close_image) {
            this.endcard_close_image = endcard_close_image;
            return this;
        }

        /**
         * 针对view-through-ad
         */
        public Builder end_impression_time(Integer end_impression_time) {
            this.end_impression_time = end_impression_time;
            return this;
        }

        /**
         * 关闭广告播放中的自动加载逻辑
         */
        public Builder disable_auto_load(Boolean disable_auto_load) {
            this.disable_auto_load = disable_auto_load;
            return this;
        }

        /**
         * 有效播放，>=0生效，正数第x秒触发
         */
        public Builder charge_seconds(Integer charge_seconds) {
            this.charge_seconds = charge_seconds;
            return this;
        }

        /**
         * 有效播放，>=0生效，播放百分比触
         */
        public Builder charge_percent(Integer charge_percent) {
            this.charge_percent = charge_percent;
            return this;
        }

        /**
         * 触达奖励，>=0生效，正数第x秒触发
         */
        public Builder reward_seconds(Integer reward_seconds) {
            this.reward_seconds = reward_seconds;
            return this;
        }

        /**
         * 触达奖励，>=0生效，播放百分比触发
         */
        public Builder reward_percent(Integer reward_percent) {
            this.reward_percent = reward_percent;
            return this;
        }

        /**
         * 广告在跳过时且未达到奖励条件时，是否弹窗挽留；0 or 1: 弹窗、2: 不弹窗
         */
        public Builder confirm_dialog(Integer confirm_dialog) {
            this.confirm_dialog = confirm_dialog;
            return this;
        }

        /**
         * 奖励等待样式 0: 无； 1: 长驻提示
         */
        public Builder reward_style(Integer reward_style) {
            this.reward_style = reward_style;
            return this;
        }

        @Override
        public RvAdSetting build() {
            return new RvAdSetting(if_mute, finished, video_close_position, endcard_close_position, mute_postion, skip_percent, skip_seconds, enable_exit_on_video_close, full_click_on_video, click_setting, invisible_ad_label, end_time, endcard_close_image, end_impression_time, disable_auto_load, charge_seconds, charge_percent, reward_seconds, reward_percent, confirm_dialog, reward_style, super.buildUnknownFields());
        }
    }

    private static final class ProtoAdapter_RvAdSetting extends ProtoAdapter<RvAdSetting> {
        public ProtoAdapter_RvAdSetting() {
            super(FieldEncoding.LENGTH_DELIMITED, RvAdSetting.class);
        }

        @Override
        public int encodedSize(RvAdSetting value) {
            return ProtoAdapter.INT32.encodedSizeWithTag(1, value.if_mute)
                    + ProtoAdapter.FLOAT.encodedSizeWithTag(2, value.finished)
                    + ProtoAdapter.INT32.encodedSizeWithTag(3, value.video_close_position)
                    + ProtoAdapter.INT32.encodedSizeWithTag(4, value.endcard_close_position)
                    + ProtoAdapter.INT32.encodedSizeWithTag(5, value.mute_postion)
                    + ProtoAdapter.INT32.encodedSizeWithTag(6, value.skip_percent)
                    + ProtoAdapter.INT32.encodedSizeWithTag(7, value.skip_seconds)
                    + ProtoAdapter.BOOL.encodedSizeWithTag(8, value.enable_exit_on_video_close)
                    + ProtoAdapter.BOOL.encodedSizeWithTag(9, value.full_click_on_video)
                    + ClickAreaSetting.ADAPTER.encodedSizeWithTag(10, value.click_setting)
                    + ProtoAdapter.BOOL.encodedSizeWithTag(11, value.invisible_ad_label)
                    + ProtoAdapter.INT32.encodedSizeWithTag(12, value.end_time)
                    + ProtoAdapter.INT32.encodedSizeWithTag(13, value.endcard_close_image)
                    + ProtoAdapter.INT32.encodedSizeWithTag(14, value.end_impression_time)
                    + ProtoAdapter.BOOL.encodedSizeWithTag(15, value.disable_auto_load)
                    + ProtoAdapter.INT32.encodedSizeWithTag(16, value.charge_seconds)
                    + ProtoAdapter.INT32.encodedSizeWithTag(17, value.charge_percent)
                    + ProtoAdapter.INT32.encodedSizeWithTag(18, value.reward_seconds)
                    + ProtoAdapter.INT32.encodedSizeWithTag(19, value.reward_percent)
                    + ProtoAdapter.INT32.encodedSizeWithTag(20, value.confirm_dialog)
                    + ProtoAdapter.INT32.encodedSizeWithTag(21, value.reward_style)
                    + value.unknownFields().size();
        }

        @Override
        public void encode(ProtoWriter writer, RvAdSetting value) throws IOException {
            ProtoAdapter.INT32.encodeWithTag(writer, 1, value.if_mute);
            ProtoAdapter.FLOAT.encodeWithTag(writer, 2, value.finished);
            ProtoAdapter.INT32.encodeWithTag(writer, 3, value.video_close_position);
            ProtoAdapter.INT32.encodeWithTag(writer, 4, value.endcard_close_position);
            ProtoAdapter.INT32.encodeWithTag(writer, 5, value.mute_postion);
            ProtoAdapter.INT32.encodeWithTag(writer, 6, value.skip_percent);
            ProtoAdapter.INT32.encodeWithTag(writer, 7, value.skip_seconds);
            ProtoAdapter.BOOL.encodeWithTag(writer, 8, value.enable_exit_on_video_close);
            ProtoAdapter.BOOL.encodeWithTag(writer, 9, value.full_click_on_video);
            ClickAreaSetting.ADAPTER.encodeWithTag(writer, 10, value.click_setting);
            ProtoAdapter.BOOL.encodeWithTag(writer, 11, value.invisible_ad_label);
            ProtoAdapter.INT32.encodeWithTag(writer, 12, value.end_time);
            ProtoAdapter.INT32.encodeWithTag(writer, 13, value.endcard_close_image);
            ProtoAdapter.INT32.encodeWithTag(writer, 14, value.end_impression_time);
            ProtoAdapter.BOOL.encodeWithTag(writer, 15, value.disable_auto_load);
            ProtoAdapter.INT32.encodeWithTag(writer, 16, value.charge_seconds);
            ProtoAdapter.INT32.encodeWithTag(writer, 17, value.charge_percent);
            ProtoAdapter.INT32.encodeWithTag(writer, 18, value.reward_seconds);
            ProtoAdapter.INT32.encodeWithTag(writer, 19, value.reward_percent);
            ProtoAdapter.INT32.encodeWithTag(writer, 20, value.confirm_dialog);
            ProtoAdapter.INT32.encodeWithTag(writer, 21, value.reward_style);
            writer.writeBytes(value.unknownFields());
        }

        @Override
        public RvAdSetting decode(ProtoReader reader) throws IOException {
            Builder builder = new Builder();
            long token = reader.beginMessage();
            for (int tag; (tag = reader.nextTag()) != -1; ) {
                switch (tag) {
                    case 1:
                        builder.if_mute(ProtoAdapter.INT32.decode(reader));
                        break;
                    case 2:
                        builder.finished(ProtoAdapter.FLOAT.decode(reader));
                        break;
                    case 3:
                        builder.video_close_position(ProtoAdapter.INT32.decode(reader));
                        break;
                    case 4:
                        builder.endcard_close_position(ProtoAdapter.INT32.decode(reader));
                        break;
                    case 5:
                        builder.mute_postion(ProtoAdapter.INT32.decode(reader));
                        break;
                    case 6:
                        builder.skip_percent(ProtoAdapter.INT32.decode(reader));
                        break;
                    case 7:
                        builder.skip_seconds(ProtoAdapter.INT32.decode(reader));
                        break;
                    case 8:
                        builder.enable_exit_on_video_close(ProtoAdapter.BOOL.decode(reader));
                        break;
                    case 9:
                        builder.full_click_on_video(ProtoAdapter.BOOL.decode(reader));
                        break;
                    case 10:
                        builder.click_setting(ClickAreaSetting.ADAPTER.decode(reader));
                        break;
                    case 11:
                        builder.invisible_ad_label(ProtoAdapter.BOOL.decode(reader));
                        break;
                    case 12:
                        builder.end_time(ProtoAdapter.INT32.decode(reader));
                        break;
                    case 13:
                        builder.endcard_close_image(ProtoAdapter.INT32.decode(reader));
                        break;
                    case 14:
                        builder.end_impression_time(ProtoAdapter.INT32.decode(reader));
                        break;
                    case 15:
                        builder.disable_auto_load(ProtoAdapter.BOOL.decode(reader));
                        break;
                    case 16:
                        builder.charge_seconds(ProtoAdapter.INT32.decode(reader));
                        break;
                    case 17:
                        builder.charge_percent(ProtoAdapter.INT32.decode(reader));
                        break;
                    case 18:
                        builder.reward_seconds(ProtoAdapter.INT32.decode(reader));
                        break;
                    case 19:
                        builder.reward_percent(ProtoAdapter.INT32.decode(reader));
                        break;
                    case 20:
                        builder.confirm_dialog(ProtoAdapter.INT32.decode(reader));
                        break;
                    case 21:
                        builder.reward_style(ProtoAdapter.INT32.decode(reader));
                        break;
                    default: {
                        FieldEncoding fieldEncoding = reader.peekFieldEncoding();
                        Object value = fieldEncoding.rawProtoAdapter().decode(reader);
                        builder.addUnknownField(tag, fieldEncoding, value);
                    }
                }
            }
            reader.endMessage(token);
            return builder.build();
        }

        @Override
        public RvAdSetting redact(RvAdSetting value) {
            Builder builder = value.newBuilder();
            if (builder.click_setting != null)
                builder.click_setting = ClickAreaSetting.ADAPTER.redact(builder.click_setting);
            builder.clearUnknownFields();
            return builder.build();
        }
    }
}
