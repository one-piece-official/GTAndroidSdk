// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: sigmob_ssp_response.proto
package com.sigmob.sdk.base.models;

import android.os.Parcelable;

import com.czhj.wire.AndroidMessage;
import com.czhj.wire.FieldEncoding;
import com.czhj.wire.Message;
import com.czhj.wire.ProtoAdapter;
import com.czhj.wire.ProtoReader;
import com.czhj.wire.ProtoWriter;
import com.czhj.wire.WireField;
import com.czhj.wire.internal.Internal;
import com.czhj.wire.okio.ByteString;

import java.io.IOException;
import java.util.List;

public final class WebEventHandle extends AndroidMessage<WebEventHandle, WebEventHandle.Builder> {
    public static final ProtoAdapter<WebEventHandle> ADAPTER = new ProtoAdapter_WebEventHandle();

    public static final Parcelable.Creator<WebEventHandle> CREATOR = AndroidMessage.newCreator(ADAPTER);

    private static final long serialVersionUID = 0L;

    public static final Integer DEFAULT_HANDLE_TYPE = 0;

    /**
     * 1)postmesage body handle 2)postmesage name handle
     */
    @WireField(
            tag = 1,
            adapter = "com.squareup.wire.ProtoAdapter#UINT32"
    )
    public final Integer handle_type;

    /**
     * sdk用来注册监听的handle的名称，
     */
    @WireField(
            tag = 2,
            adapter = "com.squareup.wire.ProtoAdapter#STRING",
            label = WireField.Label.REPEATED
    )
    public final List<String> handle_name;

    /**
     * 事件数组
     */
    @WireField(
            tag = 3,
            adapter = "WebEvent#ADAPTER",
            label = WireField.Label.REPEATED
    )
    public final List<WebEvent> events;

    public WebEventHandle(Integer handle_type, List<String> handle_name, List<WebEvent> events) {
        this(handle_type, handle_name, events, ByteString.EMPTY);
    }

    public WebEventHandle(Integer handle_type, List<String> handle_name, List<WebEvent> events,
                          ByteString unknownFields) {
        super(ADAPTER, unknownFields);
        this.handle_type = handle_type;
        this.handle_name = Internal.immutableCopyOf("handle_name", handle_name);
        this.events = Internal.immutableCopyOf("events", events);
    }

    @Override
    public Builder newBuilder() {
        Builder builder = new Builder();
        builder.handle_type = handle_type;
        builder.handle_name = Internal.copyOf("handle_name", handle_name);
        builder.events = Internal.copyOf("events", events);
        builder.addUnknownFields(unknownFields());
        return builder;
    }

    @Override
    public boolean equals(Object other) {
        if (other == this) return true;
        if (!(other instanceof WebEventHandle)) return false;
        WebEventHandle o = (WebEventHandle) other;
        return unknownFields().equals(o.unknownFields())
                && Internal.equals(handle_type, o.handle_type)
                && handle_name.equals(o.handle_name)
                && events.equals(o.events);
    }

    @Override
    public int hashCode() {
        int result = super.hashCode;
        if (result == 0) {
            result = unknownFields().hashCode();
            result = result * 37 + (handle_type != null ? handle_type.hashCode() : 0);
            result = result * 37 + handle_name.hashCode();
            result = result * 37 + events.hashCode();
            super.hashCode = result;
        }
        return result;
    }

    @Override
    public String toString() {
        StringBuilder builder = new StringBuilder();
        if (handle_type != null) builder.append(", handle_type=").append(handle_type);
        if (!handle_name.isEmpty()) builder.append(", handle_name=").append(handle_name);
        if (!events.isEmpty()) builder.append(", events=").append(events);
        return builder.replace(0, 2, "WebEventHandle{").append('}').toString();
    }

    public static final class Builder extends Message.Builder<WebEventHandle, Builder> {
        public Integer handle_type = DEFAULT_HANDLE_TYPE;

        public List<String> handle_name;

        public List<WebEvent> events;

        public Builder() {
            handle_name = Internal.newMutableList();
            events = Internal.newMutableList();
        }

        /**
         * 1)postmesage body handle 2)postmesage name handle
         */
        public Builder handle_type(Integer handle_type) {
            this.handle_type = handle_type;
            return this;
        }

        /**
         * sdk用来注册监听的handle的名称，
         */
        public Builder handle_name(List<String> handle_name) {
            Internal.checkElementsNotNull(handle_name);
            this.handle_name = handle_name;
            return this;
        }

        /**
         * 事件数组
         */
        public Builder events(List<WebEvent> events) {
            Internal.checkElementsNotNull(events);
            this.events = events;
            return this;
        }

        @Override
        public WebEventHandle build() {
            return new WebEventHandle(handle_type, handle_name, events, super.buildUnknownFields());
        }
    }

    private static final class ProtoAdapter_WebEventHandle extends ProtoAdapter<WebEventHandle> {
        public ProtoAdapter_WebEventHandle() {
            super(FieldEncoding.LENGTH_DELIMITED, WebEventHandle.class);
        }

        @Override
        public int encodedSize(WebEventHandle value) {
            return ProtoAdapter.UINT32.encodedSizeWithTag(1, value.handle_type)
                    + ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(2, value.handle_name)
                    + WebEvent.ADAPTER.asRepeated().encodedSizeWithTag(3, value.events)
                    + value.unknownFields().size();
        }

        @Override
        public void encode(ProtoWriter writer, WebEventHandle value) throws IOException {
            ProtoAdapter.UINT32.encodeWithTag(writer, 1, value.handle_type);
            ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 2, value.handle_name);
            WebEvent.ADAPTER.asRepeated().encodeWithTag(writer, 3, value.events);
            writer.writeBytes(value.unknownFields());
        }

        @Override
        public WebEventHandle decode(ProtoReader reader) throws IOException {
            Builder builder = new Builder();
            long token = reader.beginMessage();
            for (int tag; (tag = reader.nextTag()) != -1; ) {
                switch (tag) {
                    case 1:
                        builder.handle_type(ProtoAdapter.UINT32.decode(reader));
                        break;
                    case 2:
                        builder.handle_name.add(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 3:
                        builder.events.add(WebEvent.ADAPTER.decode(reader));
                        break;
                    default: {
                        FieldEncoding fieldEncoding = reader.peekFieldEncoding();
                        Object value = fieldEncoding.rawProtoAdapter().decode(reader);
                        builder.addUnknownField(tag, fieldEncoding, value);
                    }
                }
            }
            reader.endMessage(token);
            return builder.build();
        }

        @Override
        public WebEventHandle redact(WebEventHandle value) {
            Builder builder = value.newBuilder();
            Internal.redactElements(builder.events, WebEvent.ADAPTER);
            builder.clearUnknownFields();
            return builder.build();
        }
    }
}
