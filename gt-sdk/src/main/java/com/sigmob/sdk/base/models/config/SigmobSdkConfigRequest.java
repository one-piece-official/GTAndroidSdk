// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: sigmob_ssp_config.proto
package com.sigmob.sdk.base.models.config;

import android.os.Parcelable;

import com.czhj.sdk.common.models.App;
import com.czhj.sdk.common.models.Device;
import com.czhj.sdk.common.models.Network;
import com.czhj.sdk.common.models.Privacy;
import com.czhj.sdk.common.models.User;
import com.czhj.wire.AndroidMessage;
import com.czhj.wire.FieldEncoding;
import com.czhj.wire.Message;
import com.czhj.wire.ProtoAdapter;
import com.czhj.wire.ProtoReader;
import com.czhj.wire.ProtoWriter;
import com.czhj.wire.WireField;
import com.czhj.wire.internal.Internal;
import com.czhj.wire.okio.ByteString;

import java.io.IOException;

public final class SigmobSdkConfigRequest extends AndroidMessage<SigmobSdkConfigRequest, SigmobSdkConfigRequest.Builder> {
    public static final ProtoAdapter<SigmobSdkConfigRequest> ADAPTER = new ProtoAdapter_SigmobSdkConfigRequest();

    public static final Parcelable.Creator<SigmobSdkConfigRequest> CREATOR = AndroidMessage.newCreator(ADAPTER);

    private static final long serialVersionUID = 0L;

    /**
     * 必填！应用信息
     */
    @WireField(
            tag = 1,
            adapter = "com.sigmob.sdk.common.models.App#ADAPTER"
    )
    public final App app;

    /**
     * 必填！设备信息
     */
    @WireField(
            tag = 2,
            adapter = "com.sigmob.sdk.common.models.Device#ADAPTER"
    )
    public final Device device;

    /**
     * 必填！网络环境信息
     */
    @WireField(
            tag = 3,
            adapter = "com.sigmob.sdk.common.models.Network#ADAPTER"
    )
    public final Network network;

    /**
     * 用户隐私
     */
    @WireField(
            tag = 4,
            adapter = "com.sigmob.sdk.common.models.Privacy#ADAPTER"
    )
    public final Privacy privacy;

    /**
     * 用户信息
     */
    @WireField(
            tag = 5,
            adapter = "com.sigmob.sdk.common.models.User#ADAPTER"
    )
    public final User user;

    public SigmobSdkConfigRequest(App app, Device device, Network network, Privacy privacy,
                                  User user) {
        this(app, device, network, privacy, user, ByteString.EMPTY);
    }

    public SigmobSdkConfigRequest(App app, Device device, Network network, Privacy privacy, User user,
                                  ByteString unknownFields) {
        super(ADAPTER, unknownFields);
        this.app = app;
        this.device = device;
        this.network = network;
        this.privacy = privacy;
        this.user = user;
    }

    @Override
    public Builder newBuilder() {
        Builder builder = new Builder();
        builder.app = app;
        builder.device = device;
        builder.network = network;
        builder.privacy = privacy;
        builder.user = user;
        builder.addUnknownFields(unknownFields());
        return builder;
    }

    @Override
    public boolean equals(Object other) {
        if (other == this) return true;
        if (!(other instanceof SigmobSdkConfigRequest)) return false;
        SigmobSdkConfigRequest o = (SigmobSdkConfigRequest) other;
        return unknownFields().equals(o.unknownFields())
                && Internal.equals(app, o.app)
                && Internal.equals(device, o.device)
                && Internal.equals(network, o.network)
                && Internal.equals(privacy, o.privacy)
                && Internal.equals(user, o.user);
    }

    @Override
    public int hashCode() {
        int result = super.hashCode;
        if (result == 0) {
            result = unknownFields().hashCode();
            result = result * 37 + (app != null ? app.hashCode() : 0);
            result = result * 37 + (device != null ? device.hashCode() : 0);
            result = result * 37 + (network != null ? network.hashCode() : 0);
            result = result * 37 + (privacy != null ? privacy.hashCode() : 0);
            result = result * 37 + (user != null ? user.hashCode() : 0);
            super.hashCode = result;
        }
        return result;
    }

    @Override
    public String toString() {
        StringBuilder builder = new StringBuilder();
        if (app != null) builder.append(", app=").append(app);
        if (device != null) builder.append(", device=").append(device);
        if (network != null) builder.append(", network=").append(network);
        if (privacy != null) builder.append(", privacy=").append(privacy);
        if (user != null) builder.append(", user=").append(user);
        return builder.replace(0, 2, "SigmobSdkConfigRequest{").append('}').toString();
    }

    public static final class Builder extends Message.Builder<SigmobSdkConfigRequest, Builder> {
        public App app;

        public Device device;

        public Network network;

        public Privacy privacy;

        public User user;

        public Builder() {
        }

        /**
         * 必填！应用信息
         */
        public Builder app(App app) {
            this.app = app;
            return this;
        }

        /**
         * 必填！设备信息
         */
        public Builder device(Device device) {
            this.device = device;
            return this;
        }

        /**
         * 必填！网络环境信息
         */
        public Builder network(Network network) {
            this.network = network;
            return this;
        }

        /**
         * 用户隐私
         */
        public Builder privacy(Privacy privacy) {
            this.privacy = privacy;
            return this;
        }

        /**
         * 用户信息
         */
        public Builder user(User user) {
            this.user = user;
            return this;
        }

        @Override
        public SigmobSdkConfigRequest build() {
            return new SigmobSdkConfigRequest(app, device, network, privacy, user, super.buildUnknownFields());
        }
    }

    private static final class ProtoAdapter_SigmobSdkConfigRequest extends ProtoAdapter<SigmobSdkConfigRequest> {
        public ProtoAdapter_SigmobSdkConfigRequest() {
            super(FieldEncoding.LENGTH_DELIMITED, SigmobSdkConfigRequest.class);
        }

        @Override
        public int encodedSize(SigmobSdkConfigRequest value) {
            return App.ADAPTER.encodedSizeWithTag(1, value.app)
                    + Device.ADAPTER.encodedSizeWithTag(2, value.device)
                    + Network.ADAPTER.encodedSizeWithTag(3, value.network)
                    + Privacy.ADAPTER.encodedSizeWithTag(4, value.privacy)
                    + User.ADAPTER.encodedSizeWithTag(5, value.user)
                    + value.unknownFields().size();
        }

        @Override
        public void encode(ProtoWriter writer, SigmobSdkConfigRequest value) throws IOException {
            App.ADAPTER.encodeWithTag(writer, 1, value.app);
            Device.ADAPTER.encodeWithTag(writer, 2, value.device);
            Network.ADAPTER.encodeWithTag(writer, 3, value.network);
            Privacy.ADAPTER.encodeWithTag(writer, 4, value.privacy);
            User.ADAPTER.encodeWithTag(writer, 5, value.user);
            writer.writeBytes(value.unknownFields());
        }

        @Override
        public SigmobSdkConfigRequest decode(ProtoReader reader) throws IOException {
            Builder builder = new Builder();
            long token = reader.beginMessage();
            for (int tag; (tag = reader.nextTag()) != -1; ) {
                switch (tag) {
                    case 1:
                        builder.app(App.ADAPTER.decode(reader));
                        break;
                    case 2:
                        builder.device(Device.ADAPTER.decode(reader));
                        break;
                    case 3:
                        builder.network(Network.ADAPTER.decode(reader));
                        break;
                    case 4:
                        builder.privacy(Privacy.ADAPTER.decode(reader));
                        break;
                    case 5:
                        builder.user(User.ADAPTER.decode(reader));
                        break;
                    default: {
                        FieldEncoding fieldEncoding = reader.peekFieldEncoding();
                        Object value = fieldEncoding.rawProtoAdapter().decode(reader);
                        builder.addUnknownField(tag, fieldEncoding, value);
                    }
                }
            }
            reader.endMessage(token);
            return builder.build();
        }

        @Override
        public SigmobSdkConfigRequest redact(SigmobSdkConfigRequest value) {
            Builder builder = value.newBuilder();
            if (builder.app != null) builder.app = App.ADAPTER.redact(builder.app);
            if (builder.device != null) builder.device = Device.ADAPTER.redact(builder.device);
            if (builder.network != null) builder.network = Network.ADAPTER.redact(builder.network);
            if (builder.privacy != null) builder.privacy = Privacy.ADAPTER.redact(builder.privacy);
            if (builder.user != null) builder.user = User.ADAPTER.redact(builder.user);
            builder.clearUnknownFields();
            return builder.build();
        }
    }
}
